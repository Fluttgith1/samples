// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("health_connect");

/// from: androidx.health.connect.client.HealthConnectClient$Companion
class HealthConnectClient_Companion extends jni.JObject {
  @override
  late final jni.JObjType<HealthConnectClient_Companion> $type = type;

  HealthConnectClient_Companion.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $HealthConnectClient_CompanionType();
  static final _get_DEFAULT_PROVIDER_PACKAGE_NAME = jniLookup<
              ffi.NativeFunction<jni.JniResult Function()>>(
          "get_HealthConnectClient_Companion__DEFAULT_PROVIDER_PACKAGE_NAME")
      .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_PROVIDER_PACKAGE_NAME =>
      _get_DEFAULT_PROVIDER_PACKAGE_NAME().object(const jni.JStringType());

  static final _get_HEALTH_CONNECT_CLIENT_TAG =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_HealthConnectClient_Companion__HEALTH_CONNECT_CLIENT_TAG")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEALTH_CONNECT_CLIENT_TAG =>
      _get_HEALTH_CONNECT_CLIENT_TAG().object(const jni.JStringType());

  static final _isAvailable = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient_Companion__isAvailable")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isAvailable(android.content.Context context, java.util.List list)
  bool isAvailable(
    Context context,
    jni.JList<jni.JString> list,
  ) {
    return _isAvailable(reference.pointer, context.reference.pointer,
            list.reference.pointer)
        .boolean;
  }

  static final _getOrCreate = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient_Companion__getOrCreate")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  HealthConnectClient getOrCreate(
    Context context,
    jni.JList<jni.JString> list,
  ) {
    return _getOrCreate(reference.pointer, context.reference.pointer,
            list.reference.pointer)
        .object(const $HealthConnectClientType());
  }

  static final _isAvailable1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient_Companion__isAvailable1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isAvailable(android.content.Context context)
  bool isAvailable1(
    Context context,
  ) {
    return _isAvailable1(reference.pointer, context.reference.pointer).boolean;
  }

  static final _getOrCreate1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient_Companion__getOrCreate1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  HealthConnectClient getOrCreate1(
    Context context,
  ) {
    return _getOrCreate1(reference.pointer, context.reference.pointer)
        .object(const $HealthConnectClientType());
  }
}

final class $HealthConnectClient_CompanionType
    extends jni.JObjType<HealthConnectClient_Companion> {
  const $HealthConnectClient_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/HealthConnectClient$Companion;";

  @override
  HealthConnectClient_Companion fromReference(jni.JReference reference) =>
      HealthConnectClient_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($HealthConnectClient_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient_CompanionType) &&
        other is $HealthConnectClient_CompanionType;
  }
}

/// from: androidx.health.connect.client.HealthConnectClient
class HealthConnectClient extends jni.JObject {
  @override
  late final jni.JObjType<HealthConnectClient> $type = type;

  HealthConnectClient.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $HealthConnectClientType();
  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_HealthConnectClient__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.HealthConnectClient$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient_Companion get Companion =>
      _get_Companion().object(const $HealthConnectClient_CompanionType());

  static final _get_DEFAULT_PROVIDER_PACKAGE_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_HealthConnectClient__DEFAULT_PROVIDER_PACKAGE_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_PROVIDER_PACKAGE_NAME =>
      _get_DEFAULT_PROVIDER_PACKAGE_NAME().object(const jni.JStringType());

  static final _get_HEALTH_CONNECT_CLIENT_TAG =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_HealthConnectClient__HEALTH_CONNECT_CLIENT_TAG")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEALTH_CONNECT_CLIENT_TAG =>
      _get_HEALTH_CONNECT_CLIENT_TAG().object(const jni.JStringType());

  static final _getPermissionController = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__getPermissionController")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract androidx.health.connect.client.PermissionController getPermissionController()
  /// The returned object must be released after use, by calling the [release] method.
  PermissionController getPermissionController() {
    return _getPermissionController(reference.pointer)
        .object(const $PermissionControllerType());
  }

  static final _insertRecords = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__insertRecords")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object insertRecords(java.util.List list, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> insertRecords(
    jni.JList<jni.JObject> list,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _insertRecords(
            reference.pointer, list.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _updateRecords = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__updateRecords")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object updateRecords(java.util.List list, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> updateRecords(
    jni.JList<jni.JObject> list,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _updateRecords(
            reference.pointer, list.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _deleteRecords = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__deleteRecords")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, java.util.List list, java.util.List list1, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteRecords(
    jni.JObject kClass,
    jni.JList<jni.JString> list,
    jni.JList<jni.JString> list1,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteRecords(
            reference.pointer,
            kClass.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _deleteRecords1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__deleteRecords1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteRecords1(
    jni.JObject kClass,
    TimeRangeFilter timeRangeFilter,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteRecords1(reference.pointer, kClass.reference.pointer,
            timeRangeFilter.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _readRecord = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__readRecord")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object readRecord(kotlin.reflect.KClass kClass, java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> readRecord<$T extends jni.JObject>(
    jni.JObject kClass,
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _readRecord(reference.pointer, kClass.reference.pointer,
            string.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _readRecords = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__readRecords")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object readRecords(androidx.health.connect.client.request.ReadRecordsRequest readRecordsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> readRecords<$T extends jni.JObject>(
    ReadRecordsRequest<$T> readRecordsRequest, {
    jni.JObjType<$T>? T,
  }) async {
    T ??= jni.lowestCommonSuperType([
      (readRecordsRequest.$type as $ReadRecordsRequestType).T,
    ]) as jni.JObjType<$T>;
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _readRecords(reference.pointer, readRecordsRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _aggregate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__aggregate")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregate(androidx.health.connect.client.request.AggregateRequest aggregateRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<AggregationResult> aggregate(
    AggregateRequest aggregateRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _aggregate(reference.pointer, aggregateRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const $AggregationResultType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const $AggregationResultType().fromReference($o);
  }

  static final _aggregateGroupByDuration = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__aggregateGroupByDuration")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest aggregateGroupByDurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JList<jni.JObject>> aggregateGroupByDuration(
    AggregateGroupByDurationRequest aggregateGroupByDurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _aggregateGroupByDuration(
            reference.pointer,
            aggregateGroupByDurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JListType(jni.JObjectType()).jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JListType(jni.JObjectType()).fromReference($o);
  }

  static final _aggregateGroupByPeriod = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__aggregateGroupByPeriod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JList<jni.JObject>> aggregateGroupByPeriod(
    AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _aggregateGroupByPeriod(
            reference.pointer,
            aggregateGroupByPeriodRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JListType(jni.JObjectType()).jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JListType(jni.JObjectType()).fromReference($o);
  }

  static final _getChangesToken = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__getChangesToken")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest changesTokenRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JString> getChangesToken(
    ChangesTokenRequest changesTokenRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getChangesToken(reference.pointer, changesTokenRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JStringType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JStringType().fromReference($o);
  }

  static final _registerForDataNotifications = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__registerForDataNotifications")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object registerForDataNotifications(java.lang.String string, java.lang.Iterable iterable, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> registerForDataNotifications(
    jni.JString string,
    jni.JObject iterable,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _registerForDataNotifications(reference.pointer, string.reference.pointer,
            iterable.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _unregisterFromDataNotifications = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__unregisterFromDataNotifications")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object unregisterFromDataNotifications(java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> unregisterFromDataNotifications(
    jni.JString string,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _unregisterFromDataNotifications(
            reference.pointer, string.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _getChanges = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__getChanges")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getChanges(java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getChanges(
    jni.JString string,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getChanges(
            reference.pointer, string.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _isAvailable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__isAvailable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isAvailable(android.content.Context context, java.util.List list)
  static bool isAvailable(
    Context context,
    jni.JList<jni.JString> list,
  ) {
    return _isAvailable(context.reference.pointer, list.reference.pointer)
        .boolean;
  }

  static final _getOrCreate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("HealthConnectClient__getOrCreate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient getOrCreate(
    Context context,
    jni.JList<jni.JString> list,
  ) {
    return _getOrCreate(context.reference.pointer, list.reference.pointer)
        .object(const $HealthConnectClientType());
  }

  static final _isAvailable1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__isAvailable1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isAvailable(android.content.Context context)
  static bool isAvailable1(
    Context context,
  ) {
    return _isAvailable1(context.reference.pointer).boolean;
  }

  static final _getOrCreate1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "HealthConnectClient__getOrCreate1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient getOrCreate1(
    Context context,
  ) {
    return _getOrCreate1(context.reference.pointer)
        .object(const $HealthConnectClientType());
  }
}

final class $HealthConnectClientType extends jni.JObjType<HealthConnectClient> {
  const $HealthConnectClientType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/HealthConnectClient;";

  @override
  HealthConnectClient fromReference(jni.JReference reference) =>
      HealthConnectClient.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($HealthConnectClientType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClientType) &&
        other is $HealthConnectClientType;
  }
}

/// from: androidx.health.connect.client.PermissionController$Companion
class PermissionController_Companion extends jni.JObject {
  @override
  late final jni.JObjType<PermissionController_Companion> $type = type;

  PermissionController_Companion.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $PermissionController_CompanionType();
  static final _createRequestPermissionResultContract = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PermissionController_Companion__createRequestPermissionResultContract")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createRequestPermissionResultContract(
    jni.JString string,
  ) {
    return _createRequestPermissionResultContract(
            reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _createRequestPermissionResultContract1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PermissionController_Companion__createRequestPermissionResultContract1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createRequestPermissionResultContract1() {
    return _createRequestPermissionResultContract1(reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $PermissionController_CompanionType
    extends jni.JObjType<PermissionController_Companion> {
  const $PermissionController_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/PermissionController$Companion;";

  @override
  PermissionController_Companion fromReference(jni.JReference reference) =>
      PermissionController_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PermissionController_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionController_CompanionType) &&
        other is $PermissionController_CompanionType;
  }
}

/// from: androidx.health.connect.client.PermissionController
class PermissionController extends jni.JObject {
  @override
  late final jni.JObjType<PermissionController> $type = type;

  PermissionController.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $PermissionControllerType();
  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_PermissionController__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.PermissionController$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionController_Companion get Companion =>
      _get_Companion().object(const $PermissionController_CompanionType());

  static final _getGrantedPermissions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PermissionController__getGrantedPermissions")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getGrantedPermissions(java.util.Set set, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JSet<jni.JObject>> getGrantedPermissions(
    jni.JSet<jni.JObject> set0,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getGrantedPermissions(
            reference.pointer, set0.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JSetType(jni.JObjectType()).jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JSetType(jni.JObjectType()).fromReference($o);
  }

  static final _revokeAllPermissions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "PermissionController__revokeAllPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object revokeAllPermissions(kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> revokeAllPermissions() async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _revokeAllPermissions(reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _createRequestPermissionResultContract = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "PermissionController__createRequestPermissionResultContract")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createRequestPermissionResultContract(
    jni.JString string,
  ) {
    return _createRequestPermissionResultContract(string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _createRequestPermissionResultContract1 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "PermissionController__createRequestPermissionResultContract1")
          .asFunction<jni.JniResult Function()>();

  /// from: static public androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createRequestPermissionResultContract1() {
    return _createRequestPermissionResultContract1()
        .object(const jni.JObjectType());
  }
}

final class $PermissionControllerType
    extends jni.JObjType<PermissionController> {
  const $PermissionControllerType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/PermissionController;";

  @override
  PermissionController fromReference(jni.JReference reference) =>
      PermissionController.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PermissionControllerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionControllerType) &&
        other is $PermissionControllerType;
  }
}

/// from: androidx.health.connect.client.records.StepsRecord$Companion
class StepsRecord_Companion extends jni.JObject {
  @override
  late final jni.JObjType<StepsRecord_Companion> $type = type;

  StepsRecord_Companion.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $StepsRecord_CompanionType();
  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "StepsRecord_Companion__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return StepsRecord_Companion.fromReference(
        _new0(defaultConstructorMarker.reference.pointer).reference);
  }
}

final class $StepsRecord_CompanionType
    extends jni.JObjType<StepsRecord_Companion> {
  const $StepsRecord_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/records/StepsRecord$Companion;";

  @override
  StepsRecord_Companion fromReference(jni.JReference reference) =>
      StepsRecord_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StepsRecord_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StepsRecord_CompanionType) &&
        other is $StepsRecord_CompanionType;
  }
}

/// from: androidx.health.connect.client.records.StepsRecord
class StepsRecord extends jni.JObject {
  @override
  late final jni.JObjType<StepsRecord> $type = type;

  StepsRecord.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $StepsRecordType();
  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_StepsRecord__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.records.StepsRecord$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static StepsRecord_Companion get Companion =>
      _get_Companion().object(const $StepsRecord_CompanionType());

  static final _get_COUNT_TOTAL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_StepsRecord__COUNT_TOTAL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric COUNT_TOTAL
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric<jni.JLong> get COUNT_TOTAL =>
      _get_COUNT_TOTAL().object(const $AggregateMetricType(jni.JLongType()));

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__new0")
      .asFunction<
          jni.JniResult Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(long j, java.time.Instant instant, java.time.ZoneOffset zoneOffset, java.time.Instant instant1, java.time.ZoneOffset zoneOffset1, androidx.health.connect.client.records.metadata.Metadata metadata)
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord(
    int j,
    Instant instant,
    jni.JObject zoneOffset,
    Instant instant1,
    jni.JObject zoneOffset1,
    jni.JObject metadata,
  ) {
    return StepsRecord.fromReference(_new0(
            j,
            instant.reference.pointer,
            zoneOffset.reference.pointer,
            instant1.reference.pointer,
            zoneOffset1.reference.pointer,
            metadata.reference.pointer)
        .reference);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__new1")
      .asFunction<
          jni.JniResult Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(long j, java.time.Instant instant, java.time.ZoneOffset zoneOffset, java.time.Instant instant1, java.time.ZoneOffset zoneOffset1, androidx.health.connect.client.records.metadata.Metadata metadata, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord.new1(
    int j,
    Instant instant,
    jni.JObject zoneOffset,
    Instant instant1,
    jni.JObject zoneOffset1,
    jni.JObject metadata,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return StepsRecord.fromReference(_new1(
            j,
            instant.reference.pointer,
            zoneOffset.reference.pointer,
            instant1.reference.pointer,
            zoneOffset1.reference.pointer,
            metadata.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }

  static final _getCount = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "StepsRecord__getCount")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final long getCount()
  int getCount() {
    return _getCount(reference.pointer).long;
  }

  static final _getStartTime = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "StepsRecord__getStartTime")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant getStartTime()
  /// The returned object must be released after use, by calling the [release] method.
  Instant getStartTime() {
    return _getStartTime(reference.pointer).object(const $InstantType());
  }

  static final _getStartZoneOffset = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "StepsRecord__getStartZoneOffset")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.ZoneOffset getStartZoneOffset()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStartZoneOffset() {
    return _getStartZoneOffset(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getEndTime = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "StepsRecord__getEndTime")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant getEndTime()
  /// The returned object must be released after use, by calling the [release] method.
  Instant getEndTime() {
    return _getEndTime(reference.pointer).object(const $InstantType());
  }

  static final _getEndZoneOffset = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "StepsRecord__getEndZoneOffset")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.ZoneOffset getEndZoneOffset()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getEndZoneOffset() {
    return _getEndZoneOffset(reference.pointer).object(const jni.JObjectType());
  }

  static final _getMetadata = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "StepsRecord__getMetadata")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public androidx.health.connect.client.records.metadata.Metadata getMetadata()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMetadata() {
    return _getMetadata(reference.pointer).object(const jni.JObjectType());
  }

  static final _equals = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("StepsRecord__equals")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, object.reference.pointer).boolean;
  }

  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "StepsRecord__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer).integer;
  }
}

final class $StepsRecordType extends jni.JObjType<StepsRecord> {
  const $StepsRecordType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/records/StepsRecord;";

  @override
  StepsRecord fromReference(jni.JReference reference) =>
      StepsRecord.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StepsRecordType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StepsRecordType) && other is $StepsRecordType;
  }
}

/// from: androidx.health.connect.client.time.TimeRangeFilter$Companion
class TimeRangeFilter_Companion extends jni.JObject {
  @override
  late final jni.JObjType<TimeRangeFilter_Companion> $type = type;

  TimeRangeFilter_Companion.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $TimeRangeFilter_CompanionType();
  static final _between = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter_Companion__between")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant instant, java.time.Instant instant1)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter between(
    Instant instant,
    Instant instant1,
  ) {
    return _between(reference.pointer, instant.reference.pointer,
            instant1.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _between1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "TimeRangeFilter_Companion__between1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter between1(
    jni.JObject localDateTime,
    jni.JObject localDateTime1,
  ) {
    return _between1(reference.pointer, localDateTime.reference.pointer,
            localDateTime1.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _before = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter_Companion__before")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter before(
    Instant instant,
  ) {
    return _before(reference.pointer, instant.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _before1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter_Companion__before1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime localDateTime)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter before1(
    jni.JObject localDateTime,
  ) {
    return _before1(reference.pointer, localDateTime.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _after = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter_Companion__after")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter after(
    Instant instant,
  ) {
    return _after(reference.pointer, instant.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _after1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter_Companion__after1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime localDateTime)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter after1(
    jni.JObject localDateTime,
  ) {
    return _after1(reference.pointer, localDateTime.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "TimeRangeFilter_Companion__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return TimeRangeFilter_Companion.fromReference(
        _new0(defaultConstructorMarker.reference.pointer).reference);
  }
}

final class $TimeRangeFilter_CompanionType
    extends jni.JObjType<TimeRangeFilter_Companion> {
  const $TimeRangeFilter_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/time/TimeRangeFilter$Companion;";

  @override
  TimeRangeFilter_Companion fromReference(jni.JReference reference) =>
      TimeRangeFilter_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TimeRangeFilter_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeRangeFilter_CompanionType) &&
        other is $TimeRangeFilter_CompanionType;
  }
}

/// from: androidx.health.connect.client.time.TimeRangeFilter
class TimeRangeFilter extends jni.JObject {
  @override
  late final jni.JObjType<TimeRangeFilter> $type = type;

  TimeRangeFilter.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $TimeRangeFilterType();
  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_TimeRangeFilter__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter_Companion get Companion =>
      _get_Companion().object(const $TimeRangeFilter_CompanionType());

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__new0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.Instant instant, java.time.Instant instant1, java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter(
    Instant instant,
    Instant instant1,
    jni.JObject localDateTime,
    jni.JObject localDateTime1,
  ) {
    return TimeRangeFilter.fromReference(_new0(
            instant.reference.pointer,
            instant1.reference.pointer,
            localDateTime.reference.pointer,
            localDateTime1.reference.pointer)
        .reference);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__new1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.Instant instant, java.time.Instant instant1, java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter.new1(
    Instant instant,
    Instant instant1,
    jni.JObject localDateTime,
    jni.JObject localDateTime1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return TimeRangeFilter.fromReference(_new1(
            instant.reference.pointer,
            instant1.reference.pointer,
            localDateTime.reference.pointer,
            localDateTime1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }

  static final _equals = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__equals")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, object.reference.pointer).boolean;
  }

  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "TimeRangeFilter__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer).integer;
  }

  static final _new2 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "TimeRangeFilter__new2")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter.new2() {
    return TimeRangeFilter.fromReference(_new2().reference);
  }

  static final _between = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__between")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant instant, java.time.Instant instant1)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter between(
    Instant instant,
    Instant instant1,
  ) {
    return _between(instant.reference.pointer, instant1.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _between1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("TimeRangeFilter__between1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter between1(
    jni.JObject localDateTime,
    jni.JObject localDateTime1,
  ) {
    return _between1(
            localDateTime.reference.pointer, localDateTime1.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _before = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "TimeRangeFilter__before")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter before(
    Instant instant,
  ) {
    return _before(instant.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _before1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "TimeRangeFilter__before1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime localDateTime)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter before1(
    jni.JObject localDateTime,
  ) {
    return _before1(localDateTime.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _after = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "TimeRangeFilter__after")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter after(
    Instant instant,
  ) {
    return _after(instant.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _after1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "TimeRangeFilter__after1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime localDateTime)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter after1(
    jni.JObject localDateTime,
  ) {
    return _after1(localDateTime.reference.pointer)
        .object(const $TimeRangeFilterType());
  }
}

final class $TimeRangeFilterType extends jni.JObjType<TimeRangeFilter> {
  const $TimeRangeFilterType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/time/TimeRangeFilter;";

  @override
  TimeRangeFilter fromReference(jni.JReference reference) =>
      TimeRangeFilter.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TimeRangeFilterType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeRangeFilterType) &&
        other is $TimeRangeFilterType;
  }
}

/// from: android.content.Context
class Context extends jni.JObject {
  @override
  late final jni.JObjType<Context> $type = type;

  Context.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();
  static final _get_ACCESSIBILITY_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__ACCESSIBILITY_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACCESSIBILITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCESSIBILITY_SERVICE =>
      _get_ACCESSIBILITY_SERVICE().object(const jni.JStringType());

  static final _get_ACCOUNT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__ACCOUNT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACCOUNT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCOUNT_SERVICE =>
      _get_ACCOUNT_SERVICE().object(const jni.JStringType());

  static final _get_ACTIVITY_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__ACTIVITY_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTIVITY_SERVICE =>
      _get_ACTIVITY_SERVICE().object(const jni.JStringType());

  static final _get_ALARM_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__ALARM_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ALARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALARM_SERVICE =>
      _get_ALARM_SERVICE().object(const jni.JStringType());

  static final _get_APPWIDGET_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__APPWIDGET_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String APPWIDGET_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APPWIDGET_SERVICE =>
      _get_APPWIDGET_SERVICE().object(const jni.JStringType());

  static final _get_APP_OPS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__APP_OPS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String APP_OPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_OPS_SERVICE =>
      _get_APP_OPS_SERVICE().object(const jni.JStringType());

  static final _get_APP_SEARCH_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__APP_SEARCH_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String APP_SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_SEARCH_SERVICE =>
      _get_APP_SEARCH_SERVICE().object(const jni.JStringType());

  static final _get_AUDIO_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__AUDIO_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String AUDIO_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_SERVICE =>
      _get_AUDIO_SERVICE().object(const jni.JStringType());

  static final _get_BATTERY_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__BATTERY_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String BATTERY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BATTERY_SERVICE =>
      _get_BATTERY_SERVICE().object(const jni.JStringType());

  /// from: static public final int BIND_ABOVE_CLIENT
  static const BIND_ABOVE_CLIENT = 8;

  /// from: static public final int BIND_ADJUST_WITH_ACTIVITY
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: static public final int BIND_ALLOW_OOM_MANAGEMENT
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: static public final int BIND_AUTO_CREATE
  static const BIND_AUTO_CREATE = 1;

  /// from: static public final int BIND_DEBUG_UNBIND
  static const BIND_DEBUG_UNBIND = 2;

  /// from: static public final int BIND_EXTERNAL_SERVICE
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: static public final int BIND_IMPORTANT
  static const BIND_IMPORTANT = 64;

  /// from: static public final int BIND_INCLUDE_CAPABILITIES
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: static public final int BIND_NOT_FOREGROUND
  static const BIND_NOT_FOREGROUND = 4;

  /// from: static public final int BIND_NOT_PERCEPTIBLE
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: static public final int BIND_WAIVE_PRIORITY
  static const BIND_WAIVE_PRIORITY = 32;
  static final _get_BIOMETRIC_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__BIOMETRIC_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String BIOMETRIC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BIOMETRIC_SERVICE =>
      _get_BIOMETRIC_SERVICE().object(const jni.JStringType());

  static final _get_BLOB_STORE_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__BLOB_STORE_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String BLOB_STORE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLOB_STORE_SERVICE =>
      _get_BLOB_STORE_SERVICE().object(const jni.JStringType());

  static final _get_BLUETOOTH_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__BLUETOOTH_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String BLUETOOTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLUETOOTH_SERVICE =>
      _get_BLUETOOTH_SERVICE().object(const jni.JStringType());

  static final _get_BUGREPORT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__BUGREPORT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String BUGREPORT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUGREPORT_SERVICE =>
      _get_BUGREPORT_SERVICE().object(const jni.JStringType());

  static final _get_CAMERA_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__CAMERA_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CAMERA_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAMERA_SERVICE =>
      _get_CAMERA_SERVICE().object(const jni.JStringType());

  static final _get_CAPTIONING_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__CAPTIONING_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CAPTIONING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAPTIONING_SERVICE =>
      _get_CAPTIONING_SERVICE().object(const jni.JStringType());

  static final _get_CARRIER_CONFIG_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__CARRIER_CONFIG_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CARRIER_CONFIG_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CARRIER_CONFIG_SERVICE =>
      _get_CARRIER_CONFIG_SERVICE().object(const jni.JStringType());

  static final _get_CLIPBOARD_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__CLIPBOARD_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CLIPBOARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CLIPBOARD_SERVICE =>
      _get_CLIPBOARD_SERVICE().object(const jni.JStringType());

  static final _get_COMPANION_DEVICE_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__COMPANION_DEVICE_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String COMPANION_DEVICE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPANION_DEVICE_SERVICE =>
      _get_COMPANION_DEVICE_SERVICE().object(const jni.JStringType());

  static final _get_CONNECTIVITY_DIAGNOSTICS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__CONNECTIVITY_DIAGNOSTICS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _get_CONNECTIVITY_DIAGNOSTICS_SERVICE().object(const jni.JStringType());

  static final _get_CONNECTIVITY_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__CONNECTIVITY_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CONNECTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_SERVICE =>
      _get_CONNECTIVITY_SERVICE().object(const jni.JStringType());

  static final _get_CONSUMER_IR_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__CONSUMER_IR_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CONSUMER_IR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONSUMER_IR_SERVICE =>
      _get_CONSUMER_IR_SERVICE().object(const jni.JStringType());

  /// from: static public final int CONTEXT_IGNORE_SECURITY
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: static public final int CONTEXT_INCLUDE_CODE
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: static public final int CONTEXT_RESTRICTED
  static const CONTEXT_RESTRICTED = 4;
  static final _get_CROSS_PROFILE_APPS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__CROSS_PROFILE_APPS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CROSS_PROFILE_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CROSS_PROFILE_APPS_SERVICE =>
      _get_CROSS_PROFILE_APPS_SERVICE().object(const jni.JStringType());

  static final _get_DEVICE_POLICY_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__DEVICE_POLICY_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String DEVICE_POLICY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEVICE_POLICY_SERVICE =>
      _get_DEVICE_POLICY_SERVICE().object(const jni.JStringType());

  static final _get_DISPLAY_HASH_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__DISPLAY_HASH_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String DISPLAY_HASH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_HASH_SERVICE =>
      _get_DISPLAY_HASH_SERVICE().object(const jni.JStringType());

  static final _get_DISPLAY_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__DISPLAY_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String DISPLAY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_SERVICE =>
      _get_DISPLAY_SERVICE().object(const jni.JStringType());

  static final _get_DOMAIN_VERIFICATION_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__DOMAIN_VERIFICATION_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String DOMAIN_VERIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOMAIN_VERIFICATION_SERVICE =>
      _get_DOMAIN_VERIFICATION_SERVICE().object(const jni.JStringType());

  static final _get_DOWNLOAD_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__DOWNLOAD_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String DOWNLOAD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOWNLOAD_SERVICE =>
      _get_DOWNLOAD_SERVICE().object(const jni.JStringType());

  static final _get_DROPBOX_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__DROPBOX_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String DROPBOX_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DROPBOX_SERVICE =>
      _get_DROPBOX_SERVICE().object(const jni.JStringType());

  static final _get_EUICC_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__EUICC_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EUICC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EUICC_SERVICE =>
      _get_EUICC_SERVICE().object(const jni.JStringType());

  static final _get_FILE_INTEGRITY_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__FILE_INTEGRITY_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String FILE_INTEGRITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FILE_INTEGRITY_SERVICE =>
      _get_FILE_INTEGRITY_SERVICE().object(const jni.JStringType());

  static final _get_FINGERPRINT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__FINGERPRINT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String FINGERPRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FINGERPRINT_SERVICE =>
      _get_FINGERPRINT_SERVICE().object(const jni.JStringType());

  static final _get_GAME_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__GAME_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String GAME_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GAME_SERVICE =>
      _get_GAME_SERVICE().object(const jni.JStringType());

  static final _get_HARDWARE_PROPERTIES_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__HARDWARE_PROPERTIES_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String HARDWARE_PROPERTIES_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HARDWARE_PROPERTIES_SERVICE =>
      _get_HARDWARE_PROPERTIES_SERVICE().object(const jni.JStringType());

  static final _get_INPUT_METHOD_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__INPUT_METHOD_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String INPUT_METHOD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_METHOD_SERVICE =>
      _get_INPUT_METHOD_SERVICE().object(const jni.JStringType());

  static final _get_INPUT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__INPUT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_SERVICE =>
      _get_INPUT_SERVICE().object(const jni.JStringType());

  static final _get_IPSEC_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__IPSEC_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String IPSEC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IPSEC_SERVICE =>
      _get_IPSEC_SERVICE().object(const jni.JStringType());

  static final _get_JOB_SCHEDULER_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__JOB_SCHEDULER_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String JOB_SCHEDULER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get JOB_SCHEDULER_SERVICE =>
      _get_JOB_SCHEDULER_SERVICE().object(const jni.JStringType());

  static final _get_KEYGUARD_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__KEYGUARD_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String KEYGUARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KEYGUARD_SERVICE =>
      _get_KEYGUARD_SERVICE().object(const jni.JStringType());

  static final _get_LAUNCHER_APPS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__LAUNCHER_APPS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String LAUNCHER_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAUNCHER_APPS_SERVICE =>
      _get_LAUNCHER_APPS_SERVICE().object(const jni.JStringType());

  static final _get_LAYOUT_INFLATER_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__LAYOUT_INFLATER_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String LAYOUT_INFLATER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAYOUT_INFLATER_SERVICE =>
      _get_LAYOUT_INFLATER_SERVICE().object(const jni.JStringType());

  static final _get_LOCALE_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__LOCALE_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String LOCALE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCALE_SERVICE =>
      _get_LOCALE_SERVICE().object(const jni.JStringType());

  static final _get_LOCATION_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__LOCATION_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String LOCATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCATION_SERVICE =>
      _get_LOCATION_SERVICE().object(const jni.JStringType());

  static final _get_MEDIA_COMMUNICATION_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__MEDIA_COMMUNICATION_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String MEDIA_COMMUNICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_COMMUNICATION_SERVICE =>
      _get_MEDIA_COMMUNICATION_SERVICE().object(const jni.JStringType());

  static final _get_MEDIA_METRICS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__MEDIA_METRICS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String MEDIA_METRICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_METRICS_SERVICE =>
      _get_MEDIA_METRICS_SERVICE().object(const jni.JStringType());

  static final _get_MEDIA_PROJECTION_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__MEDIA_PROJECTION_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String MEDIA_PROJECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_PROJECTION_SERVICE =>
      _get_MEDIA_PROJECTION_SERVICE().object(const jni.JStringType());

  static final _get_MEDIA_ROUTER_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__MEDIA_ROUTER_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String MEDIA_ROUTER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_ROUTER_SERVICE =>
      _get_MEDIA_ROUTER_SERVICE().object(const jni.JStringType());

  static final _get_MEDIA_SESSION_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__MEDIA_SESSION_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String MEDIA_SESSION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_SESSION_SERVICE =>
      _get_MEDIA_SESSION_SERVICE().object(const jni.JStringType());

  static final _get_MIDI_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__MIDI_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String MIDI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIDI_SERVICE =>
      _get_MIDI_SERVICE().object(const jni.JStringType());

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 32768;

  /// from: static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: static public final int MODE_MULTI_PROCESS
  static const MODE_MULTI_PROCESS = 4;

  /// from: static public final int MODE_NO_LOCALIZED_COLLATORS
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: static public final int MODE_PRIVATE
  static const MODE_PRIVATE = 0;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;
  static final _get_NETWORK_STATS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__NETWORK_STATS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String NETWORK_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NETWORK_STATS_SERVICE =>
      _get_NETWORK_STATS_SERVICE().object(const jni.JStringType());

  static final _get_NFC_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__NFC_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String NFC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NFC_SERVICE =>
      _get_NFC_SERVICE().object(const jni.JStringType());

  static final _get_NOTIFICATION_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__NOTIFICATION_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String NOTIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NOTIFICATION_SERVICE =>
      _get_NOTIFICATION_SERVICE().object(const jni.JStringType());

  static final _get_NSD_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__NSD_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String NSD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NSD_SERVICE =>
      _get_NSD_SERVICE().object(const jni.JStringType());

  static final _get_PEOPLE_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__PEOPLE_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String PEOPLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PEOPLE_SERVICE =>
      _get_PEOPLE_SERVICE().object(const jni.JStringType());

  static final _get_PERFORMANCE_HINT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__PERFORMANCE_HINT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String PERFORMANCE_HINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PERFORMANCE_HINT_SERVICE =>
      _get_PERFORMANCE_HINT_SERVICE().object(const jni.JStringType());

  static final _get_POWER_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__POWER_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String POWER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get POWER_SERVICE =>
      _get_POWER_SERVICE().object(const jni.JStringType());

  static final _get_PRINT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__PRINT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String PRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PRINT_SERVICE =>
      _get_PRINT_SERVICE().object(const jni.JStringType());

  /// from: static public final int RECEIVER_EXPORTED
  static const RECEIVER_EXPORTED = 2;

  /// from: static public final int RECEIVER_NOT_EXPORTED
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _get_RESTRICTIONS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__RESTRICTIONS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String RESTRICTIONS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RESTRICTIONS_SERVICE =>
      _get_RESTRICTIONS_SERVICE().object(const jni.JStringType());

  static final _get_ROLE_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__ROLE_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ROLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ROLE_SERVICE =>
      _get_ROLE_SERVICE().object(const jni.JStringType());

  static final _get_SEARCH_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__SEARCH_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SEARCH_SERVICE =>
      _get_SEARCH_SERVICE().object(const jni.JStringType());

  static final _get_SENSOR_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__SENSOR_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String SENSOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SENSOR_SERVICE =>
      _get_SENSOR_SERVICE().object(const jni.JStringType());

  static final _get_SHORTCUT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__SHORTCUT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String SHORTCUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SHORTCUT_SERVICE =>
      _get_SHORTCUT_SERVICE().object(const jni.JStringType());

  static final _get_STATUS_BAR_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__STATUS_BAR_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String STATUS_BAR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STATUS_BAR_SERVICE =>
      _get_STATUS_BAR_SERVICE().object(const jni.JStringType());

  static final _get_STORAGE_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__STORAGE_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String STORAGE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_SERVICE =>
      _get_STORAGE_SERVICE().object(const jni.JStringType());

  static final _get_STORAGE_STATS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__STORAGE_STATS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String STORAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_STATS_SERVICE =>
      _get_STORAGE_STATS_SERVICE().object(const jni.JStringType());

  static final _get_SYSTEM_HEALTH_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__SYSTEM_HEALTH_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String SYSTEM_HEALTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYSTEM_HEALTH_SERVICE =>
      _get_SYSTEM_HEALTH_SERVICE().object(const jni.JStringType());

  static final _get_TELECOM_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__TELECOM_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String TELECOM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELECOM_SERVICE =>
      _get_TELECOM_SERVICE().object(const jni.JStringType());

  static final _get_TELEPHONY_IMS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__TELEPHONY_IMS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String TELEPHONY_IMS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_IMS_SERVICE =>
      _get_TELEPHONY_IMS_SERVICE().object(const jni.JStringType());

  static final _get_TELEPHONY_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__TELEPHONY_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String TELEPHONY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SERVICE =>
      _get_TELEPHONY_SERVICE().object(const jni.JStringType());

  static final _get_TELEPHONY_SUBSCRIPTION_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__TELEPHONY_SUBSCRIPTION_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _get_TELEPHONY_SUBSCRIPTION_SERVICE().object(const jni.JStringType());

  static final _get_TEXT_CLASSIFICATION_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__TEXT_CLASSIFICATION_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String TEXT_CLASSIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_CLASSIFICATION_SERVICE =>
      _get_TEXT_CLASSIFICATION_SERVICE().object(const jni.JStringType());

  static final _get_TEXT_SERVICES_MANAGER_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__TEXT_SERVICES_MANAGER_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_SERVICES_MANAGER_SERVICE =>
      _get_TEXT_SERVICES_MANAGER_SERVICE().object(const jni.JStringType());

  static final _get_TV_INPUT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__TV_INPUT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String TV_INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INPUT_SERVICE =>
      _get_TV_INPUT_SERVICE().object(const jni.JStringType());

  static final _get_TV_INTERACTIVE_APP_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__TV_INTERACTIVE_APP_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String TV_INTERACTIVE_APP_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INTERACTIVE_APP_SERVICE =>
      _get_TV_INTERACTIVE_APP_SERVICE().object(const jni.JStringType());

  static final _get_UI_MODE_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__UI_MODE_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String UI_MODE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get UI_MODE_SERVICE =>
      _get_UI_MODE_SERVICE().object(const jni.JStringType());

  static final _get_USAGE_STATS_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__USAGE_STATS_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String USAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USAGE_STATS_SERVICE =>
      _get_USAGE_STATS_SERVICE().object(const jni.JStringType());

  static final _get_USB_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__USB_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String USB_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USB_SERVICE =>
      _get_USB_SERVICE().object(const jni.JStringType());

  static final _get_USER_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__USER_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String USER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USER_SERVICE =>
      _get_USER_SERVICE().object(const jni.JStringType());

  static final _get_VIBRATOR_MANAGER_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__VIBRATOR_MANAGER_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String VIBRATOR_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_MANAGER_SERVICE =>
      _get_VIBRATOR_MANAGER_SERVICE().object(const jni.JStringType());

  static final _get_VIBRATOR_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__VIBRATOR_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String VIBRATOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_SERVICE =>
      _get_VIBRATOR_SERVICE().object(const jni.JStringType());

  static final _get_VPN_MANAGEMENT_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__VPN_MANAGEMENT_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String VPN_MANAGEMENT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VPN_MANAGEMENT_SERVICE =>
      _get_VPN_MANAGEMENT_SERVICE().object(const jni.JStringType());

  static final _get_WALLPAPER_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__WALLPAPER_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String WALLPAPER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WALLPAPER_SERVICE =>
      _get_WALLPAPER_SERVICE().object(const jni.JStringType());

  static final _get_WIFI_AWARE_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__WIFI_AWARE_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String WIFI_AWARE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_AWARE_SERVICE =>
      _get_WIFI_AWARE_SERVICE().object(const jni.JStringType());

  static final _get_WIFI_P2P_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__WIFI_P2P_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String WIFI_P2P_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_P2P_SERVICE =>
      _get_WIFI_P2P_SERVICE().object(const jni.JStringType());

  static final _get_WIFI_RTT_RANGING_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__WIFI_RTT_RANGING_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String WIFI_RTT_RANGING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_RTT_RANGING_SERVICE =>
      _get_WIFI_RTT_RANGING_SERVICE().object(const jni.JStringType());

  static final _get_WIFI_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__WIFI_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String WIFI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_SERVICE =>
      _get_WIFI_SERVICE().object(const jni.JStringType());

  static final _get_WINDOW_SERVICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Context__WINDOW_SERVICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String WINDOW_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WINDOW_SERVICE =>
      _get_WINDOW_SERVICE().object(const jni.JStringType());

  static final _new0 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Context__new0")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context() {
    return Context.fromReference(_new0().reference);
  }

  static final _getAssets = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getAssets")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.AssetManager getAssets()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAssets() {
    return _getAssets(reference.pointer).object(const jni.JObjectType());
  }

  static final _getResources = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getResources")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.Resources getResources()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResources() {
    return _getResources(reference.pointer).object(const jni.JObjectType());
  }

  static final _getPackageManager = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getPackageManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.pm.PackageManager getPackageManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageManager() {
    return _getPackageManager(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getContentResolver = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getContentResolver")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ContentResolver getContentResolver()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentResolver() {
    return _getContentResolver(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getMainLooper = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getMainLooper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.os.Looper getMainLooper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainLooper() {
    return _getMainLooper(reference.pointer).object(const jni.JObjectType());
  }

  static final _getMainExecutor = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getMainExecutor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainExecutor() {
    return _getMainExecutor(reference.pointer).object(const jni.JObjectType());
  }

  static final _getApplicationContext = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getApplicationContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context getApplicationContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context getApplicationContext() {
    return _getApplicationContext(reference.pointer)
        .object(const $ContextType());
  }

  static final _registerComponentCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__registerComponentCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _registerComponentCallbacks(
            reference.pointer, componentCallbacks.reference.pointer)
        .check();
  }

  static final _unregisterComponentCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__unregisterComponentCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _unregisterComponentCallbacks(
            reference.pointer, componentCallbacks.reference.pointer)
        .check();
  }

  static final _getText = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getText")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final java.lang.CharSequence getText(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    int i,
  ) {
    return _getText(reference.pointer, i).object(const jni.JObjectType());
  }

  static final _getString = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return _getString(reference.pointer, i).object(const jni.JStringType());
  }

  static final _getString1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__getString1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getString(int i, java.lang.Object[] objects)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString1(
    int i,
    jni.JArray<jni.JObject> objects,
  ) {
    return _getString1(reference.pointer, i, objects.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _getColor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getColor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final int getColor(int i)
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, i).integer;
  }

  static final _getDrawable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getDrawable")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final android.graphics.drawable.Drawable getDrawable(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    int i,
  ) {
    return _getDrawable(reference.pointer, i).object(const jni.JObjectType());
  }

  static final _getColorStateList = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__getColorStateList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final android.content.res.ColorStateList getColorStateList(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorStateList(
    int i,
  ) {
    return _getColorStateList(reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _setTheme = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__setTheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void setTheme(int i)
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, i).check();
  }

  static final _getTheme = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getTheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.res.Resources$Theme getTheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTheme() {
    return _getTheme(reference.pointer).object(const jni.JObjectType());
  }

  static final _obtainStyledAttributes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__obtainStyledAttributes")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes(
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes(reference.pointer, is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _obtainStyledAttributes1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__obtainStyledAttributes1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes1(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes1(reference.pointer, i, is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _obtainStyledAttributes2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__obtainStyledAttributes2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes2(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes2(reference.pointer,
            attributeSet.reference.pointer, is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _obtainStyledAttributes3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("Context__obtainStyledAttributes3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes3(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
  ) {
    return _obtainStyledAttributes3(reference.pointer,
            attributeSet.reference.pointer, is0.reference.pointer, i, i1)
        .object(const jni.JObjectType());
  }

  static final _getClassLoader = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getClassLoader")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.ClassLoader getClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClassLoader() {
    return _getClassLoader(reference.pointer).object(const jni.JObjectType());
  }

  static final _getPackageName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getPackageName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return _getPackageName(reference.pointer).object(const jni.JStringType());
  }

  static final _getOpPackageName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getOpPackageName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getOpPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOpPackageName() {
    return _getOpPackageName(reference.pointer).object(const jni.JStringType());
  }

  static final _getAttributionTag = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getAttributionTag")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAttributionTag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAttributionTag() {
    return _getAttributionTag(reference.pointer)
        .object(const jni.JStringType());
  }

  static final _getAttributionSource = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getAttributionSource")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.AttributionSource getAttributionSource()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAttributionSource() {
    return _getAttributionSource(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getParams = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getParams")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ContextParams getParams()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParams() {
    return _getParams(reference.pointer).object(const jni.JObjectType());
  }

  static final _getApplicationInfo = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getApplicationInfo")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationInfo() {
    return _getApplicationInfo(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getPackageResourcePath = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getPackageResourcePath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getPackageResourcePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageResourcePath() {
    return _getPackageResourcePath(reference.pointer)
        .object(const jni.JStringType());
  }

  static final _getPackageCodePath = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getPackageCodePath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getPackageCodePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageCodePath() {
    return _getPackageCodePath(reference.pointer)
        .object(const jni.JStringType());
  }

  static final _getSharedPreferences = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__getSharedPreferences")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSharedPreferences(
    jni.JString string,
    int i,
  ) {
    return _getSharedPreferences(reference.pointer, string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _moveSharedPreferencesFrom = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__moveSharedPreferencesFrom")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)
  bool moveSharedPreferencesFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveSharedPreferencesFrom(reference.pointer,
            context.reference.pointer, string.reference.pointer)
        .boolean;
  }

  static final _deleteSharedPreferences = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__deleteSharedPreferences")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteSharedPreferences(java.lang.String string)
  bool deleteSharedPreferences(
    jni.JString string,
  ) {
    return _deleteSharedPreferences(reference.pointer, string.reference.pointer)
        .boolean;
  }

  static final _openFileInput = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__openFileInput")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.FileInputStream openFileInput(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileInput(
    jni.JString string,
  ) {
    return _openFileInput(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _openFileOutput = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__openFileOutput")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileOutput(
    jni.JString string,
    int i,
  ) {
    return _openFileOutput(reference.pointer, string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _deleteFile = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__deleteFile")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteFile(java.lang.String string)
  bool deleteFile(
    jni.JString string,
  ) {
    return _deleteFile(reference.pointer, string.reference.pointer).boolean;
  }

  static final _getFileStreamPath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getFileStreamPath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getFileStreamPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFileStreamPath(
    jni.JString string,
  ) {
    return _getFileStreamPath(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getDataDir = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getDataDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getDataDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataDir() {
    return _getDataDir(reference.pointer).object(const jni.JObjectType());
  }

  static final _getFilesDir = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getFilesDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilesDir() {
    return _getFilesDir(reference.pointer).object(const jni.JObjectType());
  }

  static final _getNoBackupFilesDir = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getNoBackupFilesDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getNoBackupFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getNoBackupFilesDir() {
    return _getNoBackupFilesDir(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getExternalFilesDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getExternalFilesDir")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getExternalFilesDir(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalFilesDir(
    jni.JString string,
  ) {
    return _getExternalFilesDir(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getExternalFilesDirs = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getExternalFilesDirs")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalFilesDirs(
    jni.JString string,
  ) {
    return _getExternalFilesDirs(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _getObbDir = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getObbDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getObbDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObbDir() {
    return _getObbDir(reference.pointer).object(const jni.JObjectType());
  }

  static final _getObbDirs = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getObbDirs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getObbDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getObbDirs() {
    return _getObbDirs(reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _getCacheDir = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getCacheDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCacheDir() {
    return _getCacheDir(reference.pointer).object(const jni.JObjectType());
  }

  static final _getCodeCacheDir = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getCodeCacheDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getCodeCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCodeCacheDir() {
    return _getCodeCacheDir(reference.pointer).object(const jni.JObjectType());
  }

  static final _getExternalCacheDir = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getExternalCacheDir")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getExternalCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalCacheDir() {
    return _getExternalCacheDir(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getExternalCacheDirs = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getExternalCacheDirs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalCacheDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalCacheDirs() {
    return _getExternalCacheDirs(reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _getExternalMediaDirs = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getExternalMediaDirs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalMediaDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalMediaDirs() {
    return _getExternalMediaDirs(reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _fileList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__fileList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String[] fileList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> fileList() {
    return _fileList(reference.pointer)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _getDir = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Context__getDir")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.File getDir(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDir(
    jni.JString string,
    int i,
  ) {
    return _getDir(reference.pointer, string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _openOrCreateDatabase = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__openOrCreateDatabase")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
  ) {
    return _openOrCreateDatabase(reference.pointer, string.reference.pointer, i,
            cursorFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _openOrCreateDatabase1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__openOrCreateDatabase1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase1(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
    jni.JObject databaseErrorHandler,
  ) {
    return _openOrCreateDatabase1(
            reference.pointer,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer,
            databaseErrorHandler.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _moveDatabaseFrom = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__moveDatabaseFrom")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)
  bool moveDatabaseFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveDatabaseFrom(reference.pointer, context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _deleteDatabase = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__deleteDatabase")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteDatabase(java.lang.String string)
  bool deleteDatabase(
    jni.JString string,
  ) {
    return _deleteDatabase(reference.pointer, string.reference.pointer).boolean;
  }

  static final _getDatabasePath = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getDatabasePath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getDatabasePath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDatabasePath(
    jni.JString string,
  ) {
    return _getDatabasePath(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _databaseList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__databaseList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String[] databaseList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> databaseList() {
    return _databaseList(reference.pointer)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _getWallpaper = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getWallpaper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWallpaper() {
    return _getWallpaper(reference.pointer).object(const jni.JObjectType());
  }

  static final _peekWallpaper = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__peekWallpaper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject peekWallpaper() {
    return _peekWallpaper(reference.pointer).object(const jni.JObjectType());
  }

  static final _getWallpaperDesiredMinimumWidth = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getWallpaperDesiredMinimumWidth")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(reference.pointer).integer;
  }

  static final _getWallpaperDesiredMinimumHeight = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getWallpaperDesiredMinimumHeight")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(reference.pointer).integer;
  }

  static final _setWallpaper = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__setWallpaper")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(
    jni.JObject bitmap,
  ) {
    _setWallpaper(reference.pointer, bitmap.reference.pointer).check();
  }

  static final _setWallpaper1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__setWallpaper1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(java.io.InputStream inputStream)
  void setWallpaper1(
    jni.JObject inputStream,
  ) {
    _setWallpaper1(reference.pointer, inputStream.reference.pointer).check();
  }

  static final _clearWallpaper = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__clearWallpaper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void clearWallpaper()
  void clearWallpaper() {
    _clearWallpaper(reference.pointer).check();
  }

  static final _startActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startActivity")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent)
  void startActivity(
    Intent intent,
  ) {
    _startActivity(reference.pointer, intent.reference.pointer).check();
  }

  static final _startActivity1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startActivity1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    Intent intent,
    jni.JObject bundle,
  ) {
    _startActivity1(reference.pointer, intent.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _startActivities = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startActivities")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<Intent> intents,
  ) {
    _startActivities(reference.pointer, intents.reference.pointer).check();
  }

  static final _startActivities1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startActivities1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<Intent> intents,
    jni.JObject bundle,
  ) {
    _startActivities1(reference.pointer, intents.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _startIntentSender = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Context__startIntentSender")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
  ) {
    _startIntentSender(reference.pointer, intentSender.reference.pointer,
            intent.reference.pointer, i, i1, i2)
        .check();
  }

  static final _startIntentSender1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__startIntentSender1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    _startIntentSender1(reference.pointer, intentSender.reference.pointer,
            intent.reference.pointer, i, i1, i2, bundle.reference.pointer)
        .check();
  }

  static final _sendBroadcast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendBroadcast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(
    Intent intent,
  ) {
    _sendBroadcast(reference.pointer, intent.reference.pointer).check();
  }

  static final _sendBroadcast1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendBroadcast1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)
  void sendBroadcast1(
    Intent intent,
    jni.JString string,
  ) {
    _sendBroadcast1(reference.pointer, intent.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _sendBroadcastWithMultiplePermissions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__sendBroadcastWithMultiplePermissions")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)
  void sendBroadcastWithMultiplePermissions(
    Intent intent,
    jni.JArray<jni.JString> strings,
  ) {
    _sendBroadcastWithMultiplePermissions(reference.pointer,
            intent.reference.pointer, strings.reference.pointer)
        .check();
  }

  static final _sendOrderedBroadcast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendOrderedBroadcast")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)
  void sendOrderedBroadcast(
    Intent intent,
    jni.JString string,
  ) {
    _sendOrderedBroadcast(reference.pointer, intent.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _sendOrderedBroadcast1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendOrderedBroadcast1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcast1(
    Intent intent,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast1(
            reference.pointer,
            intent.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _sendBroadcastAsUser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _sendBroadcastAsUser(reference.pointer, intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _sendBroadcastAsUser1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendBroadcastAsUser1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)
  void sendBroadcastAsUser1(
    Intent intent,
    jni.JObject userHandle,
    jni.JString string,
  ) {
    _sendBroadcastAsUser1(reference.pointer, intent.reference.pointer,
            userHandle.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _sendOrderedBroadcastAsUser = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__sendOrderedBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcastAsUser(
            reference.pointer,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _sendOrderedBroadcast2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendOrderedBroadcast2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)
  void sendOrderedBroadcast2(
    Intent intent,
    jni.JString string,
    jni.JString string1,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string2,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast2(
            reference.pointer,
            intent.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string2.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _sendStickyBroadcast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendStickyBroadcast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(
    Intent intent,
  ) {
    _sendStickyBroadcast(reference.pointer, intent.reference.pointer).check();
  }

  static final _sendStickyBroadcast1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendStickyBroadcast1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)
  void sendStickyBroadcast1(
    Intent intent,
    jni.JObject bundle,
  ) {
    _sendStickyBroadcast1(reference.pointer, intent.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _sendStickyOrderedBroadcast = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__sendStickyOrderedBroadcast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcast(
    Intent intent,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcast(
            reference.pointer,
            intent.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _removeStickyBroadcast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__removeStickyBroadcast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(
    Intent intent,
  ) {
    _removeStickyBroadcast(reference.pointer, intent.reference.pointer).check();
  }

  static final _sendStickyBroadcastAsUser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__sendStickyBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendStickyBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _sendStickyBroadcastAsUser(reference.pointer, intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _sendStickyOrderedBroadcastAsUser = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__sendStickyOrderedBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcastAsUser(
            reference.pointer,
            intent.reference.pointer,
            userHandle.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _removeStickyBroadcastAsUser = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__removeStickyBroadcastAsUser")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void removeStickyBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _removeStickyBroadcastAsUser(reference.pointer, intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _registerReceiver = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__registerReceiver")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
  ) {
    return _registerReceiver(reference.pointer,
            broadcastReceiver.reference.pointer, intentFilter.reference.pointer)
        .object(const $IntentType());
  }

  static final _registerReceiver1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__registerReceiver1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver1(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    int i,
  ) {
    return _registerReceiver1(
            reference.pointer,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            i)
        .object(const $IntentType());
  }

  static final _registerReceiver2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__registerReceiver2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver2(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
  ) {
    return _registerReceiver2(
            reference.pointer,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer)
        .object(const $IntentType());
  }

  static final _registerReceiver3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__registerReceiver3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver3(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
    int i,
  ) {
    return _registerReceiver3(
            reference.pointer,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer,
            i)
        .object(const $IntentType());
  }

  static final _unregisterReceiver = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__unregisterReceiver")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)
  void unregisterReceiver(
    jni.JObject broadcastReceiver,
  ) {
    _unregisterReceiver(reference.pointer, broadcastReceiver.reference.pointer)
        .check();
  }

  static final _startService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startService(
    Intent intent,
  ) {
    return _startService(reference.pointer, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _startForegroundService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startForegroundService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startForegroundService(
    Intent intent,
  ) {
    return _startForegroundService(reference.pointer, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _stopService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__stopService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean stopService(android.content.Intent intent)
  bool stopService(
    Intent intent,
  ) {
    return _stopService(reference.pointer, intent.reference.pointer).boolean;
  }

  static final _bindService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__bindService")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)
  bool bindService(
    Intent intent,
    jni.JObject serviceConnection,
    int i,
  ) {
    return _bindService(reference.pointer, intent.reference.pointer,
            serviceConnection.reference.pointer, i)
        .boolean;
  }

  static final _bindService1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__bindService1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService1(
    Intent intent,
    int i,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindService1(reference.pointer, intent.reference.pointer, i,
            executor.reference.pointer, serviceConnection.reference.pointer)
        .boolean;
  }

  static final _bindIsolatedService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__bindIsolatedService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService(
    Intent intent,
    int i,
    jni.JString string,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindIsolatedService(
            reference.pointer,
            intent.reference.pointer,
            i,
            string.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _bindServiceAsUser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__bindServiceAsUser")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)
  bool bindServiceAsUser(
    Intent intent,
    jni.JObject serviceConnection,
    int i,
    jni.JObject userHandle,
  ) {
    return _bindServiceAsUser(
            reference.pointer,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            i,
            userHandle.reference.pointer)
        .boolean;
  }

  static final _updateServiceGroup = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("Context__updateServiceGroup")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)
  void updateServiceGroup(
    jni.JObject serviceConnection,
    int i,
    int i1,
  ) {
    _updateServiceGroup(
            reference.pointer, serviceConnection.reference.pointer, i, i1)
        .check();
  }

  static final _unbindService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__unbindService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unbindService(android.content.ServiceConnection serviceConnection)
  void unbindService(
    jni.JObject serviceConnection,
  ) {
    _unbindService(reference.pointer, serviceConnection.reference.pointer)
        .check();
  }

  static final _startInstrumentation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__startInstrumentation")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)
  bool startInstrumentation(
    jni.JObject componentName,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _startInstrumentation(
            reference.pointer,
            componentName.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .boolean;
  }

  static final _getSystemService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getSystemService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return _getSystemService(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getSystemService1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getSystemService1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final T getSystemService(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSystemService1<$T extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getSystemService1(reference.pointer, class0.reference.pointer)
        .object(T);
  }

  static final _getSystemServiceName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__getSystemServiceName")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getSystemServiceName(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSystemServiceName(
    jni.JObject class0,
  ) {
    return _getSystemServiceName(reference.pointer, class0.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _checkPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("Context__checkPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract int checkPermission(java.lang.String string, int i, int i1)
  int checkPermission(
    jni.JString string,
    int i,
    int i1,
  ) {
    return _checkPermission(reference.pointer, string.reference.pointer, i, i1)
        .integer;
  }

  static final _checkCallingPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__checkCallingPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingPermission(java.lang.String string)
  int checkCallingPermission(
    jni.JString string,
  ) {
    return _checkCallingPermission(reference.pointer, string.reference.pointer)
        .integer;
  }

  static final _checkCallingOrSelfPermission = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__checkCallingOrSelfPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingOrSelfPermission(java.lang.String string)
  int checkCallingOrSelfPermission(
    jni.JString string,
  ) {
    return _checkCallingOrSelfPermission(
            reference.pointer, string.reference.pointer)
        .integer;
  }

  static final _checkSelfPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__checkSelfPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkSelfPermission(java.lang.String string)
  int checkSelfPermission(
    jni.JString string,
  ) {
    return _checkSelfPermission(reference.pointer, string.reference.pointer)
        .integer;
  }

  static final _enforcePermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__enforcePermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)
  void enforcePermission(
    jni.JString string,
    int i,
    int i1,
    jni.JString string1,
  ) {
    _enforcePermission(reference.pointer, string.reference.pointer, i, i1,
            string1.reference.pointer)
        .check();
  }

  static final _enforceCallingPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__enforceCallingPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingPermission(reference.pointer, string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _enforceCallingOrSelfPermission = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__enforceCallingOrSelfPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingOrSelfPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingOrSelfPermission(reference.pointer, string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _grantUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__grantUriPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void grantUriPermission(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    _grantUriPermission(reference.pointer, string.reference.pointer,
            uri.reference.pointer, i)
        .check();
  }

  static final _revokeUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__revokeUriPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(android.net.Uri uri, int i)
  void revokeUriPermission(
    jni.JObject uri,
    int i,
  ) {
    _revokeUriPermission(reference.pointer, uri.reference.pointer, i).check();
  }

  static final _revokeUriPermission1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__revokeUriPermission1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void revokeUriPermission1(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    _revokeUriPermission1(reference.pointer, string.reference.pointer,
            uri.reference.pointer, i)
        .check();
  }

  static final _checkUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Context__checkUriPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)
  int checkUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission(
            reference.pointer, uri.reference.pointer, i, i1, i2)
        .integer;
  }

  static final _checkUriPermissions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Context__checkUriPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermissions(
            reference.pointer, list.reference.pointer, i, i1, i2)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _checkCallingUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__checkCallingUriPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingUriPermission(android.net.Uri uri, int i)
  int checkCallingUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return _checkCallingUriPermission(
            reference.pointer, uri.reference.pointer, i)
        .integer;
  }

  static final _checkCallingUriPermissions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__checkCallingUriPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return _checkCallingUriPermissions(
            reference.pointer, list.reference.pointer, i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _checkCallingOrSelfUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__checkCallingOrSelfUriPermission")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)
  int checkCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return _checkCallingOrSelfUriPermission(
            reference.pointer, uri.reference.pointer, i)
        .integer;
  }

  static final _checkCallingOrSelfUriPermissions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__checkCallingOrSelfUriPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingOrSelfUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return _checkCallingOrSelfUriPermissions(
            reference.pointer, list.reference.pointer, i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _checkUriPermission1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Context__checkUriPermission1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)
  int checkUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission1(reference.pointer, uri.reference.pointer,
            string.reference.pointer, string1.reference.pointer, i, i1, i2)
        .integer;
  }

  static final _enforceUriPermission = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__enforceUriPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)
  void enforceUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
    jni.JString string,
  ) {
    _enforceUriPermission(reference.pointer, uri.reference.pointer, i, i1, i2,
            string.reference.pointer)
        .check();
  }

  static final _enforceCallingUriPermission = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__enforceCallingUriPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingUriPermission(reference.pointer, uri.reference.pointer, i,
            string.reference.pointer)
        .check();
  }

  static final _enforceCallingOrSelfUriPermission = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Context__enforceCallingOrSelfUriPermission")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingOrSelfUriPermission(reference.pointer, uri.reference.pointer,
            i, string.reference.pointer)
        .check();
  }

  static final _enforceUriPermission1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__enforceUriPermission1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)
  void enforceUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
    jni.JString string2,
  ) {
    _enforceUriPermission1(
            reference.pointer,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2,
            string2.reference.pointer)
        .check();
  }

  static final _revokeSelfPermissionOnKill = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__revokeSelfPermissionOnKill")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionOnKill(java.lang.String string)
  void revokeSelfPermissionOnKill(
    jni.JString string,
  ) {
    _revokeSelfPermissionOnKill(reference.pointer, string.reference.pointer)
        .check();
  }

  static final _revokeSelfPermissionsOnKill = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__revokeSelfPermissionsOnKill")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionsOnKill(java.util.Collection collection)
  void revokeSelfPermissionsOnKill(
    jni.JObject collection,
  ) {
    _revokeSelfPermissionsOnKill(
            reference.pointer, collection.reference.pointer)
        .check();
  }

  static final _createPackageContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Context__createPackageContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Context createPackageContext(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createPackageContext(
    jni.JString string,
    int i,
  ) {
    return _createPackageContext(reference.pointer, string.reference.pointer, i)
        .object(const $ContextType());
  }

  static final _createContextForSplit = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__createContextForSplit")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createContextForSplit(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContextForSplit(
    jni.JString string,
  ) {
    return _createContextForSplit(reference.pointer, string.reference.pointer)
        .object(const $ContextType());
  }

  static final _createConfigurationContext = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Context__createConfigurationContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  Context createConfigurationContext(
    jni.JObject configuration,
  ) {
    return _createConfigurationContext(
            reference.pointer, configuration.reference.pointer)
        .object(const $ContextType());
  }

  static final _createDisplayContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__createDisplayContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDisplayContext(
    jni.JObject display,
  ) {
    return _createDisplayContext(reference.pointer, display.reference.pointer)
        .object(const $ContextType());
  }

  static final _createWindowContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__createWindowContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext(
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext(reference.pointer, i, bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _createWindowContext1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Context__createWindowContext1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext1(
    jni.JObject display,
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext1(reference.pointer, display.reference.pointer,
            i, bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _createContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__createContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createContext(android.content.ContextParams contextParams)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContext(
    jni.JObject contextParams,
  ) {
    return _createContext(reference.pointer, contextParams.reference.pointer)
        .object(const $ContextType());
  }

  static final _createAttributionContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Context__createAttributionContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createAttributionContext(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createAttributionContext(
    jni.JString string,
  ) {
    return _createAttributionContext(
            reference.pointer, string.reference.pointer)
        .object(const $ContextType());
  }

  static final _createDeviceProtectedStorageContext = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__createDeviceProtectedStorageContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(reference.pointer)
        .object(const $ContextType());
  }

  static final _getDisplay = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__getDisplay")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.Display getDisplay()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDisplay() {
    return _getDisplay(reference.pointer).object(const jni.JObjectType());
  }

  static final _isRestricted = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__isRestricted")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isRestricted()
  bool isRestricted() {
    return _isRestricted(reference.pointer).boolean;
  }

  static final _isDeviceProtectedStorage = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__isDeviceProtectedStorage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(reference.pointer).boolean;
  }

  static final _isUiContext = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Context__isUiContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUiContext()
  bool isUiContext() {
    return _isUiContext(reference.pointer).boolean;
  }
}

final class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r"Landroid/content/Context;";

  @override
  Context fromReference(jni.JReference reference) =>
      Context.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextType) && other is $ContextType;
  }
}

/// from: android.content.Intent$FilterComparison
class Intent_FilterComparison extends jni.JObject {
  @override
  late final jni.JObjType<Intent_FilterComparison> $type = type;

  Intent_FilterComparison.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $Intent_FilterComparisonType();
  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent_FilterComparison__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent_FilterComparison(
    Intent intent,
  ) {
    return Intent_FilterComparison.fromReference(
        _new0(intent.reference.pointer).reference);
  }

  static final _getIntent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent_FilterComparison__getIntent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getIntent() {
    return _getIntent(reference.pointer).object(const $IntentType());
  }

  static final _equals = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent_FilterComparison__equals")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, object.reference.pointer).boolean;
  }

  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent_FilterComparison__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer).integer;
  }
}

final class $Intent_FilterComparisonType
    extends jni.JObjType<Intent_FilterComparison> {
  const $Intent_FilterComparisonType();

  @override
  String get signature => r"Landroid/content/Intent$FilterComparison;";

  @override
  Intent_FilterComparison fromReference(jni.JReference reference) =>
      Intent_FilterComparison.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Intent_FilterComparisonType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent_FilterComparisonType) &&
        other is $Intent_FilterComparisonType;
  }
}

/// from: android.content.Intent$ShortcutIconResource
class Intent_ShortcutIconResource extends jni.JObject {
  @override
  late final jni.JObjType<Intent_ShortcutIconResource> $type = type;

  Intent_ShortcutIconResource.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $Intent_ShortcutIconResourceType();
  static final _get_CREATOR =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent_ShortcutIconResource__CREATOR")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _get_CREATOR().object(const jni.JObjectType());

  static final _get_packageName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Intent_ShortcutIconResource__packageName")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_packageName = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_Intent_ShortcutIconResource__packageName")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get packageName =>
      _get_packageName(reference.pointer).object(const jni.JStringType());

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni.JString value) =>
      _set_packageName(reference.pointer, value.reference.pointer).check();

  static final _get_resourceName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_Intent_ShortcutIconResource__resourceName")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  static final _set_resourceName = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      jni.JObjectPtr, ffi.Pointer<ffi.Void>)>>(
          "set_Intent_ShortcutIconResource__resourceName")
      .asFunction<
          jni.JniResult Function(jni.JObjectPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resourceName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get resourceName =>
      _get_resourceName(reference.pointer).object(const jni.JStringType());

  /// from: public java.lang.String resourceName
  /// The returned object must be released after use, by calling the [release] method.
  set resourceName(jni.JString value) =>
      _set_resourceName(reference.pointer, value.reference.pointer).check();

  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "Intent_ShortcutIconResource__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent_ShortcutIconResource() {
    return Intent_ShortcutIconResource.fromReference(_new0().reference);
  }

  static final _fromContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Intent_ShortcutIconResource__fromContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.content.Intent$ShortcutIconResource fromContext(android.content.Context context, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent_ShortcutIconResource fromContext(
    Context context,
    int i,
  ) {
    return _fromContext(context.reference.pointer, i)
        .object(const $Intent_ShortcutIconResourceType());
  }

  static final _describeContents = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent_ShortcutIconResource__describeContents")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(reference.pointer).integer;
  }

  static final _writeToParcel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Intent_ShortcutIconResource__writeToParcel")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, parcel.reference.pointer, i).check();
  }

  static final _toString1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent_ShortcutIconResource__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer).object(const jni.JStringType());
  }
}

final class $Intent_ShortcutIconResourceType
    extends jni.JObjType<Intent_ShortcutIconResource> {
  const $Intent_ShortcutIconResourceType();

  @override
  String get signature => r"Landroid/content/Intent$ShortcutIconResource;";

  @override
  Intent_ShortcutIconResource fromReference(jni.JReference reference) =>
      Intent_ShortcutIconResource.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Intent_ShortcutIconResourceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent_ShortcutIconResourceType) &&
        other is $Intent_ShortcutIconResourceType;
  }
}

/// from: android.content.Intent
class Intent extends jni.JObject {
  @override
  late final jni.JObjType<Intent> $type = type;

  Intent.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $IntentType();
  static final _get_ACTION_AIRPLANE_MODE_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_AIRPLANE_MODE_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_AIRPLANE_MODE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_AIRPLANE_MODE_CHANGED =>
      _get_ACTION_AIRPLANE_MODE_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_ALL_APPS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_ALL_APPS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_ALL_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ALL_APPS =>
      _get_ACTION_ALL_APPS().object(const jni.JStringType());

  static final _get_ACTION_ANSWER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_ANSWER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_ANSWER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ANSWER =>
      _get_ACTION_ANSWER().object(const jni.JStringType());

  static final _get_ACTION_APPLICATION_LOCALE_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_APPLICATION_LOCALE_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_APPLICATION_LOCALE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_LOCALE_CHANGED =>
      _get_ACTION_APPLICATION_LOCALE_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_APPLICATION_PREFERENCES =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_APPLICATION_PREFERENCES")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_APPLICATION_PREFERENCES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_PREFERENCES =>
      _get_ACTION_APPLICATION_PREFERENCES().object(const jni.JStringType());

  static final _get_ACTION_APPLICATION_RESTRICTIONS_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_APPLICATION_RESTRICTIONS_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_RESTRICTIONS_CHANGED =>
      _get_ACTION_APPLICATION_RESTRICTIONS_CHANGED()
          .object(const jni.JStringType());

  static final _get_ACTION_APP_ERROR =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_APP_ERROR")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_APP_ERROR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APP_ERROR =>
      _get_ACTION_APP_ERROR().object(const jni.JStringType());

  static final _get_ACTION_ASSIST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_ASSIST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_ASSIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ASSIST =>
      _get_ACTION_ASSIST().object(const jni.JStringType());

  static final _get_ACTION_ATTACH_DATA =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_ATTACH_DATA")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_ATTACH_DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ATTACH_DATA =>
      _get_ACTION_ATTACH_DATA().object(const jni.JStringType());

  static final _get_ACTION_AUTO_REVOKE_PERMISSIONS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_AUTO_REVOKE_PERMISSIONS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_AUTO_REVOKE_PERMISSIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_AUTO_REVOKE_PERMISSIONS =>
      _get_ACTION_AUTO_REVOKE_PERMISSIONS().object(const jni.JStringType());

  static final _get_ACTION_BATTERY_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_BATTERY_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_BATTERY_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_CHANGED =>
      _get_ACTION_BATTERY_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_BATTERY_LOW =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_BATTERY_LOW")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_BATTERY_LOW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_LOW =>
      _get_ACTION_BATTERY_LOW().object(const jni.JStringType());

  static final _get_ACTION_BATTERY_OKAY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_BATTERY_OKAY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_BATTERY_OKAY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_OKAY =>
      _get_ACTION_BATTERY_OKAY().object(const jni.JStringType());

  static final _get_ACTION_BOOT_COMPLETED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_BOOT_COMPLETED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_BOOT_COMPLETED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BOOT_COMPLETED =>
      _get_ACTION_BOOT_COMPLETED().object(const jni.JStringType());

  static final _get_ACTION_BUG_REPORT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_BUG_REPORT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_BUG_REPORT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BUG_REPORT =>
      _get_ACTION_BUG_REPORT().object(const jni.JStringType());

  static final _get_ACTION_CALL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CALL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CALL =>
      _get_ACTION_CALL().object(const jni.JStringType());

  static final _get_ACTION_CALL_BUTTON =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CALL_BUTTON")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CALL_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CALL_BUTTON =>
      _get_ACTION_CALL_BUTTON().object(const jni.JStringType());

  static final _get_ACTION_CAMERA_BUTTON =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CAMERA_BUTTON")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CAMERA_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CAMERA_BUTTON =>
      _get_ACTION_CAMERA_BUTTON().object(const jni.JStringType());

  static final _get_ACTION_CARRIER_SETUP =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CARRIER_SETUP")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CARRIER_SETUP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CARRIER_SETUP =>
      _get_ACTION_CARRIER_SETUP().object(const jni.JStringType());

  static final _get_ACTION_CHOOSER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CHOOSER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CHOOSER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CHOOSER =>
      _get_ACTION_CHOOSER().object(const jni.JStringType());

  static final _get_ACTION_CLOSE_SYSTEM_DIALOGS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CLOSE_SYSTEM_DIALOGS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CLOSE_SYSTEM_DIALOGS =>
      _get_ACTION_CLOSE_SYSTEM_DIALOGS().object(const jni.JStringType());

  static final _get_ACTION_CONFIGURATION_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CONFIGURATION_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CONFIGURATION_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CONFIGURATION_CHANGED =>
      _get_ACTION_CONFIGURATION_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_CREATE_DOCUMENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CREATE_DOCUMENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CREATE_DOCUMENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_DOCUMENT =>
      _get_ACTION_CREATE_DOCUMENT().object(const jni.JStringType());

  static final _get_ACTION_CREATE_REMINDER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CREATE_REMINDER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CREATE_REMINDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_REMINDER =>
      _get_ACTION_CREATE_REMINDER().object(const jni.JStringType());

  static final _get_ACTION_CREATE_SHORTCUT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_CREATE_SHORTCUT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_CREATE_SHORTCUT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_SHORTCUT =>
      _get_ACTION_CREATE_SHORTCUT().object(const jni.JStringType());

  static final _get_ACTION_DATE_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DATE_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DATE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DATE_CHANGED =>
      _get_ACTION_DATE_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_DEFAULT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DEFAULT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DEFAULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEFAULT =>
      _get_ACTION_DEFAULT().object(const jni.JStringType());

  static final _get_ACTION_DEFINE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DEFINE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DEFINE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEFINE =>
      _get_ACTION_DEFINE().object(const jni.JStringType());

  static final _get_ACTION_DELETE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DELETE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DELETE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DELETE =>
      _get_ACTION_DELETE().object(const jni.JStringType());

  static final _get_ACTION_DEVICE_STORAGE_LOW =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DEVICE_STORAGE_LOW")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DEVICE_STORAGE_LOW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEVICE_STORAGE_LOW =>
      _get_ACTION_DEVICE_STORAGE_LOW().object(const jni.JStringType());

  static final _get_ACTION_DEVICE_STORAGE_OK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DEVICE_STORAGE_OK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DEVICE_STORAGE_OK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEVICE_STORAGE_OK =>
      _get_ACTION_DEVICE_STORAGE_OK().object(const jni.JStringType());

  static final _get_ACTION_DIAL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DIAL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DIAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DIAL =>
      _get_ACTION_DIAL().object(const jni.JStringType());

  static final _get_ACTION_DOCK_EVENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DOCK_EVENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DOCK_EVENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DOCK_EVENT =>
      _get_ACTION_DOCK_EVENT().object(const jni.JStringType());

  static final _get_ACTION_DREAMING_STARTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DREAMING_STARTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DREAMING_STARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DREAMING_STARTED =>
      _get_ACTION_DREAMING_STARTED().object(const jni.JStringType());

  static final _get_ACTION_DREAMING_STOPPED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_DREAMING_STOPPED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_DREAMING_STOPPED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DREAMING_STOPPED =>
      _get_ACTION_DREAMING_STOPPED().object(const jni.JStringType());

  static final _get_ACTION_EDIT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_EDIT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_EDIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EDIT =>
      _get_ACTION_EDIT().object(const jni.JStringType());

  static final _get_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_EXTERNAL_APPLICATIONS_AVAILABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =>
      _get_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE()
          .object(const jni.JStringType());

  static final _get_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =>
      _get_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE()
          .object(const jni.JStringType());

  static final _get_ACTION_FACTORY_TEST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_FACTORY_TEST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_FACTORY_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_FACTORY_TEST =>
      _get_ACTION_FACTORY_TEST().object(const jni.JStringType());

  static final _get_ACTION_GET_CONTENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_GET_CONTENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_GET_CONTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GET_CONTENT =>
      _get_ACTION_GET_CONTENT().object(const jni.JStringType());

  static final _get_ACTION_GET_RESTRICTION_ENTRIES =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_GET_RESTRICTION_ENTRIES")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_GET_RESTRICTION_ENTRIES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GET_RESTRICTION_ENTRIES =>
      _get_ACTION_GET_RESTRICTION_ENTRIES().object(const jni.JStringType());

  static final _get_ACTION_GTALK_SERVICE_CONNECTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_GTALK_SERVICE_CONNECTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_GTALK_SERVICE_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GTALK_SERVICE_CONNECTED =>
      _get_ACTION_GTALK_SERVICE_CONNECTED().object(const jni.JStringType());

  static final _get_ACTION_GTALK_SERVICE_DISCONNECTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_GTALK_SERVICE_DISCONNECTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GTALK_SERVICE_DISCONNECTED =>
      _get_ACTION_GTALK_SERVICE_DISCONNECTED().object(const jni.JStringType());

  static final _get_ACTION_HEADSET_PLUG =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_HEADSET_PLUG")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_HEADSET_PLUG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_HEADSET_PLUG =>
      _get_ACTION_HEADSET_PLUG().object(const jni.JStringType());

  static final _get_ACTION_INPUT_METHOD_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_INPUT_METHOD_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_INPUT_METHOD_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INPUT_METHOD_CHANGED =>
      _get_ACTION_INPUT_METHOD_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_INSERT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_INSERT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_INSERT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSERT =>
      _get_ACTION_INSERT().object(const jni.JStringType());

  static final _get_ACTION_INSERT_OR_EDIT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_INSERT_OR_EDIT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_INSERT_OR_EDIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSERT_OR_EDIT =>
      _get_ACTION_INSERT_OR_EDIT().object(const jni.JStringType());

  static final _get_ACTION_INSTALL_FAILURE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_INSTALL_FAILURE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_INSTALL_FAILURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSTALL_FAILURE =>
      _get_ACTION_INSTALL_FAILURE().object(const jni.JStringType());

  static final _get_ACTION_INSTALL_PACKAGE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_INSTALL_PACKAGE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_INSTALL_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSTALL_PACKAGE =>
      _get_ACTION_INSTALL_PACKAGE().object(const jni.JStringType());

  static final _get_ACTION_LOCALE_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_LOCALE_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_LOCALE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_LOCALE_CHANGED =>
      _get_ACTION_LOCALE_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_LOCKED_BOOT_COMPLETED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_LOCKED_BOOT_COMPLETED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_LOCKED_BOOT_COMPLETED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_LOCKED_BOOT_COMPLETED =>
      _get_ACTION_LOCKED_BOOT_COMPLETED().object(const jni.JStringType());

  static final _get_ACTION_MAIN =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MAIN")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MAIN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MAIN =>
      _get_ACTION_MAIN().object(const jni.JStringType());

  static final _get_ACTION_MANAGED_PROFILE_ADDED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MANAGED_PROFILE_ADDED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_ADDED =>
      _get_ACTION_MANAGED_PROFILE_ADDED().object(const jni.JStringType());

  static final _get_ACTION_MANAGED_PROFILE_AVAILABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MANAGED_PROFILE_AVAILABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_AVAILABLE =>
      _get_ACTION_MANAGED_PROFILE_AVAILABLE().object(const jni.JStringType());

  static final _get_ACTION_MANAGED_PROFILE_REMOVED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MANAGED_PROFILE_REMOVED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_REMOVED =>
      _get_ACTION_MANAGED_PROFILE_REMOVED().object(const jni.JStringType());

  static final _get_ACTION_MANAGED_PROFILE_UNAVAILABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MANAGED_PROFILE_UNAVAILABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_UNAVAILABLE =>
      _get_ACTION_MANAGED_PROFILE_UNAVAILABLE().object(const jni.JStringType());

  static final _get_ACTION_MANAGED_PROFILE_UNLOCKED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MANAGED_PROFILE_UNLOCKED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_UNLOCKED =>
      _get_ACTION_MANAGED_PROFILE_UNLOCKED().object(const jni.JStringType());

  static final _get_ACTION_MANAGE_NETWORK_USAGE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MANAGE_NETWORK_USAGE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MANAGE_NETWORK_USAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_NETWORK_USAGE =>
      _get_ACTION_MANAGE_NETWORK_USAGE().object(const jni.JStringType());

  static final _get_ACTION_MANAGE_PACKAGE_STORAGE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MANAGE_PACKAGE_STORAGE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MANAGE_PACKAGE_STORAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_PACKAGE_STORAGE =>
      _get_ACTION_MANAGE_PACKAGE_STORAGE().object(const jni.JStringType());

  static final _get_ACTION_MANAGE_UNUSED_APPS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MANAGE_UNUSED_APPS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MANAGE_UNUSED_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_UNUSED_APPS =>
      _get_ACTION_MANAGE_UNUSED_APPS().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_BAD_REMOVAL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_BAD_REMOVAL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_BAD_REMOVAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_BAD_REMOVAL =>
      _get_ACTION_MEDIA_BAD_REMOVAL().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_BUTTON =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_BUTTON")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_BUTTON =>
      _get_ACTION_MEDIA_BUTTON().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_CHECKING =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_CHECKING")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_CHECKING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_CHECKING =>
      _get_ACTION_MEDIA_CHECKING().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_EJECT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_EJECT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_EJECT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_EJECT =>
      _get_ACTION_MEDIA_EJECT().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_MOUNTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_MOUNTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_MOUNTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_MOUNTED =>
      _get_ACTION_MEDIA_MOUNTED().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_NOFS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_NOFS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_NOFS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_NOFS =>
      _get_ACTION_MEDIA_NOFS().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_REMOVED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_REMOVED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_REMOVED =>
      _get_ACTION_MEDIA_REMOVED().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_SCANNER_FINISHED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_SCANNER_FINISHED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_FINISHED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_FINISHED =>
      _get_ACTION_MEDIA_SCANNER_FINISHED().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_SCANNER_SCAN_FILE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_SCANNER_SCAN_FILE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_SCAN_FILE =>
      _get_ACTION_MEDIA_SCANNER_SCAN_FILE().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_SCANNER_STARTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_SCANNER_STARTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_STARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_STARTED =>
      _get_ACTION_MEDIA_SCANNER_STARTED().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_SHARED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_SHARED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_SHARED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SHARED =>
      _get_ACTION_MEDIA_SHARED().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_UNMOUNTABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_UNMOUNTABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_UNMOUNTABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_UNMOUNTABLE =>
      _get_ACTION_MEDIA_UNMOUNTABLE().object(const jni.JStringType());

  static final _get_ACTION_MEDIA_UNMOUNTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MEDIA_UNMOUNTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MEDIA_UNMOUNTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_UNMOUNTED =>
      _get_ACTION_MEDIA_UNMOUNTED().object(const jni.JStringType());

  static final _get_ACTION_MY_PACKAGE_REPLACED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MY_PACKAGE_REPLACED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_REPLACED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_REPLACED =>
      _get_ACTION_MY_PACKAGE_REPLACED().object(const jni.JStringType());

  static final _get_ACTION_MY_PACKAGE_SUSPENDED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MY_PACKAGE_SUSPENDED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_SUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_SUSPENDED =>
      _get_ACTION_MY_PACKAGE_SUSPENDED().object(const jni.JStringType());

  static final _get_ACTION_MY_PACKAGE_UNSUSPENDED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_MY_PACKAGE_UNSUSPENDED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_UNSUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_UNSUSPENDED =>
      _get_ACTION_MY_PACKAGE_UNSUSPENDED().object(const jni.JStringType());

  static final _get_ACTION_NEW_OUTGOING_CALL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_NEW_OUTGOING_CALL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_NEW_OUTGOING_CALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_NEW_OUTGOING_CALL =>
      _get_ACTION_NEW_OUTGOING_CALL().object(const jni.JStringType());

  static final _get_ACTION_OPEN_DOCUMENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_OPEN_DOCUMENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_OPEN_DOCUMENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_OPEN_DOCUMENT =>
      _get_ACTION_OPEN_DOCUMENT().object(const jni.JStringType());

  static final _get_ACTION_OPEN_DOCUMENT_TREE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_OPEN_DOCUMENT_TREE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_OPEN_DOCUMENT_TREE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_OPEN_DOCUMENT_TREE =>
      _get_ACTION_OPEN_DOCUMENT_TREE().object(const jni.JStringType());

  static final _get_ACTION_PACKAGES_SUSPENDED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGES_SUSPENDED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGES_SUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGES_SUSPENDED =>
      _get_ACTION_PACKAGES_SUSPENDED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGES_UNSUSPENDED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGES_UNSUSPENDED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGES_UNSUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGES_UNSUSPENDED =>
      _get_ACTION_PACKAGES_UNSUSPENDED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_ADDED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_ADDED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_ADDED =>
      _get_ACTION_PACKAGE_ADDED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_CHANGED =>
      _get_ACTION_PACKAGE_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_DATA_CLEARED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_DATA_CLEARED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_DATA_CLEARED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_DATA_CLEARED =>
      _get_ACTION_PACKAGE_DATA_CLEARED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_FIRST_LAUNCH =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_FIRST_LAUNCH")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_FIRST_LAUNCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_FIRST_LAUNCH =>
      _get_ACTION_PACKAGE_FIRST_LAUNCH().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_FULLY_REMOVED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_FULLY_REMOVED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_FULLY_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_FULLY_REMOVED =>
      _get_ACTION_PACKAGE_FULLY_REMOVED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_INSTALL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_INSTALL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_INSTALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_INSTALL =>
      _get_ACTION_PACKAGE_INSTALL().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_NEEDS_VERIFICATION =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_NEEDS_VERIFICATION")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_NEEDS_VERIFICATION =>
      _get_ACTION_PACKAGE_NEEDS_VERIFICATION().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_REMOVED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_REMOVED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_REMOVED =>
      _get_ACTION_PACKAGE_REMOVED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_REPLACED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_REPLACED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_REPLACED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_REPLACED =>
      _get_ACTION_PACKAGE_REPLACED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_RESTARTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_RESTARTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_RESTARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_RESTARTED =>
      _get_ACTION_PACKAGE_RESTARTED().object(const jni.JStringType());

  static final _get_ACTION_PACKAGE_VERIFIED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PACKAGE_VERIFIED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PACKAGE_VERIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_VERIFIED =>
      _get_ACTION_PACKAGE_VERIFIED().object(const jni.JStringType());

  static final _get_ACTION_PASTE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PASTE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PASTE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PASTE =>
      _get_ACTION_PASTE().object(const jni.JStringType());

  static final _get_ACTION_PICK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PICK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PICK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK =>
      _get_ACTION_PICK().object(const jni.JStringType());

  static final _get_ACTION_PICK_ACTIVITY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PICK_ACTIVITY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PICK_ACTIVITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK_ACTIVITY =>
      _get_ACTION_PICK_ACTIVITY().object(const jni.JStringType());

  static final _get_ACTION_POWER_CONNECTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_POWER_CONNECTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_POWER_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_CONNECTED =>
      _get_ACTION_POWER_CONNECTED().object(const jni.JStringType());

  static final _get_ACTION_POWER_DISCONNECTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_POWER_DISCONNECTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_POWER_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_DISCONNECTED =>
      _get_ACTION_POWER_DISCONNECTED().object(const jni.JStringType());

  static final _get_ACTION_POWER_USAGE_SUMMARY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_POWER_USAGE_SUMMARY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_POWER_USAGE_SUMMARY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_USAGE_SUMMARY =>
      _get_ACTION_POWER_USAGE_SUMMARY().object(const jni.JStringType());

  static final _get_ACTION_PROCESS_TEXT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PROCESS_TEXT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PROCESS_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROCESS_TEXT =>
      _get_ACTION_PROCESS_TEXT().object(const jni.JStringType());

  static final _get_ACTION_PROFILE_ACCESSIBLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PROFILE_ACCESSIBLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PROFILE_ACCESSIBLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROFILE_ACCESSIBLE =>
      _get_ACTION_PROFILE_ACCESSIBLE().object(const jni.JStringType());

  static final _get_ACTION_PROFILE_INACCESSIBLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PROFILE_INACCESSIBLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PROFILE_INACCESSIBLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROFILE_INACCESSIBLE =>
      _get_ACTION_PROFILE_INACCESSIBLE().object(const jni.JStringType());

  static final _get_ACTION_PROVIDER_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_PROVIDER_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_PROVIDER_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROVIDER_CHANGED =>
      _get_ACTION_PROVIDER_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_QUICK_CLOCK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_QUICK_CLOCK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_QUICK_CLOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_QUICK_CLOCK =>
      _get_ACTION_QUICK_CLOCK().object(const jni.JStringType());

  static final _get_ACTION_QUICK_VIEW =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_QUICK_VIEW")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_QUICK_VIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_QUICK_VIEW =>
      _get_ACTION_QUICK_VIEW().object(const jni.JStringType());

  static final _get_ACTION_REBOOT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_REBOOT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_REBOOT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REBOOT =>
      _get_ACTION_REBOOT().object(const jni.JStringType());

  static final _get_ACTION_RUN =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_RUN")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_RUN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_RUN =>
      _get_ACTION_RUN().object(const jni.JStringType());

  static final _get_ACTION_SAFETY_CENTER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SAFETY_CENTER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SAFETY_CENTER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SAFETY_CENTER =>
      _get_ACTION_SAFETY_CENTER().object(const jni.JStringType());

  static final _get_ACTION_SCREEN_OFF =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SCREEN_OFF")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SCREEN_OFF
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCREEN_OFF =>
      _get_ACTION_SCREEN_OFF().object(const jni.JStringType());

  static final _get_ACTION_SCREEN_ON =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SCREEN_ON")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SCREEN_ON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCREEN_ON =>
      _get_ACTION_SCREEN_ON().object(const jni.JStringType());

  static final _get_ACTION_SEARCH =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SEARCH")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEARCH =>
      _get_ACTION_SEARCH().object(const jni.JStringType());

  static final _get_ACTION_SEARCH_LONG_PRESS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SEARCH_LONG_PRESS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SEARCH_LONG_PRESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEARCH_LONG_PRESS =>
      _get_ACTION_SEARCH_LONG_PRESS().object(const jni.JStringType());

  static final _get_ACTION_SEND =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SEND")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SEND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEND =>
      _get_ACTION_SEND().object(const jni.JStringType());

  static final _get_ACTION_SENDTO =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SENDTO")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SENDTO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SENDTO =>
      _get_ACTION_SENDTO().object(const jni.JStringType());

  static final _get_ACTION_SEND_MULTIPLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SEND_MULTIPLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SEND_MULTIPLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEND_MULTIPLE =>
      _get_ACTION_SEND_MULTIPLE().object(const jni.JStringType());

  static final _get_ACTION_SET_WALLPAPER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SET_WALLPAPER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SET_WALLPAPER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SET_WALLPAPER =>
      _get_ACTION_SET_WALLPAPER().object(const jni.JStringType());

  static final _get_ACTION_SHOW_APP_INFO =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SHOW_APP_INFO")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SHOW_APP_INFO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHOW_APP_INFO =>
      _get_ACTION_SHOW_APP_INFO().object(const jni.JStringType());

  static final _get_ACTION_SHOW_WORK_APPS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SHOW_WORK_APPS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SHOW_WORK_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHOW_WORK_APPS =>
      _get_ACTION_SHOW_WORK_APPS().object(const jni.JStringType());

  static final _get_ACTION_SHUTDOWN =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SHUTDOWN")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SHUTDOWN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHUTDOWN =>
      _get_ACTION_SHUTDOWN().object(const jni.JStringType());

  static final _get_ACTION_SYNC =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SYNC")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SYNC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SYNC =>
      _get_ACTION_SYNC().object(const jni.JStringType());

  static final _get_ACTION_SYSTEM_TUTORIAL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_SYSTEM_TUTORIAL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_SYSTEM_TUTORIAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SYSTEM_TUTORIAL =>
      _get_ACTION_SYSTEM_TUTORIAL().object(const jni.JStringType());

  static final _get_ACTION_TIMEZONE_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_TIMEZONE_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_TIMEZONE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIMEZONE_CHANGED =>
      _get_ACTION_TIMEZONE_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_TIME_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_TIME_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_TIME_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIME_CHANGED =>
      _get_ACTION_TIME_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_TIME_TICK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_TIME_TICK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_TIME_TICK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIME_TICK =>
      _get_ACTION_TIME_TICK().object(const jni.JStringType());

  static final _get_ACTION_TRANSLATE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_TRANSLATE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_TRANSLATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TRANSLATE =>
      _get_ACTION_TRANSLATE().object(const jni.JStringType());

  static final _get_ACTION_UID_REMOVED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_UID_REMOVED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_UID_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UID_REMOVED =>
      _get_ACTION_UID_REMOVED().object(const jni.JStringType());

  static final _get_ACTION_UMS_CONNECTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_UMS_CONNECTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_UMS_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UMS_CONNECTED =>
      _get_ACTION_UMS_CONNECTED().object(const jni.JStringType());

  static final _get_ACTION_UMS_DISCONNECTED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_UMS_DISCONNECTED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_UMS_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UMS_DISCONNECTED =>
      _get_ACTION_UMS_DISCONNECTED().object(const jni.JStringType());

  static final _get_ACTION_UNINSTALL_PACKAGE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_UNINSTALL_PACKAGE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_UNINSTALL_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UNINSTALL_PACKAGE =>
      _get_ACTION_UNINSTALL_PACKAGE().object(const jni.JStringType());

  static final _get_ACTION_USER_BACKGROUND =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_USER_BACKGROUND")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_USER_BACKGROUND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_BACKGROUND =>
      _get_ACTION_USER_BACKGROUND().object(const jni.JStringType());

  static final _get_ACTION_USER_FOREGROUND =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_USER_FOREGROUND")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_USER_FOREGROUND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_FOREGROUND =>
      _get_ACTION_USER_FOREGROUND().object(const jni.JStringType());

  static final _get_ACTION_USER_INITIALIZE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_USER_INITIALIZE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_USER_INITIALIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_INITIALIZE =>
      _get_ACTION_USER_INITIALIZE().object(const jni.JStringType());

  static final _get_ACTION_USER_PRESENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_USER_PRESENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_USER_PRESENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_PRESENT =>
      _get_ACTION_USER_PRESENT().object(const jni.JStringType());

  static final _get_ACTION_USER_UNLOCKED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_USER_UNLOCKED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_USER_UNLOCKED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_UNLOCKED =>
      _get_ACTION_USER_UNLOCKED().object(const jni.JStringType());

  static final _get_ACTION_VIEW =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_VIEW")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_VIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW =>
      _get_ACTION_VIEW().object(const jni.JStringType());

  static final _get_ACTION_VIEW_LOCUS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_VIEW_LOCUS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_VIEW_LOCUS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_LOCUS =>
      _get_ACTION_VIEW_LOCUS().object(const jni.JStringType());

  static final _get_ACTION_VIEW_PERMISSION_USAGE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_VIEW_PERMISSION_USAGE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_PERMISSION_USAGE =>
      _get_ACTION_VIEW_PERMISSION_USAGE().object(const jni.JStringType());

  static final _get_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =>
      _get_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD()
          .object(const jni.JStringType());

  static final _get_ACTION_VOICE_COMMAND =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_VOICE_COMMAND")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_VOICE_COMMAND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VOICE_COMMAND =>
      _get_ACTION_VOICE_COMMAND().object(const jni.JStringType());

  static final _get_ACTION_WALLPAPER_CHANGED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_WALLPAPER_CHANGED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_WALLPAPER_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_WALLPAPER_CHANGED =>
      _get_ACTION_WALLPAPER_CHANGED().object(const jni.JStringType());

  static final _get_ACTION_WEB_SEARCH =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__ACTION_WEB_SEARCH")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String ACTION_WEB_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_WEB_SEARCH =>
      _get_ACTION_WEB_SEARCH().object(const jni.JStringType());

  static final _get_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =>
      _get_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET()
          .object(const jni.JStringType());

  static final _get_CATEGORY_ALTERNATIVE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_ALTERNATIVE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_ALTERNATIVE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_ALTERNATIVE =>
      _get_CATEGORY_ALTERNATIVE().object(const jni.JStringType());

  static final _get_CATEGORY_APP_BROWSER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_BROWSER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_BROWSER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_BROWSER =>
      _get_CATEGORY_APP_BROWSER().object(const jni.JStringType());

  static final _get_CATEGORY_APP_CALCULATOR =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_CALCULATOR")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_CALCULATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CALCULATOR =>
      _get_CATEGORY_APP_CALCULATOR().object(const jni.JStringType());

  static final _get_CATEGORY_APP_CALENDAR =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_CALENDAR")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_CALENDAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CALENDAR =>
      _get_CATEGORY_APP_CALENDAR().object(const jni.JStringType());

  static final _get_CATEGORY_APP_CONTACTS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_CONTACTS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_CONTACTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CONTACTS =>
      _get_CATEGORY_APP_CONTACTS().object(const jni.JStringType());

  static final _get_CATEGORY_APP_EMAIL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_EMAIL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_EMAIL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_EMAIL =>
      _get_CATEGORY_APP_EMAIL().object(const jni.JStringType());

  static final _get_CATEGORY_APP_FILES =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_FILES")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_FILES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_FILES =>
      _get_CATEGORY_APP_FILES().object(const jni.JStringType());

  static final _get_CATEGORY_APP_FITNESS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_FITNESS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_FITNESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_FITNESS =>
      _get_CATEGORY_APP_FITNESS().object(const jni.JStringType());

  static final _get_CATEGORY_APP_GALLERY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_GALLERY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_GALLERY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_GALLERY =>
      _get_CATEGORY_APP_GALLERY().object(const jni.JStringType());

  static final _get_CATEGORY_APP_MAPS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_MAPS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_MAPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MAPS =>
      _get_CATEGORY_APP_MAPS().object(const jni.JStringType());

  static final _get_CATEGORY_APP_MARKET =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_MARKET")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_MARKET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MARKET =>
      _get_CATEGORY_APP_MARKET().object(const jni.JStringType());

  static final _get_CATEGORY_APP_MESSAGING =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_MESSAGING")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_MESSAGING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MESSAGING =>
      _get_CATEGORY_APP_MESSAGING().object(const jni.JStringType());

  static final _get_CATEGORY_APP_MUSIC =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_MUSIC")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_MUSIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MUSIC =>
      _get_CATEGORY_APP_MUSIC().object(const jni.JStringType());

  static final _get_CATEGORY_APP_WEATHER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_APP_WEATHER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_APP_WEATHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_WEATHER =>
      _get_CATEGORY_APP_WEATHER().object(const jni.JStringType());

  static final _get_CATEGORY_BROWSABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_BROWSABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_BROWSABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_BROWSABLE =>
      _get_CATEGORY_BROWSABLE().object(const jni.JStringType());

  static final _get_CATEGORY_CAR_DOCK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_CAR_DOCK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_CAR_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_CAR_DOCK =>
      _get_CATEGORY_CAR_DOCK().object(const jni.JStringType());

  static final _get_CATEGORY_CAR_MODE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_CAR_MODE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_CAR_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_CAR_MODE =>
      _get_CATEGORY_CAR_MODE().object(const jni.JStringType());

  static final _get_CATEGORY_DEFAULT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_DEFAULT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_DEFAULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DEFAULT =>
      _get_CATEGORY_DEFAULT().object(const jni.JStringType());

  static final _get_CATEGORY_DESK_DOCK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_DESK_DOCK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DESK_DOCK =>
      _get_CATEGORY_DESK_DOCK().object(const jni.JStringType());

  static final _get_CATEGORY_DEVELOPMENT_PREFERENCE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_DEVELOPMENT_PREFERENCE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DEVELOPMENT_PREFERENCE =>
      _get_CATEGORY_DEVELOPMENT_PREFERENCE().object(const jni.JStringType());

  static final _get_CATEGORY_EMBED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_EMBED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_EMBED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_EMBED =>
      _get_CATEGORY_EMBED().object(const jni.JStringType());

  static final _get_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =>
      _get_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST()
          .object(const jni.JStringType());

  static final _get_CATEGORY_HE_DESK_DOCK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_HE_DESK_DOCK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_HE_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_HE_DESK_DOCK =>
      _get_CATEGORY_HE_DESK_DOCK().object(const jni.JStringType());

  static final _get_CATEGORY_HOME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_HOME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_HOME =>
      _get_CATEGORY_HOME().object(const jni.JStringType());

  static final _get_CATEGORY_INFO =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_INFO")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_INFO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_INFO =>
      _get_CATEGORY_INFO().object(const jni.JStringType());

  static final _get_CATEGORY_LAUNCHER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_LAUNCHER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_LAUNCHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LAUNCHER =>
      _get_CATEGORY_LAUNCHER().object(const jni.JStringType());

  static final _get_CATEGORY_LEANBACK_LAUNCHER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_LEANBACK_LAUNCHER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_LEANBACK_LAUNCHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LEANBACK_LAUNCHER =>
      _get_CATEGORY_LEANBACK_LAUNCHER().object(const jni.JStringType());

  static final _get_CATEGORY_LE_DESK_DOCK =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_LE_DESK_DOCK")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_LE_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LE_DESK_DOCK =>
      _get_CATEGORY_LE_DESK_DOCK().object(const jni.JStringType());

  static final _get_CATEGORY_MONKEY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_MONKEY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_MONKEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_MONKEY =>
      _get_CATEGORY_MONKEY().object(const jni.JStringType());

  static final _get_CATEGORY_OPENABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_OPENABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_OPENABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_OPENABLE =>
      _get_CATEGORY_OPENABLE().object(const jni.JStringType());

  static final _get_CATEGORY_PREFERENCE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_PREFERENCE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_PREFERENCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_PREFERENCE =>
      _get_CATEGORY_PREFERENCE().object(const jni.JStringType());

  static final _get_CATEGORY_SAMPLE_CODE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_SAMPLE_CODE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_SAMPLE_CODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SAMPLE_CODE =>
      _get_CATEGORY_SAMPLE_CODE().object(const jni.JStringType());

  static final _get_CATEGORY_SECONDARY_HOME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_SECONDARY_HOME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_SECONDARY_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SECONDARY_HOME =>
      _get_CATEGORY_SECONDARY_HOME().object(const jni.JStringType());

  static final _get_CATEGORY_SELECTED_ALTERNATIVE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_SELECTED_ALTERNATIVE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_SELECTED_ALTERNATIVE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SELECTED_ALTERNATIVE =>
      _get_CATEGORY_SELECTED_ALTERNATIVE().object(const jni.JStringType());

  static final _get_CATEGORY_TAB =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_TAB")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_TAB
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TAB =>
      _get_CATEGORY_TAB().object(const jni.JStringType());

  static final _get_CATEGORY_TEST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_TEST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TEST =>
      _get_CATEGORY_TEST().object(const jni.JStringType());

  static final _get_CATEGORY_TYPED_OPENABLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_TYPED_OPENABLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_TYPED_OPENABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TYPED_OPENABLE =>
      _get_CATEGORY_TYPED_OPENABLE().object(const jni.JStringType());

  static final _get_CATEGORY_UNIT_TEST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_UNIT_TEST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_UNIT_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_UNIT_TEST =>
      _get_CATEGORY_UNIT_TEST().object(const jni.JStringType());

  static final _get_CATEGORY_VOICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_VOICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_VOICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_VOICE =>
      _get_CATEGORY_VOICE().object(const jni.JStringType());

  static final _get_CATEGORY_VR_HOME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CATEGORY_VR_HOME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String CATEGORY_VR_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_VR_HOME =>
      _get_CATEGORY_VR_HOME().object(const jni.JStringType());

  static final _get_CREATOR =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__CREATOR")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _get_CREATOR().object(const jni.JObjectType());

  static final _get_EXTRA_ALARM_COUNT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ALARM_COUNT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ALARM_COUNT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALARM_COUNT =>
      _get_EXTRA_ALARM_COUNT().object(const jni.JStringType());

  static final _get_EXTRA_ALLOW_MULTIPLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ALLOW_MULTIPLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ALLOW_MULTIPLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALLOW_MULTIPLE =>
      _get_EXTRA_ALLOW_MULTIPLE().object(const jni.JStringType());

  static final _get_EXTRA_ALLOW_REPLACE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ALLOW_REPLACE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ALLOW_REPLACE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALLOW_REPLACE =>
      _get_EXTRA_ALLOW_REPLACE().object(const jni.JStringType());

  static final _get_EXTRA_ALTERNATE_INTENTS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ALTERNATE_INTENTS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ALTERNATE_INTENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALTERNATE_INTENTS =>
      _get_EXTRA_ALTERNATE_INTENTS().object(const jni.JStringType());

  static final _get_EXTRA_ASSIST_CONTEXT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ASSIST_CONTEXT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ASSIST_CONTEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_CONTEXT =>
      _get_EXTRA_ASSIST_CONTEXT().object(const jni.JStringType());

  static final _get_EXTRA_ASSIST_INPUT_DEVICE_ID =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ASSIST_INPUT_DEVICE_ID")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_INPUT_DEVICE_ID =>
      _get_EXTRA_ASSIST_INPUT_DEVICE_ID().object(const jni.JStringType());

  static final _get_EXTRA_ASSIST_INPUT_HINT_KEYBOARD =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ASSIST_INPUT_HINT_KEYBOARD")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_INPUT_HINT_KEYBOARD =>
      _get_EXTRA_ASSIST_INPUT_HINT_KEYBOARD().object(const jni.JStringType());

  static final _get_EXTRA_ASSIST_PACKAGE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ASSIST_PACKAGE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ASSIST_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_PACKAGE =>
      _get_EXTRA_ASSIST_PACKAGE().object(const jni.JStringType());

  static final _get_EXTRA_ASSIST_UID =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ASSIST_UID")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ASSIST_UID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_UID =>
      _get_EXTRA_ASSIST_UID().object(const jni.JStringType());

  static final _get_EXTRA_ATTRIBUTION_TAGS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ATTRIBUTION_TAGS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ATTRIBUTION_TAGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ATTRIBUTION_TAGS =>
      _get_EXTRA_ATTRIBUTION_TAGS().object(const jni.JStringType());

  static final _get_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_AUTO_LAUNCH_SINGLE_CHOICE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_AUTO_LAUNCH_SINGLE_CHOICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_AUTO_LAUNCH_SINGLE_CHOICE =>
      _get_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE().object(const jni.JStringType());

  static final _get_EXTRA_BCC =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_BCC")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_BCC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BCC =>
      _get_EXTRA_BCC().object(const jni.JStringType());

  static final _get_EXTRA_BUG_REPORT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_BUG_REPORT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_BUG_REPORT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BUG_REPORT =>
      _get_EXTRA_BUG_REPORT().object(const jni.JStringType());

  static final _get_EXTRA_CC =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CC")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CC =>
      _get_EXTRA_CC().object(const jni.JStringType());

  static final _get_EXTRA_CHANGED_COMPONENT_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CHANGED_COMPONENT_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_COMPONENT_NAME =>
      _get_EXTRA_CHANGED_COMPONENT_NAME().object(const jni.JStringType());

  static final _get_EXTRA_CHANGED_COMPONENT_NAME_LIST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CHANGED_COMPONENT_NAME_LIST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_COMPONENT_NAME_LIST =>
      _get_EXTRA_CHANGED_COMPONENT_NAME_LIST().object(const jni.JStringType());

  static final _get_EXTRA_CHANGED_PACKAGE_LIST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CHANGED_PACKAGE_LIST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CHANGED_PACKAGE_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_PACKAGE_LIST =>
      _get_EXTRA_CHANGED_PACKAGE_LIST().object(const jni.JStringType());

  static final _get_EXTRA_CHANGED_UID_LIST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CHANGED_UID_LIST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CHANGED_UID_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_UID_LIST =>
      _get_EXTRA_CHANGED_UID_LIST().object(const jni.JStringType());

  static final _get_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =>
      _get_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER()
          .object(const jni.JStringType());

  static final _get_EXTRA_CHOOSER_TARGETS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CHOOSER_TARGETS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CHOOSER_TARGETS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOOSER_TARGETS =>
      _get_EXTRA_CHOOSER_TARGETS().object(const jni.JStringType());

  static final _get_EXTRA_CHOSEN_COMPONENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CHOSEN_COMPONENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CHOSEN_COMPONENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOSEN_COMPONENT =>
      _get_EXTRA_CHOSEN_COMPONENT().object(const jni.JStringType());

  static final _get_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CHOSEN_COMPONENT_INTENT_SENDER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOSEN_COMPONENT_INTENT_SENDER =>
      _get_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER()
          .object(const jni.JStringType());

  static final _get_EXTRA_COMPONENT_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_COMPONENT_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_COMPONENT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_COMPONENT_NAME =>
      _get_EXTRA_COMPONENT_NAME().object(const jni.JStringType());

  static final _get_EXTRA_CONTENT_ANNOTATIONS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CONTENT_ANNOTATIONS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CONTENT_ANNOTATIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CONTENT_ANNOTATIONS =>
      _get_EXTRA_CONTENT_ANNOTATIONS().object(const jni.JStringType());

  static final _get_EXTRA_CONTENT_QUERY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_CONTENT_QUERY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_CONTENT_QUERY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CONTENT_QUERY =>
      _get_EXTRA_CONTENT_QUERY().object(const jni.JStringType());

  static final _get_EXTRA_DATA_REMOVED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_DATA_REMOVED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_DATA_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DATA_REMOVED =>
      _get_EXTRA_DATA_REMOVED().object(const jni.JStringType());

  static final _get_EXTRA_DOCK_STATE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_DOCK_STATE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_DOCK_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DOCK_STATE =>
      _get_EXTRA_DOCK_STATE().object(const jni.JStringType());

  /// from: static public final int EXTRA_DOCK_STATE_CAR
  static const EXTRA_DOCK_STATE_CAR = 2;

  /// from: static public final int EXTRA_DOCK_STATE_DESK
  static const EXTRA_DOCK_STATE_DESK = 1;

  /// from: static public final int EXTRA_DOCK_STATE_HE_DESK
  static const EXTRA_DOCK_STATE_HE_DESK = 4;

  /// from: static public final int EXTRA_DOCK_STATE_LE_DESK
  static const EXTRA_DOCK_STATE_LE_DESK = 3;

  /// from: static public final int EXTRA_DOCK_STATE_UNDOCKED
  static const EXTRA_DOCK_STATE_UNDOCKED = 0;
  static final _get_EXTRA_DONT_KILL_APP =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_DONT_KILL_APP")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_DONT_KILL_APP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DONT_KILL_APP =>
      _get_EXTRA_DONT_KILL_APP().object(const jni.JStringType());

  static final _get_EXTRA_DURATION_MILLIS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_DURATION_MILLIS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_DURATION_MILLIS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DURATION_MILLIS =>
      _get_EXTRA_DURATION_MILLIS().object(const jni.JStringType());

  static final _get_EXTRA_EMAIL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_EMAIL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_EMAIL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_EMAIL =>
      _get_EXTRA_EMAIL().object(const jni.JStringType());

  static final _get_EXTRA_END_TIME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_END_TIME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_END_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_END_TIME =>
      _get_EXTRA_END_TIME().object(const jni.JStringType());

  static final _get_EXTRA_EXCLUDE_COMPONENTS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_EXCLUDE_COMPONENTS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_EXCLUDE_COMPONENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_EXCLUDE_COMPONENTS =>
      _get_EXTRA_EXCLUDE_COMPONENTS().object(const jni.JStringType());

  static final _get_EXTRA_FROM_STORAGE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_FROM_STORAGE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_FROM_STORAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_FROM_STORAGE =>
      _get_EXTRA_FROM_STORAGE().object(const jni.JStringType());

  static final _get_EXTRA_HTML_TEXT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_HTML_TEXT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_HTML_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_HTML_TEXT =>
      _get_EXTRA_HTML_TEXT().object(const jni.JStringType());

  static final _get_EXTRA_INDEX =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_INDEX")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_INDEX
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INDEX =>
      _get_EXTRA_INDEX().object(const jni.JStringType());

  static final _get_EXTRA_INITIAL_INTENTS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_INITIAL_INTENTS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_INITIAL_INTENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INITIAL_INTENTS =>
      _get_EXTRA_INITIAL_INTENTS().object(const jni.JStringType());

  static final _get_EXTRA_INSTALLER_PACKAGE_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_INSTALLER_PACKAGE_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_INSTALLER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INSTALLER_PACKAGE_NAME =>
      _get_EXTRA_INSTALLER_PACKAGE_NAME().object(const jni.JStringType());

  static final _get_EXTRA_INTENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_INTENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INTENT =>
      _get_EXTRA_INTENT().object(const jni.JStringType());

  static final _get_EXTRA_KEY_EVENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_KEY_EVENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_KEY_EVENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_KEY_EVENT =>
      _get_EXTRA_KEY_EVENT().object(const jni.JStringType());

  static final _get_EXTRA_LOCALE_LIST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_LOCALE_LIST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_LOCALE_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCALE_LIST =>
      _get_EXTRA_LOCALE_LIST().object(const jni.JStringType());

  static final _get_EXTRA_LOCAL_ONLY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_LOCAL_ONLY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_LOCAL_ONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCAL_ONLY =>
      _get_EXTRA_LOCAL_ONLY().object(const jni.JStringType());

  static final _get_EXTRA_LOCUS_ID =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_LOCUS_ID")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_LOCUS_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCUS_ID =>
      _get_EXTRA_LOCUS_ID().object(const jni.JStringType());

  static final _get_EXTRA_MIME_TYPES =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_MIME_TYPES")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_MIME_TYPES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MIME_TYPES =>
      _get_EXTRA_MIME_TYPES().object(const jni.JStringType());

  static final _get_EXTRA_NOT_UNKNOWN_SOURCE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_NOT_UNKNOWN_SOURCE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_NOT_UNKNOWN_SOURCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_NOT_UNKNOWN_SOURCE =>
      _get_EXTRA_NOT_UNKNOWN_SOURCE().object(const jni.JStringType());

  static final _get_EXTRA_ORIGINATING_URI =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_ORIGINATING_URI")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_ORIGINATING_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ORIGINATING_URI =>
      _get_EXTRA_ORIGINATING_URI().object(const jni.JStringType());

  static final _get_EXTRA_PACKAGE_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_PACKAGE_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PACKAGE_NAME =>
      _get_EXTRA_PACKAGE_NAME().object(const jni.JStringType());

  static final _get_EXTRA_PERMISSION_GROUP_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_PERMISSION_GROUP_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_PERMISSION_GROUP_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PERMISSION_GROUP_NAME =>
      _get_EXTRA_PERMISSION_GROUP_NAME().object(const jni.JStringType());

  static final _get_EXTRA_PHONE_NUMBER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_PHONE_NUMBER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_PHONE_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PHONE_NUMBER =>
      _get_EXTRA_PHONE_NUMBER().object(const jni.JStringType());

  static final _get_EXTRA_PROCESS_TEXT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_PROCESS_TEXT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_PROCESS_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PROCESS_TEXT =>
      _get_EXTRA_PROCESS_TEXT().object(const jni.JStringType());

  static final _get_EXTRA_PROCESS_TEXT_READONLY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_PROCESS_TEXT_READONLY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_PROCESS_TEXT_READONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PROCESS_TEXT_READONLY =>
      _get_EXTRA_PROCESS_TEXT_READONLY().object(const jni.JStringType());

  static final _get_EXTRA_QUICK_VIEW_FEATURES =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_QUICK_VIEW_FEATURES")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_QUICK_VIEW_FEATURES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_QUICK_VIEW_FEATURES =>
      _get_EXTRA_QUICK_VIEW_FEATURES().object(const jni.JStringType());

  static final _get_EXTRA_QUIET_MODE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_QUIET_MODE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_QUIET_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_QUIET_MODE =>
      _get_EXTRA_QUIET_MODE().object(const jni.JStringType());

  static final _get_EXTRA_REFERRER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_REFERRER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_REFERRER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REFERRER =>
      _get_EXTRA_REFERRER().object(const jni.JStringType());

  static final _get_EXTRA_REFERRER_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_REFERRER_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_REFERRER_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REFERRER_NAME =>
      _get_EXTRA_REFERRER_NAME().object(const jni.JStringType());

  static final _get_EXTRA_REMOTE_INTENT_TOKEN =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_REMOTE_INTENT_TOKEN")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_REMOTE_INTENT_TOKEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REMOTE_INTENT_TOKEN =>
      _get_EXTRA_REMOTE_INTENT_TOKEN().object(const jni.JStringType());

  static final _get_EXTRA_REPLACEMENT_EXTRAS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_REPLACEMENT_EXTRAS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_REPLACEMENT_EXTRAS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REPLACEMENT_EXTRAS =>
      _get_EXTRA_REPLACEMENT_EXTRAS().object(const jni.JStringType());

  static final _get_EXTRA_REPLACING =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_REPLACING")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_REPLACING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REPLACING =>
      _get_EXTRA_REPLACING().object(const jni.JStringType());

  static final _get_EXTRA_RESTRICTIONS_BUNDLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_RESTRICTIONS_BUNDLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_BUNDLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_BUNDLE =>
      _get_EXTRA_RESTRICTIONS_BUNDLE().object(const jni.JStringType());

  static final _get_EXTRA_RESTRICTIONS_INTENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_RESTRICTIONS_INTENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_INTENT =>
      _get_EXTRA_RESTRICTIONS_INTENT().object(const jni.JStringType());

  static final _get_EXTRA_RESTRICTIONS_LIST =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_RESTRICTIONS_LIST")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_LIST =>
      _get_EXTRA_RESTRICTIONS_LIST().object(const jni.JStringType());

  static final _get_EXTRA_RESULT_RECEIVER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_RESULT_RECEIVER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_RESULT_RECEIVER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESULT_RECEIVER =>
      _get_EXTRA_RESULT_RECEIVER().object(const jni.JStringType());

  static final _get_EXTRA_RETURN_RESULT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_RETURN_RESULT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_RETURN_RESULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RETURN_RESULT =>
      _get_EXTRA_RETURN_RESULT().object(const jni.JStringType());

  static final _get_EXTRA_SHORTCUT_ICON =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SHORTCUT_ICON")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ICON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ICON =>
      _get_EXTRA_SHORTCUT_ICON().object(const jni.JStringType());

  static final _get_EXTRA_SHORTCUT_ICON_RESOURCE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SHORTCUT_ICON_RESOURCE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ICON_RESOURCE =>
      _get_EXTRA_SHORTCUT_ICON_RESOURCE().object(const jni.JStringType());

  static final _get_EXTRA_SHORTCUT_ID =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SHORTCUT_ID")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ID =>
      _get_EXTRA_SHORTCUT_ID().object(const jni.JStringType());

  static final _get_EXTRA_SHORTCUT_INTENT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SHORTCUT_INTENT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SHORTCUT_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_INTENT =>
      _get_EXTRA_SHORTCUT_INTENT().object(const jni.JStringType());

  static final _get_EXTRA_SHORTCUT_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SHORTCUT_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SHORTCUT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_NAME =>
      _get_EXTRA_SHORTCUT_NAME().object(const jni.JStringType());

  static final _get_EXTRA_SHUTDOWN_USERSPACE_ONLY =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SHUTDOWN_USERSPACE_ONLY")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHUTDOWN_USERSPACE_ONLY =>
      _get_EXTRA_SHUTDOWN_USERSPACE_ONLY().object(const jni.JStringType());

  static final _get_EXTRA_SPLIT_NAME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SPLIT_NAME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SPLIT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SPLIT_NAME =>
      _get_EXTRA_SPLIT_NAME().object(const jni.JStringType());

  static final _get_EXTRA_START_TIME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_START_TIME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_START_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_START_TIME =>
      _get_EXTRA_START_TIME().object(const jni.JStringType());

  static final _get_EXTRA_STREAM =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_STREAM")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_STREAM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_STREAM =>
      _get_EXTRA_STREAM().object(const jni.JStringType());

  static final _get_EXTRA_SUBJECT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SUBJECT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SUBJECT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SUBJECT =>
      _get_EXTRA_SUBJECT().object(const jni.JStringType());

  static final _get_EXTRA_SUSPENDED_PACKAGE_EXTRAS =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_SUSPENDED_PACKAGE_EXTRAS")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_SUSPENDED_PACKAGE_EXTRAS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SUSPENDED_PACKAGE_EXTRAS =>
      _get_EXTRA_SUSPENDED_PACKAGE_EXTRAS().object(const jni.JStringType());

  static final _get_EXTRA_TEMPLATE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_TEMPLATE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_TEMPLATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TEMPLATE =>
      _get_EXTRA_TEMPLATE().object(const jni.JStringType());

  static final _get_EXTRA_TEXT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_TEXT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TEXT =>
      _get_EXTRA_TEXT().object(const jni.JStringType());

  static final _get_EXTRA_TIME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_TIME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TIME =>
      _get_EXTRA_TIME().object(const jni.JStringType());

  static final _get_EXTRA_TIMEZONE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_TIMEZONE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_TIMEZONE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TIMEZONE =>
      _get_EXTRA_TIMEZONE().object(const jni.JStringType());

  static final _get_EXTRA_TITLE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_TITLE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_TITLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TITLE =>
      _get_EXTRA_TITLE().object(const jni.JStringType());

  static final _get_EXTRA_UID =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_UID")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_UID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_UID =>
      _get_EXTRA_UID().object(const jni.JStringType());

  static final _get_EXTRA_USER =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_USER")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_USER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_USER =>
      _get_EXTRA_USER().object(const jni.JStringType());

  static final _get_EXTRA_USER_INITIATED =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__EXTRA_USER_INITIATED")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String EXTRA_USER_INITIATED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_USER_INITIATED =>
      _get_EXTRA_USER_INITIATED().object(const jni.JStringType());

  /// from: static public final int FILL_IN_ACTION
  static const FILL_IN_ACTION = 1;

  /// from: static public final int FILL_IN_CATEGORIES
  static const FILL_IN_CATEGORIES = 4;

  /// from: static public final int FILL_IN_CLIP_DATA
  static const FILL_IN_CLIP_DATA = 128;

  /// from: static public final int FILL_IN_COMPONENT
  static const FILL_IN_COMPONENT = 8;

  /// from: static public final int FILL_IN_DATA
  static const FILL_IN_DATA = 2;

  /// from: static public final int FILL_IN_IDENTIFIER
  static const FILL_IN_IDENTIFIER = 256;

  /// from: static public final int FILL_IN_PACKAGE
  static const FILL_IN_PACKAGE = 16;

  /// from: static public final int FILL_IN_SELECTOR
  static const FILL_IN_SELECTOR = 64;

  /// from: static public final int FILL_IN_SOURCE_BOUNDS
  static const FILL_IN_SOURCE_BOUNDS = 32;

  /// from: static public final int FLAG_ACTIVITY_BROUGHT_TO_FRONT
  static const FLAG_ACTIVITY_BROUGHT_TO_FRONT = 4194304;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_TASK
  static const FLAG_ACTIVITY_CLEAR_TASK = 32768;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_TOP
  static const FLAG_ACTIVITY_CLEAR_TOP = 67108864;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET
  static const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 524288;

  /// from: static public final int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
  static const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 8388608;

  /// from: static public final int FLAG_ACTIVITY_FORWARD_RESULT
  static const FLAG_ACTIVITY_FORWARD_RESULT = 33554432;

  /// from: static public final int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY
  static const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 1048576;

  /// from: static public final int FLAG_ACTIVITY_LAUNCH_ADJACENT
  static const FLAG_ACTIVITY_LAUNCH_ADJACENT = 4096;

  /// from: static public final int FLAG_ACTIVITY_MATCH_EXTERNAL
  static const FLAG_ACTIVITY_MATCH_EXTERNAL = 2048;

  /// from: static public final int FLAG_ACTIVITY_MULTIPLE_TASK
  static const FLAG_ACTIVITY_MULTIPLE_TASK = 134217728;

  /// from: static public final int FLAG_ACTIVITY_NEW_DOCUMENT
  static const FLAG_ACTIVITY_NEW_DOCUMENT = 524288;

  /// from: static public final int FLAG_ACTIVITY_NEW_TASK
  static const FLAG_ACTIVITY_NEW_TASK = 268435456;

  /// from: static public final int FLAG_ACTIVITY_NO_ANIMATION
  static const FLAG_ACTIVITY_NO_ANIMATION = 65536;

  /// from: static public final int FLAG_ACTIVITY_NO_HISTORY
  static const FLAG_ACTIVITY_NO_HISTORY = 1073741824;

  /// from: static public final int FLAG_ACTIVITY_NO_USER_ACTION
  static const FLAG_ACTIVITY_NO_USER_ACTION = 262144;

  /// from: static public final int FLAG_ACTIVITY_PREVIOUS_IS_TOP
  static const FLAG_ACTIVITY_PREVIOUS_IS_TOP = 16777216;

  /// from: static public final int FLAG_ACTIVITY_REORDER_TO_FRONT
  static const FLAG_ACTIVITY_REORDER_TO_FRONT = 131072;

  /// from: static public final int FLAG_ACTIVITY_REQUIRE_DEFAULT
  static const FLAG_ACTIVITY_REQUIRE_DEFAULT = 512;

  /// from: static public final int FLAG_ACTIVITY_REQUIRE_NON_BROWSER
  static const FLAG_ACTIVITY_REQUIRE_NON_BROWSER = 1024;

  /// from: static public final int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED
  static const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 2097152;

  /// from: static public final int FLAG_ACTIVITY_RETAIN_IN_RECENTS
  static const FLAG_ACTIVITY_RETAIN_IN_RECENTS = 8192;

  /// from: static public final int FLAG_ACTIVITY_SINGLE_TOP
  static const FLAG_ACTIVITY_SINGLE_TOP = 536870912;

  /// from: static public final int FLAG_ACTIVITY_TASK_ON_HOME
  static const FLAG_ACTIVITY_TASK_ON_HOME = 16384;

  /// from: static public final int FLAG_DEBUG_LOG_RESOLUTION
  static const FLAG_DEBUG_LOG_RESOLUTION = 8;

  /// from: static public final int FLAG_DIRECT_BOOT_AUTO
  static const FLAG_DIRECT_BOOT_AUTO = 256;

  /// from: static public final int FLAG_EXCLUDE_STOPPED_PACKAGES
  static const FLAG_EXCLUDE_STOPPED_PACKAGES = 16;

  /// from: static public final int FLAG_FROM_BACKGROUND
  static const FLAG_FROM_BACKGROUND = 4;

  /// from: static public final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION
  static const FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 64;

  /// from: static public final int FLAG_GRANT_PREFIX_URI_PERMISSION
  static const FLAG_GRANT_PREFIX_URI_PERMISSION = 128;

  /// from: static public final int FLAG_GRANT_READ_URI_PERMISSION
  static const FLAG_GRANT_READ_URI_PERMISSION = 1;

  /// from: static public final int FLAG_GRANT_WRITE_URI_PERMISSION
  static const FLAG_GRANT_WRITE_URI_PERMISSION = 2;

  /// from: static public final int FLAG_INCLUDE_STOPPED_PACKAGES
  static const FLAG_INCLUDE_STOPPED_PACKAGES = 32;

  /// from: static public final int FLAG_RECEIVER_FOREGROUND
  static const FLAG_RECEIVER_FOREGROUND = 268435456;

  /// from: static public final int FLAG_RECEIVER_NO_ABORT
  static const FLAG_RECEIVER_NO_ABORT = 134217728;

  /// from: static public final int FLAG_RECEIVER_REGISTERED_ONLY
  static const FLAG_RECEIVER_REGISTERED_ONLY = 1073741824;

  /// from: static public final int FLAG_RECEIVER_REPLACE_PENDING
  static const FLAG_RECEIVER_REPLACE_PENDING = 536870912;

  /// from: static public final int FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS = 2097152;
  static final _get_METADATA_DOCK_HOME =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Intent__METADATA_DOCK_HOME")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.lang.String METADATA_DOCK_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get METADATA_DOCK_HOME =>
      _get_METADATA_DOCK_HOME().object(const jni.JStringType());

  /// from: static public final int URI_ALLOW_UNSAFE
  static const URI_ALLOW_UNSAFE = 4;

  /// from: static public final int URI_ANDROID_APP_SCHEME
  static const URI_ANDROID_APP_SCHEME = 2;

  /// from: static public final int URI_INTENT_SCHEME
  static const URI_INTENT_SCHEME = 1;
  static final _new0 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Intent__new0")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent() {
    return Intent.fromReference(_new0().reference);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Intent__new1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new1(
    Intent intent,
  ) {
    return Intent.fromReference(_new1(intent.reference.pointer).reference);
  }

  static final _new2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Intent__new2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new2(
    jni.JString string,
  ) {
    return Intent.fromReference(_new2(string.reference.pointer).reference);
  }

  static final _new3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__new3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new3(
    jni.JString string,
    jni.JObject uri,
  ) {
    return Intent.fromReference(
        _new3(string.reference.pointer, uri.reference.pointer).reference);
  }

  static final _new4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__new4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new4(
    Context context,
    jni.JObject class0,
  ) {
    return Intent.fromReference(
        _new4(context.reference.pointer, class0.reference.pointer).reference);
  }

  static final _new5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__new5")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, android.net.Uri uri, android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new5(
    jni.JString string,
    jni.JObject uri,
    Context context,
    jni.JObject class0,
  ) {
    return Intent.fromReference(_new5(
            string.reference.pointer,
            uri.reference.pointer,
            context.reference.pointer,
            class0.reference.pointer)
        .reference);
  }

  static final _createChooser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__createChooser")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent createChooser(
    Intent intent,
    jni.JObject charSequence,
  ) {
    return _createChooser(
            intent.reference.pointer, charSequence.reference.pointer)
        .object(const $IntentType());
  }

  static final _createChooser1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__createChooser1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence, android.content.IntentSender intentSender)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent createChooser1(
    Intent intent,
    jni.JObject charSequence,
    jni.JObject intentSender,
  ) {
    return _createChooser1(intent.reference.pointer,
            charSequence.reference.pointer, intentSender.reference.pointer)
        .object(const $IntentType());
  }

  static final _clone = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Intent__clone")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object clone()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject clone() {
    return _clone(reference.pointer).object(const jni.JObjectType());
  }

  static final _cloneFilter = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__cloneFilter")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent cloneFilter()
  /// The returned object must be released after use, by calling the [release] method.
  Intent cloneFilter() {
    return _cloneFilter(reference.pointer).object(const $IntentType());
  }

  static final _makeMainActivity = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__makeMainActivity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeMainActivity(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeMainActivity(
    jni.JObject componentName,
  ) {
    return _makeMainActivity(componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _makeMainSelectorActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__makeMainSelectorActivity")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeMainSelectorActivity(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeMainSelectorActivity(
    jni.JString string,
    jni.JString string1,
  ) {
    return _makeMainSelectorActivity(
            string.reference.pointer, string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _makeRestartActivityTask = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__makeRestartActivityTask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeRestartActivityTask(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeRestartActivityTask(
    jni.JObject componentName,
  ) {
    return _makeRestartActivityTask(componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _getIntent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getIntent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent getIntent(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent getIntent(
    jni.JString string,
  ) {
    return _getIntent(string.reference.pointer).object(const $IntentType());
  }

  static final _parseUri = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__parseUri")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.content.Intent parseUri(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent parseUri(
    jni.JString string,
    int i,
  ) {
    return _parseUri(string.reference.pointer, i).object(const $IntentType());
  }

  static final _getIntentOld = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getIntentOld")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent getIntentOld(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent getIntentOld(
    jni.JString string,
  ) {
    return _getIntentOld(string.reference.pointer).object(const $IntentType());
  }

  static final _getAction = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getAction")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAction()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAction() {
    return _getAction(reference.pointer).object(const jni.JStringType());
  }

  static final _getData = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Intent__getData")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri getData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getData() {
    return _getData(reference.pointer).object(const jni.JObjectType());
  }

  static final _getDataString = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getDataString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getDataString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDataString() {
    return _getDataString(reference.pointer).object(const jni.JStringType());
  }

  static final _getScheme = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getScheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getScheme() {
    return _getScheme(reference.pointer).object(const jni.JStringType());
  }

  static final _getType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Intent__getType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return _getType(reference.pointer).object(const jni.JStringType());
  }

  static final _resolveType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__resolveType")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveType(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveType(
    Context context,
  ) {
    return _resolveType(reference.pointer, context.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _resolveType1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__resolveType1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveType(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveType1(
    jni.JObject contentResolver,
  ) {
    return _resolveType1(reference.pointer, contentResolver.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _resolveTypeIfNeeded = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__resolveTypeIfNeeded")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveTypeIfNeeded(
    jni.JObject contentResolver,
  ) {
    return _resolveTypeIfNeeded(
            reference.pointer, contentResolver.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _getIdentifier = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getIdentifier")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getIdentifier()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getIdentifier() {
    return _getIdentifier(reference.pointer).object(const jni.JStringType());
  }

  static final _hasCategory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__hasCategory")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasCategory(java.lang.String string)
  bool hasCategory(
    jni.JString string,
  ) {
    return _hasCategory(reference.pointer, string.reference.pointer).boolean;
  }

  static final _getCategories = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getCategories")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set getCategories()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getCategories() {
    return _getCategories(reference.pointer)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _getSelector = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getSelector")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent getSelector()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getSelector() {
    return _getSelector(reference.pointer).object(const $IntentType());
  }

  static final _getClipData = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getClipData")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ClipData getClipData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClipData() {
    return _getClipData(reference.pointer).object(const jni.JObjectType());
  }

  static final _setExtrasClassLoader = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setExtrasClassLoader")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setExtrasClassLoader(java.lang.ClassLoader classLoader)
  void setExtrasClassLoader(
    jni.JObject classLoader,
  ) {
    _setExtrasClassLoader(reference.pointer, classLoader.reference.pointer)
        .check();
  }

  static final _hasExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__hasExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasExtra(java.lang.String string)
  bool hasExtra(
    jni.JString string,
  ) {
    return _hasExtra(reference.pointer, string.reference.pointer).boolean;
  }

  static final _hasFileDescriptors = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__hasFileDescriptors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasFileDescriptors()
  bool hasFileDescriptors() {
    return _hasFileDescriptors(reference.pointer).boolean;
  }

  static final _getBooleanExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Intent__getBooleanExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getBooleanExtra(java.lang.String string, boolean z)
  bool getBooleanExtra(
    jni.JString string,
    bool z,
  ) {
    return _getBooleanExtra(
            reference.pointer, string.reference.pointer, z ? 1 : 0)
        .boolean;
  }

  static final _getByteExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int8)>>("Intent__getByteExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public byte getByteExtra(java.lang.String string, byte b)
  int getByteExtra(
    jni.JString string,
    int b,
  ) {
    return _getByteExtra(reference.pointer, string.reference.pointer, b).byte;
  }

  static final _getShortExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int16)>>("Intent__getShortExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public short getShortExtra(java.lang.String string, short s)
  int getShortExtra(
    jni.JString string,
    int s,
  ) {
    return _getShortExtra(reference.pointer, string.reference.pointer, s).short;
  }

  static final _getCharExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint16)>>("Intent__getCharExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public char getCharExtra(java.lang.String string, char c)
  int getCharExtra(
    jni.JString string,
    int c,
  ) {
    return _getCharExtra(reference.pointer, string.reference.pointer, c).char;
  }

  static final _getIntExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__getIntExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getIntExtra(java.lang.String string, int i)
  int getIntExtra(
    jni.JString string,
    int i,
  ) {
    return _getIntExtra(reference.pointer, string.reference.pointer, i).integer;
  }

  static final _getLongExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Intent__getLongExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public long getLongExtra(java.lang.String string, long j)
  int getLongExtra(
    jni.JString string,
    int j,
  ) {
    return _getLongExtra(reference.pointer, string.reference.pointer, j).long;
  }

  static final _getFloatExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Float)>>("Intent__getFloatExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public float getFloatExtra(java.lang.String string, float f)
  double getFloatExtra(
    jni.JString string,
    double f,
  ) {
    return _getFloatExtra(reference.pointer, string.reference.pointer, f).float;
  }

  static final _getDoubleExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Double)>>("Intent__getDoubleExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public double getDoubleExtra(java.lang.String string, double d)
  double getDoubleExtra(
    jni.JString string,
    double d,
  ) {
    return _getDoubleExtra(reference.pointer, string.reference.pointer, d)
        .doubleFloat;
  }

  static final _getStringExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getStringExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getStringExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getStringExtra(
    jni.JString string,
  ) {
    return _getStringExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _getCharSequenceExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getCharSequenceExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getCharSequenceExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceExtra(
    jni.JString string,
  ) {
    return _getCharSequenceExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getParcelableExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getParcelableExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T getParcelableExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelableExtra<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableExtra(reference.pointer, string.reference.pointer)
        .object(T);
  }

  static final _getParcelableExtra1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getParcelableExtra1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public T getParcelableExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelableExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableExtra1(reference.pointer, string.reference.pointer,
            class0.reference.pointer)
        .object(T);
  }

  static final _getParcelableArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getParcelableArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getParcelableArrayExtra(
    jni.JString string,
  ) {
    return _getParcelableArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _getParcelableArrayExtra1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getParcelableArrayExtra1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object[] getParcelableArrayExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<$T> getParcelableArrayExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayExtra1(reference.pointer,
            string.reference.pointer, class0.reference.pointer)
        .object(jni.JArrayType(T));
  }

  static final _getParcelableArrayListExtra = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Intent__getParcelableArrayListExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayListExtra<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayListExtra(
            reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getParcelableArrayListExtra1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Intent__getParcelableArrayListExtra1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayListExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayListExtra1(reference.pointer,
            string.reference.pointer, class0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getSerializableExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getSerializableExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.Serializable getSerializableExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSerializableExtra(
    jni.JString string,
  ) {
    return _getSerializableExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getSerializableExtra1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getSerializableExtra1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public T getSerializableExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSerializableExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getSerializableExtra1(reference.pointer, string.reference.pointer,
            class0.reference.pointer)
        .object(T);
  }

  static final _getIntegerArrayListExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getIntegerArrayListExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getIntegerArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIntegerArrayListExtra(
    jni.JString string,
  ) {
    return _getIntegerArrayListExtra(
            reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getStringArrayListExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getStringArrayListExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getStringArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStringArrayListExtra(
    jni.JString string,
  ) {
    return _getStringArrayListExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getCharSequenceArrayListExtra = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Intent__getCharSequenceArrayListExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceArrayListExtra(
    jni.JString string,
  ) {
    return _getCharSequenceArrayListExtra(
            reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getBooleanArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getBooleanArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean[] getBooleanArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jboolean> getBooleanArrayExtra(
    jni.JString string,
  ) {
    return _getBooleanArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.jbooleanType()));
  }

  static final _getByteArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getByteArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getByteArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getByteArrayExtra(
    jni.JString string,
  ) {
    return _getByteArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _getShortArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getShortArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public short[] getShortArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jshort> getShortArrayExtra(
    jni.JString string,
  ) {
    return _getShortArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.jshortType()));
  }

  static final _getCharArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getCharArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public char[] getCharArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jchar> getCharArrayExtra(
    jni.JString string,
  ) {
    return _getCharArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.jcharType()));
  }

  static final _getIntArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getIntArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int[] getIntArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getIntArrayExtra(
    jni.JString string,
  ) {
    return _getIntArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _getLongArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getLongArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long[] getLongArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jlong> getLongArrayExtra(
    jni.JString string,
  ) {
    return _getLongArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.jlongType()));
  }

  static final _getFloatArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getFloatArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public float[] getFloatArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> getFloatArrayExtra(
    jni.JString string,
  ) {
    return _getFloatArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.jfloatType()));
  }

  static final _getDoubleArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getDoubleArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public double[] getDoubleArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jdouble> getDoubleArrayExtra(
    jni.JString string,
  ) {
    return _getDoubleArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.jdoubleType()));
  }

  static final _getStringArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getStringArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getStringArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getStringArrayExtra(
    jni.JString string,
  ) {
    return _getStringArrayExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _getCharSequenceArrayExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getCharSequenceArrayExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getCharSequenceArrayExtra(
    jni.JString string,
  ) {
    return _getCharSequenceArrayExtra(
            reference.pointer, string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _getBundleExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__getBundleExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getBundleExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBundleExtra(
    jni.JString string,
  ) {
    return _getBundleExtra(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getExtras = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getExtras")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExtras() {
    return _getExtras(reference.pointer).object(const jni.JObjectType());
  }

  static final _getFlags = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getFlags")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFlags()
  int getFlags() {
    return _getFlags(reference.pointer).integer;
  }

  static final _getPackage = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getPackage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackage() {
    return _getPackage(reference.pointer).object(const jni.JStringType());
  }

  static final _getComponent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getComponent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName getComponent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponent() {
    return _getComponent(reference.pointer).object(const jni.JObjectType());
  }

  static final _getSourceBounds = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__getSourceBounds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Rect getSourceBounds()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSourceBounds() {
    return _getSourceBounds(reference.pointer).object(const jni.JObjectType());
  }

  static final _resolveActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__resolveActivity")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName resolveActivity(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivity(
    jni.JObject packageManager,
  ) {
    return _resolveActivity(reference.pointer, packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _resolveActivityInfo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Intent__resolveActivityInfo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager packageManager, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivityInfo(
    jni.JObject packageManager,
    int i,
  ) {
    return _resolveActivityInfo(
            reference.pointer, packageManager.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _setAction = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setAction")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setAction(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setAction(
    jni.JString string,
  ) {
    return _setAction(reference.pointer, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _setData = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setData")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setData(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setData(
    jni.JObject uri,
  ) {
    return _setData(reference.pointer, uri.reference.pointer)
        .object(const $IntentType());
  }

  static final _setDataAndNormalize = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setDataAndNormalize")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndNormalize(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndNormalize(
    jni.JObject uri,
  ) {
    return _setDataAndNormalize(reference.pointer, uri.reference.pointer)
        .object(const $IntentType());
  }

  static final _setType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setType")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setType(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setType(
    jni.JString string,
  ) {
    return _setType(reference.pointer, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _setTypeAndNormalize = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setTypeAndNormalize")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setTypeAndNormalize(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setTypeAndNormalize(
    jni.JString string,
  ) {
    return _setTypeAndNormalize(reference.pointer, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _setDataAndType = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setDataAndType")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndType(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndType(
    jni.JObject uri,
    jni.JString string,
  ) {
    return _setDataAndType(
            reference.pointer, uri.reference.pointer, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _setDataAndTypeAndNormalize = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setDataAndTypeAndNormalize")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndTypeAndNormalize(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndTypeAndNormalize(
    jni.JObject uri,
    jni.JString string,
  ) {
    return _setDataAndTypeAndNormalize(
            reference.pointer, uri.reference.pointer, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _setIdentifier = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setIdentifier")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setIdentifier(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setIdentifier(
    jni.JString string,
  ) {
    return _setIdentifier(reference.pointer, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _addCategory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__addCategory")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent addCategory(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent addCategory(
    jni.JString string,
  ) {
    return _addCategory(reference.pointer, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _removeCategory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__removeCategory")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void removeCategory(java.lang.String string)
  void removeCategory(
    jni.JString string,
  ) {
    _removeCategory(reference.pointer, string.reference.pointer).check();
  }

  static final _setSelector = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setSelector")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setSelector(android.content.Intent intent)
  void setSelector(
    Intent intent,
  ) {
    _setSelector(reference.pointer, intent.reference.pointer).check();
  }

  static final _setClipData = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setClipData")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setClipData(android.content.ClipData clipData)
  void setClipData(
    jni.JObject clipData,
  ) {
    _setClipData(reference.pointer, clipData.reference.pointer).check();
  }

  static final _putExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Intent__putExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra(
    jni.JString string,
    bool z,
  ) {
    return _putExtra(reference.pointer, string.reference.pointer, z ? 1 : 0)
        .object(const $IntentType());
  }

  static final _putExtra1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int8)>>("Intent__putExtra1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, byte b)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra1(
    jni.JString string,
    int b,
  ) {
    return _putExtra1(reference.pointer, string.reference.pointer, b)
        .object(const $IntentType());
  }

  static final _putExtra2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint16)>>("Intent__putExtra2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, char c)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra2(
    jni.JString string,
    int c,
  ) {
    return _putExtra2(reference.pointer, string.reference.pointer, c)
        .object(const $IntentType());
  }

  static final _putExtra3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int16)>>("Intent__putExtra3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, short s)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra3(
    jni.JString string,
    int s,
  ) {
    return _putExtra3(reference.pointer, string.reference.pointer, s)
        .object(const $IntentType());
  }

  static final _putExtra4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__putExtra4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra4(
    jni.JString string,
    int i,
  ) {
    return _putExtra4(reference.pointer, string.reference.pointer, i)
        .object(const $IntentType());
  }

  static final _putExtra5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Intent__putExtra5")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra5(
    jni.JString string,
    int j,
  ) {
    return _putExtra5(reference.pointer, string.reference.pointer, j)
        .object(const $IntentType());
  }

  static final _putExtra6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Float)>>("Intent__putExtra6")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, float f)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra6(
    jni.JString string,
    double f,
  ) {
    return _putExtra6(reference.pointer, string.reference.pointer, f)
        .object(const $IntentType());
  }

  static final _putExtra7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Double)>>("Intent__putExtra7")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, double d)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra7(
    jni.JString string,
    double d,
  ) {
    return _putExtra7(reference.pointer, string.reference.pointer, d)
        .object(const $IntentType());
  }

  static final _putExtra8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra8")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra8(
    jni.JString string,
    jni.JString string1,
  ) {
    return _putExtra8(reference.pointer, string.reference.pointer,
            string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra9")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra9(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return _putExtra9(reference.pointer, string.reference.pointer,
            charSequence.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra10 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra10")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable parcelable)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra10(
    jni.JString string,
    jni.JObject parcelable,
  ) {
    return _putExtra10(reference.pointer, string.reference.pointer,
            parcelable.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra11 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra11")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable[] parcelables)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra11(
    jni.JString string,
    jni.JArray<jni.JObject> parcelables,
  ) {
    return _putExtra11(reference.pointer, string.reference.pointer,
            parcelables.reference.pointer)
        .object(const $IntentType());
  }

  static final _putParcelableArrayListExtra = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Intent__putParcelableArrayListExtra")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putParcelableArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putParcelableArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putParcelableArrayListExtra(reference.pointer,
            string.reference.pointer, arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _putIntegerArrayListExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putIntegerArrayListExtra")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putIntegerArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putIntegerArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putIntegerArrayListExtra(reference.pointer,
            string.reference.pointer, arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _putStringArrayListExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putStringArrayListExtra")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putStringArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putStringArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putStringArrayListExtra(reference.pointer, string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _putCharSequenceArrayListExtra = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Intent__putCharSequenceArrayListExtra")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putCharSequenceArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putCharSequenceArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putCharSequenceArrayListExtra(reference.pointer,
            string.reference.pointer, arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra12 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra12")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.io.Serializable serializable)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra12(
    jni.JString string,
    jni.JObject serializable,
  ) {
    return _putExtra12(reference.pointer, string.reference.pointer,
            serializable.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra13 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra13")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, boolean[] zs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra13(
    jni.JString string,
    jni.JArray<jni.jboolean> zs,
  ) {
    return _putExtra13(
            reference.pointer, string.reference.pointer, zs.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra14 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra14")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra14(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _putExtra14(
            reference.pointer, string.reference.pointer, bs.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra15 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra15")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, short[] ss)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra15(
    jni.JString string,
    jni.JArray<jni.jshort> ss,
  ) {
    return _putExtra15(
            reference.pointer, string.reference.pointer, ss.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra16 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra16")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, char[] cs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra16(
    jni.JString string,
    jni.JArray<jni.jchar> cs,
  ) {
    return _putExtra16(
            reference.pointer, string.reference.pointer, cs.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra17 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra17")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra17(
    jni.JString string,
    jni.JArray<jni.jint> is0,
  ) {
    return _putExtra17(
            reference.pointer, string.reference.pointer, is0.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra18 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra18")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, long[] js)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra18(
    jni.JString string,
    jni.JArray<jni.jlong> js,
  ) {
    return _putExtra18(
            reference.pointer, string.reference.pointer, js.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra19 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra19")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, float[] fs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra19(
    jni.JString string,
    jni.JArray<jni.jfloat> fs,
  ) {
    return _putExtra19(
            reference.pointer, string.reference.pointer, fs.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra20 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra20")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, double[] ds)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra20(
    jni.JString string,
    jni.JArray<jni.jdouble> ds,
  ) {
    return _putExtra20(
            reference.pointer, string.reference.pointer, ds.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra21 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra21")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra21(
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return _putExtra21(reference.pointer, string.reference.pointer,
            strings.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra22 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra22")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence[] charSequences)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra22(
    jni.JString string,
    jni.JArray<jni.JObject> charSequences,
  ) {
    return _putExtra22(reference.pointer, string.reference.pointer,
            charSequences.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtra23 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtra23")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra23(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _putExtra23(reference.pointer, string.reference.pointer,
            bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtras = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtras")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtras(
    Intent intent,
  ) {
    return _putExtras(reference.pointer, intent.reference.pointer)
        .object(const $IntentType());
  }

  static final _putExtras1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__putExtras1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtras(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtras1(
    jni.JObject bundle,
  ) {
    return _putExtras1(reference.pointer, bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _replaceExtras = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__replaceExtras")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent replaceExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  Intent replaceExtras(
    Intent intent,
  ) {
    return _replaceExtras(reference.pointer, intent.reference.pointer)
        .object(const $IntentType());
  }

  static final _replaceExtras1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__replaceExtras1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent replaceExtras(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent replaceExtras1(
    jni.JObject bundle,
  ) {
    return _replaceExtras1(reference.pointer, bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _removeExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__removeExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void removeExtra(java.lang.String string)
  void removeExtra(
    jni.JString string,
  ) {
    _removeExtra(reference.pointer, string.reference.pointer).check();
  }

  static final _setFlags = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__setFlags")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent setFlags(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setFlags(
    int i,
  ) {
    return _setFlags(reference.pointer, i).object(const $IntentType());
  }

  static final _addFlags = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__addFlags")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent addFlags(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent addFlags(
    int i,
  ) {
    return _addFlags(reference.pointer, i).object(const $IntentType());
  }

  static final _removeFlags = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__removeFlags")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void removeFlags(int i)
  void removeFlags(
    int i,
  ) {
    _removeFlags(reference.pointer, i).check();
  }

  static final _setPackage = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setPackage")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setPackage(
    jni.JString string,
  ) {
    return _setPackage(reference.pointer, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _setComponent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setComponent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setComponent(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setComponent(
    jni.JObject componentName,
  ) {
    return _setComponent(reference.pointer, componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _setClassName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setClassName")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClassName(android.content.Context context, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClassName(
    Context context,
    jni.JString string,
  ) {
    return _setClassName(reference.pointer, context.reference.pointer,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _setClassName1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setClassName1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClassName(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClassName1(
    jni.JString string,
    jni.JString string1,
  ) {
    return _setClassName1(reference.pointer, string.reference.pointer,
            string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _setClass = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setClass")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClass(android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClass(
    Context context,
    jni.JObject class0,
  ) {
    return _setClass(reference.pointer, context.reference.pointer,
            class0.reference.pointer)
        .object(const $IntentType());
  }

  static final _setSourceBounds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__setSourceBounds")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setSourceBounds(android.graphics.Rect rect)
  void setSourceBounds(
    jni.JObject rect,
  ) {
    _setSourceBounds(reference.pointer, rect.reference.pointer).check();
  }

  static final _fillIn = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__fillIn")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public int fillIn(android.content.Intent intent, int i)
  int fillIn(
    Intent intent,
    int i,
  ) {
    return _fillIn(reference.pointer, intent.reference.pointer, i).integer;
  }

  static final _filterEquals = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__filterEquals")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean filterEquals(android.content.Intent intent)
  bool filterEquals(
    Intent intent,
  ) {
    return _filterEquals(reference.pointer, intent.reference.pointer).boolean;
  }

  static final _filterHashCode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__filterHashCode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int filterHashCode()
  int filterHashCode() {
    return _filterHashCode(reference.pointer).integer;
  }

  static final _toString1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer).object(const jni.JStringType());
  }

  static final _toURI = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Intent__toURI")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toURI()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toURI() {
    return _toURI(reference.pointer).object(const jni.JStringType());
  }

  static final _toUri = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__toUri")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String toUri(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toUri(
    int i,
  ) {
    return _toUri(reference.pointer, i).object(const jni.JStringType());
  }

  static final _describeContents = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__describeContents")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(reference.pointer).integer;
  }

  static final _writeToParcel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Intent__writeToParcel")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, parcel.reference.pointer, i).check();
  }

  static final _readFromParcel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__readFromParcel")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readFromParcel(android.os.Parcel parcel)
  void readFromParcel(
    jni.JObject parcel,
  ) {
    _readFromParcel(reference.pointer, parcel.reference.pointer).check();
  }

  static final _parseIntent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Intent__parseIntent")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent parseIntent(android.content.res.Resources resources, org.xmlpull.v1.XmlPullParser xmlPullParser, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent parseIntent(
    jni.JObject resources,
    jni.JObject xmlPullParser,
    jni.JObject attributeSet,
  ) {
    return _parseIntent(resources.reference.pointer,
            xmlPullParser.reference.pointer, attributeSet.reference.pointer)
        .object(const $IntentType());
  }

  static final _normalizeMimeType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Intent__normalizeMimeType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String normalizeMimeType(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString normalizeMimeType(
    jni.JString string,
  ) {
    return _normalizeMimeType(string.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $IntentType extends jni.JObjType<Intent> {
  const $IntentType();

  @override
  String get signature => r"Landroid/content/Intent;";

  @override
  Intent fromReference(jni.JReference reference) =>
      Intent.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentType) && other is $IntentType;
  }
}

/// from: android.app.Activity
class Activity extends jni.JObject {
  @override
  late final jni.JObjType<Activity> $type = type;

  Activity.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityType();

  /// from: static public final int DEFAULT_KEYS_DIALER
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: static public final int DEFAULT_KEYS_DISABLE
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: static public final int DEFAULT_KEYS_SEARCH_GLOBAL
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: static public final int DEFAULT_KEYS_SEARCH_LOCAL
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: static public final int DEFAULT_KEYS_SHORTCUT
  static const DEFAULT_KEYS_SHORTCUT = 2;
  static final _get_FOCUSED_STATE_SET =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Activity__FOCUSED_STATE_SET")
          .asFunction<jni.JniResult Function()>();

  /// from: static protected final int[] FOCUSED_STATE_SET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jint> get FOCUSED_STATE_SET =>
      _get_FOCUSED_STATE_SET().object(const jni.JArrayType(jni.jintType()));

  /// from: static public final int RESULT_CANCELED
  static const RESULT_CANCELED = 0;

  /// from: static public final int RESULT_FIRST_USER
  static const RESULT_FIRST_USER = 1;

  /// from: static public final int RESULT_OK
  static const RESULT_OK = -1;
  static final _new0 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Activity__new0")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromReference(_new0().reference);
  }

  static final _getIntent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getIntent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getIntent() {
    return _getIntent(reference.pointer).object(const $IntentType());
  }

  static final _setIntent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setIntent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setIntent(android.content.Intent intent)
  void setIntent(
    Intent intent,
  ) {
    _setIntent(reference.pointer, intent.reference.pointer).check();
  }

  static final _setLocusContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setLocusContext")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)
  void setLocusContext(
    jni.JObject locusId,
    jni.JObject bundle,
  ) {
    _setLocusContext(reference.pointer, locusId.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _getApplication = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getApplication")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.app.Application getApplication()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplication() {
    return _getApplication(reference.pointer).object(const jni.JObjectType());
  }

  static final _isChild = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isChild")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isChild()
  bool isChild() {
    return _isChild(reference.pointer).boolean;
  }

  static final _getParent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getParent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.app.Activity getParent()
  /// The returned object must be released after use, by calling the [release] method.
  Activity getParent() {
    return _getParent(reference.pointer).object(const $ActivityType());
  }

  static final _getWindowManager = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getWindowManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.WindowManager getWindowManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindowManager() {
    return _getWindowManager(reference.pointer).object(const jni.JObjectType());
  }

  static final _getWindow = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getWindow")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.Window getWindow()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindow() {
    return _getWindow(reference.pointer).object(const jni.JObjectType());
  }

  static final _getLoaderManager = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getLoaderManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.LoaderManager getLoaderManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLoaderManager() {
    return _getLoaderManager(reference.pointer).object(const jni.JObjectType());
  }

  static final _getCurrentFocus = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getCurrentFocus")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View getCurrentFocus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCurrentFocus() {
    return _getCurrentFocus(reference.pointer).object(const jni.JObjectType());
  }

  static final _attachBaseContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__attachBaseContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void attachBaseContext(android.content.Context context)
  void attachBaseContext(
    Context context,
  ) {
    _attachBaseContext(reference.pointer, context.reference.pointer).check();
  }

  static final _registerActivityLifecycleCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__registerActivityLifecycleCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void registerActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    _registerActivityLifecycleCallbacks(
            reference.pointer, activityLifecycleCallbacks.reference.pointer)
        .check();
  }

  static final _unregisterActivityLifecycleCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__unregisterActivityLifecycleCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void unregisterActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    _unregisterActivityLifecycleCallbacks(
            reference.pointer, activityLifecycleCallbacks.reference.pointer)
        .check();
  }

  static final _registerComponentCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__registerComponentCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _registerComponentCallbacks(
            reference.pointer, componentCallbacks.reference.pointer)
        .check();
  }

  static final _unregisterComponentCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__unregisterComponentCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _unregisterComponentCallbacks(
            reference.pointer, componentCallbacks.reference.pointer)
        .check();
  }

  static final _onCreate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onCreate(android.os.Bundle bundle)
  void onCreate(
    jni.JObject bundle,
  ) {
    _onCreate(reference.pointer, bundle.reference.pointer).check();
  }

  static final _getSplashScreen = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getSplashScreen")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.window.SplashScreen getSplashScreen()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSplashScreen() {
    return _getSplashScreen(reference.pointer).object(const jni.JObjectType());
  }

  static final _onCreate1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreate1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onCreate1(reference.pointer, bundle.reference.pointer,
            persistableBundle.reference.pointer)
        .check();
  }

  static final _onRestoreInstanceState = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onRestoreInstanceState")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onRestoreInstanceState(android.os.Bundle bundle)
  void onRestoreInstanceState(
    jni.JObject bundle,
  ) {
    _onRestoreInstanceState(reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _onRestoreInstanceState1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onRestoreInstanceState1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onRestoreInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onRestoreInstanceState1(reference.pointer, bundle.reference.pointer,
            persistableBundle.reference.pointer)
        .check();
  }

  static final _onPostCreate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPostCreate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPostCreate(android.os.Bundle bundle)
  void onPostCreate(
    jni.JObject bundle,
  ) {
    _onPostCreate(reference.pointer, bundle.reference.pointer).check();
  }

  static final _onPostCreate1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPostCreate1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onPostCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onPostCreate1(reference.pointer, bundle.reference.pointer,
            persistableBundle.reference.pointer)
        .check();
  }

  static final _onStart = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onStart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onStart()
  void onStart() {
    _onStart(reference.pointer).check();
  }

  static final _onRestart = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onRestart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onRestart()
  void onRestart() {
    _onRestart(reference.pointer).check();
  }

  static final _onStateNotSaved = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onStateNotSaved")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onStateNotSaved()
  void onStateNotSaved() {
    _onStateNotSaved(reference.pointer).check();
  }

  static final _onResume = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onResume")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onResume()
  void onResume() {
    _onResume(reference.pointer).check();
  }

  static final _onPostResume = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onPostResume")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPostResume()
  void onPostResume() {
    _onPostResume(reference.pointer).check();
  }

  static final _onTopResumedActivityChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__onTopResumedActivityChanged")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onTopResumedActivityChanged(boolean z)
  void onTopResumedActivityChanged(
    bool z,
  ) {
    _onTopResumedActivityChanged(reference.pointer, z ? 1 : 0).check();
  }

  static final _isVoiceInteraction = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isVoiceInteraction")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isVoiceInteraction()
  bool isVoiceInteraction() {
    return _isVoiceInteraction(reference.pointer).boolean;
  }

  static final _isVoiceInteractionRoot = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isVoiceInteractionRoot")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isVoiceInteractionRoot()
  bool isVoiceInteractionRoot() {
    return _isVoiceInteractionRoot(reference.pointer).boolean;
  }

  static final _getVoiceInteractor = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getVoiceInteractor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.VoiceInteractor getVoiceInteractor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getVoiceInteractor() {
    return _getVoiceInteractor(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _isLocalVoiceInteractionSupported = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isLocalVoiceInteractionSupported")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isLocalVoiceInteractionSupported()
  bool isLocalVoiceInteractionSupported() {
    return _isLocalVoiceInteractionSupported(reference.pointer).boolean;
  }

  static final _startLocalVoiceInteraction = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__startLocalVoiceInteraction")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startLocalVoiceInteraction(android.os.Bundle bundle)
  void startLocalVoiceInteraction(
    jni.JObject bundle,
  ) {
    _startLocalVoiceInteraction(reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _onLocalVoiceInteractionStarted = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onLocalVoiceInteractionStarted")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onLocalVoiceInteractionStarted()
  void onLocalVoiceInteractionStarted() {
    _onLocalVoiceInteractionStarted(reference.pointer).check();
  }

  static final _onLocalVoiceInteractionStopped = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onLocalVoiceInteractionStopped")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onLocalVoiceInteractionStopped()
  void onLocalVoiceInteractionStopped() {
    _onLocalVoiceInteractionStopped(reference.pointer).check();
  }

  static final _stopLocalVoiceInteraction = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__stopLocalVoiceInteraction")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void stopLocalVoiceInteraction()
  void stopLocalVoiceInteraction() {
    _stopLocalVoiceInteraction(reference.pointer).check();
  }

  static final _onNewIntent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onNewIntent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onNewIntent(android.content.Intent intent)
  void onNewIntent(
    Intent intent,
  ) {
    _onNewIntent(reference.pointer, intent.reference.pointer).check();
  }

  static final _onSaveInstanceState = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onSaveInstanceState")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onSaveInstanceState(android.os.Bundle bundle)
  void onSaveInstanceState(
    jni.JObject bundle,
  ) {
    _onSaveInstanceState(reference.pointer, bundle.reference.pointer).check();
  }

  static final _onSaveInstanceState1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onSaveInstanceState1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onSaveInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onSaveInstanceState1(reference.pointer, bundle.reference.pointer,
            persistableBundle.reference.pointer)
        .check();
  }

  static final _onPause = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onPause")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPause()
  void onPause() {
    _onPause(reference.pointer).check();
  }

  static final _onUserLeaveHint = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onUserLeaveHint")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onUserLeaveHint()
  void onUserLeaveHint() {
    _onUserLeaveHint(reference.pointer).check();
  }

  static final _onCreateThumbnail = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateThumbnail")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)
  bool onCreateThumbnail(
    jni.JObject bitmap,
    jni.JObject canvas,
  ) {
    return _onCreateThumbnail(reference.pointer, bitmap.reference.pointer,
            canvas.reference.pointer)
        .boolean;
  }

  static final _onCreateDescription = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onCreateDescription")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence onCreateDescription()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDescription() {
    return _onCreateDescription(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _onProvideAssistData = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onProvideAssistData")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onProvideAssistData(android.os.Bundle bundle)
  void onProvideAssistData(
    jni.JObject bundle,
  ) {
    _onProvideAssistData(reference.pointer, bundle.reference.pointer).check();
  }

  static final _onProvideAssistContent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onProvideAssistContent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onProvideAssistContent(android.app.assist.AssistContent assistContent)
  void onProvideAssistContent(
    jni.JObject assistContent,
  ) {
    _onProvideAssistContent(reference.pointer, assistContent.reference.pointer)
        .check();
  }

  static final _onGetDirectActions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onGetDirectActions")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onGetDirectActions(
    jni.JObject cancellationSignal,
    jni.JObject consumer,
  ) {
    _onGetDirectActions(reference.pointer, cancellationSignal.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _onPerformDirectAction = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPerformDirectAction")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onPerformDirectAction(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject cancellationSignal,
    jni.JObject consumer,
  ) {
    _onPerformDirectAction(
            reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _requestShowKeyboardShortcuts = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__requestShowKeyboardShortcuts")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final void requestShowKeyboardShortcuts()
  void requestShowKeyboardShortcuts() {
    _requestShowKeyboardShortcuts(reference.pointer).check();
  }

  static final _dismissKeyboardShortcutsHelper = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__dismissKeyboardShortcutsHelper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final void dismissKeyboardShortcutsHelper()
  void dismissKeyboardShortcutsHelper() {
    _dismissKeyboardShortcutsHelper(reference.pointer).check();
  }

  static final _onProvideKeyboardShortcuts = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onProvideKeyboardShortcuts")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)
  void onProvideKeyboardShortcuts(
    jni.JList<jni.JObject> list,
    jni.JObject menu,
    int i,
  ) {
    _onProvideKeyboardShortcuts(reference.pointer, list.reference.pointer,
            menu.reference.pointer, i)
        .check();
  }

  static final _showAssist = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__showAssist")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean showAssist(android.os.Bundle bundle)
  bool showAssist(
    jni.JObject bundle,
  ) {
    return _showAssist(reference.pointer, bundle.reference.pointer).boolean;
  }

  static final _onStop = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onStop")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onStop()
  void onStop() {
    _onStop(reference.pointer).check();
  }

  static final _onDestroy = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onDestroy")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onDestroy()
  void onDestroy() {
    _onDestroy(reference.pointer).check();
  }

  static final _reportFullyDrawn = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__reportFullyDrawn")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void reportFullyDrawn()
  void reportFullyDrawn() {
    _reportFullyDrawn(reference.pointer).check();
  }

  static final _onMultiWindowModeChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
                  ffi.Pointer<ffi.Void>)>>("Activity__onMultiWindowModeChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)
  void onMultiWindowModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    _onMultiWindowModeChanged(
            reference.pointer, z ? 1 : 0, configuration.reference.pointer)
        .check();
  }

  static final _onMultiWindowModeChanged1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__onMultiWindowModeChanged1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onMultiWindowModeChanged(boolean z)
  void onMultiWindowModeChanged1(
    bool z,
  ) {
    _onMultiWindowModeChanged1(reference.pointer, z ? 1 : 0).check();
  }

  static final _isInMultiWindowMode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isInMultiWindowMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isInMultiWindowMode()
  bool isInMultiWindowMode() {
    return _isInMultiWindowMode(reference.pointer).boolean;
  }

  static final _onPictureInPictureModeChanged = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
                      ffi.Pointer<ffi.Void>)>>(
          "Activity__onPictureInPictureModeChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)
  void onPictureInPictureModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    _onPictureInPictureModeChanged(
            reference.pointer, z ? 1 : 0, configuration.reference.pointer)
        .check();
  }

  static final _onPictureInPictureUiStateChanged = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onPictureInPictureUiStateChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)
  void onPictureInPictureUiStateChanged(
    jni.JObject pictureInPictureUiState,
  ) {
    _onPictureInPictureUiStateChanged(
            reference.pointer, pictureInPictureUiState.reference.pointer)
        .check();
  }

  static final _onPictureInPictureModeChanged1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__onPictureInPictureModeChanged1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onPictureInPictureModeChanged(boolean z)
  void onPictureInPictureModeChanged1(
    bool z,
  ) {
    _onPictureInPictureModeChanged1(reference.pointer, z ? 1 : 0).check();
  }

  static final _isInPictureInPictureMode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isInPictureInPictureMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isInPictureInPictureMode()
  bool isInPictureInPictureMode() {
    return _isInPictureInPictureMode(reference.pointer).boolean;
  }

  static final _enterPictureInPictureMode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__enterPictureInPictureMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void enterPictureInPictureMode()
  void enterPictureInPictureMode() {
    _enterPictureInPictureMode(reference.pointer).check();
  }

  static final _enterPictureInPictureMode1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__enterPictureInPictureMode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)
  bool enterPictureInPictureMode1(
    jni.JObject pictureInPictureParams,
  ) {
    return _enterPictureInPictureMode1(
            reference.pointer, pictureInPictureParams.reference.pointer)
        .boolean;
  }

  static final _setPictureInPictureParams = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__setPictureInPictureParams")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)
  void setPictureInPictureParams(
    jni.JObject pictureInPictureParams,
  ) {
    _setPictureInPictureParams(
            reference.pointer, pictureInPictureParams.reference.pointer)
        .check();
  }

  static final _getMaxNumPictureInPictureActions = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getMaxNumPictureInPictureActions")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMaxNumPictureInPictureActions()
  int getMaxNumPictureInPictureActions() {
    return _getMaxNumPictureInPictureActions(reference.pointer).integer;
  }

  static final _onPictureInPictureRequested = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onPictureInPictureRequested")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPictureInPictureRequested()
  bool onPictureInPictureRequested() {
    return _onPictureInPictureRequested(reference.pointer).boolean;
  }

  static final _setShouldDockBigOverlays = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setShouldDockBigOverlays")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setShouldDockBigOverlays(boolean z)
  void setShouldDockBigOverlays(
    bool z,
  ) {
    _setShouldDockBigOverlays(reference.pointer, z ? 1 : 0).check();
  }

  static final _shouldDockBigOverlays = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__shouldDockBigOverlays")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldDockBigOverlays()
  bool shouldDockBigOverlays() {
    return _shouldDockBigOverlays(reference.pointer).boolean;
  }

  static final _onConfigurationChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onConfigurationChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onConfigurationChanged(android.content.res.Configuration configuration)
  void onConfigurationChanged(
    jni.JObject configuration,
  ) {
    _onConfigurationChanged(reference.pointer, configuration.reference.pointer)
        .check();
  }

  static final _getChangingConfigurations = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getChangingConfigurations")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() {
    return _getChangingConfigurations(reference.pointer).integer;
  }

  static final _getLastNonConfigurationInstance = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getLastNonConfigurationInstance")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getLastNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLastNonConfigurationInstance() {
    return _getLastNonConfigurationInstance(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _onRetainNonConfigurationInstance = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onRetainNonConfigurationInstance")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object onRetainNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onRetainNonConfigurationInstance() {
    return _onRetainNonConfigurationInstance(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _onLowMemory = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onLowMemory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onLowMemory()
  void onLowMemory() {
    _onLowMemory(reference.pointer).check();
  }

  static final _onTrimMemory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__onTrimMemory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onTrimMemory(int i)
  void onTrimMemory(
    int i,
  ) {
    _onTrimMemory(reference.pointer, i).check();
  }

  static final _getFragmentManager = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getFragmentManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.FragmentManager getFragmentManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFragmentManager() {
    return _getFragmentManager(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _onAttachFragment = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onAttachFragment")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onAttachFragment(android.app.Fragment fragment)
  void onAttachFragment(
    jni.JObject fragment,
  ) {
    _onAttachFragment(reference.pointer, fragment.reference.pointer).check();
  }

  static final _managedQuery = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__managedQuery")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject managedQuery(
    jni.JObject uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return _managedQuery(
            reference.pointer,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _startManagingCursor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startManagingCursor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startManagingCursor(android.database.Cursor cursor)
  void startManagingCursor(
    jni.JObject cursor,
  ) {
    _startManagingCursor(reference.pointer, cursor.reference.pointer).check();
  }

  static final _stopManagingCursor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__stopManagingCursor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void stopManagingCursor(android.database.Cursor cursor)
  void stopManagingCursor(
    jni.JObject cursor,
  ) {
    _stopManagingCursor(reference.pointer, cursor.reference.pointer).check();
  }

  static final _findViewById = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__findViewById")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public T findViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T findViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return _findViewById(reference.pointer, i).object(T);
  }

  static final _requireViewById = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__requireViewById")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final T requireViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T requireViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return _requireViewById(reference.pointer, i).object(T);
  }

  static final _getActionBar = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getActionBar")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.ActionBar getActionBar()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActionBar() {
    return _getActionBar(reference.pointer).object(const jni.JObjectType());
  }

  static final _setActionBar = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setActionBar")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setActionBar(android.widget.Toolbar toolbar)
  void setActionBar(
    jni.JObject toolbar,
  ) {
    _setActionBar(reference.pointer, toolbar.reference.pointer).check();
  }

  static final _setContentView = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setContentView")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setContentView(int i)
  void setContentView(
    int i,
  ) {
    _setContentView(reference.pointer, i).check();
  }

  static final _setContentView1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setContentView1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentView(android.view.View view)
  void setContentView1(
    jni.JObject view,
  ) {
    _setContentView1(reference.pointer, view.reference.pointer).check();
  }

  static final _setContentView2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setContentView2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void setContentView2(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    _setContentView2(reference.pointer, view.reference.pointer,
            layoutParams.reference.pointer)
        .check();
  }

  static final _addContentView = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__addContentView")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void addContentView(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    _addContentView(reference.pointer, view.reference.pointer,
            layoutParams.reference.pointer)
        .check();
  }

  static final _getContentTransitionManager = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getContentTransitionManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.transition.TransitionManager getContentTransitionManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentTransitionManager() {
    return _getContentTransitionManager(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _setContentTransitionManager = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__setContentTransitionManager")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentTransitionManager(android.transition.TransitionManager transitionManager)
  void setContentTransitionManager(
    jni.JObject transitionManager,
  ) {
    _setContentTransitionManager(
            reference.pointer, transitionManager.reference.pointer)
        .check();
  }

  static final _getContentScene = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getContentScene")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.transition.Scene getContentScene()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentScene() {
    return _getContentScene(reference.pointer).object(const jni.JObjectType());
  }

  static final _setFinishOnTouchOutside = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setFinishOnTouchOutside")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setFinishOnTouchOutside(boolean z)
  void setFinishOnTouchOutside(
    bool z,
  ) {
    _setFinishOnTouchOutside(reference.pointer, z ? 1 : 0).check();
  }

  static final _setDefaultKeyMode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setDefaultKeyMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setDefaultKeyMode(int i)
  void setDefaultKeyMode(
    int i,
  ) {
    _setDefaultKeyMode(reference.pointer, i).check();
  }

  static final _onKeyDown = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onKeyDown")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)
  bool onKeyDown(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyDown(reference.pointer, i, keyEvent.reference.pointer).boolean;
  }

  static final _onKeyLongPress = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onKeyLongPress")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)
  bool onKeyLongPress(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyLongPress(reference.pointer, i, keyEvent.reference.pointer)
        .boolean;
  }

  static final _onKeyUp = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onKeyUp")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)
  bool onKeyUp(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyUp(reference.pointer, i, keyEvent.reference.pointer).boolean;
  }

  static final _onKeyMultiple = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>("Activity__onKeyMultiple")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)
  bool onKeyMultiple(
    int i,
    int i1,
    jni.JObject keyEvent,
  ) {
    return _onKeyMultiple(reference.pointer, i, i1, keyEvent.reference.pointer)
        .boolean;
  }

  static final _onBackPressed = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onBackPressed")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onBackPressed()
  void onBackPressed() {
    _onBackPressed(reference.pointer).check();
  }

  static final _onKeyShortcut = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onKeyShortcut")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)
  bool onKeyShortcut(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyShortcut(reference.pointer, i, keyEvent.reference.pointer)
        .boolean;
  }

  static final _onTouchEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onTouchEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _onTouchEvent(reference.pointer, motionEvent.reference.pointer)
        .boolean;
  }

  static final _onTrackballEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onTrackballEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTrackballEvent(android.view.MotionEvent motionEvent)
  bool onTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return _onTrackballEvent(reference.pointer, motionEvent.reference.pointer)
        .boolean;
  }

  static final _onGenericMotionEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onGenericMotionEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool onGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return _onGenericMotionEvent(
            reference.pointer, motionEvent.reference.pointer)
        .boolean;
  }

  static final _onUserInteraction = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onUserInteraction")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onUserInteraction()
  void onUserInteraction() {
    _onUserInteraction(reference.pointer).check();
  }

  static final _onWindowAttributesChanged = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onWindowAttributesChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)
  void onWindowAttributesChanged(
    jni.JObject layoutParams,
  ) {
    _onWindowAttributesChanged(
            reference.pointer, layoutParams.reference.pointer)
        .check();
  }

  static final _onContentChanged = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onContentChanged")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onContentChanged()
  void onContentChanged() {
    _onContentChanged(reference.pointer).check();
  }

  static final _onWindowFocusChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__onWindowFocusChanged")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onWindowFocusChanged(boolean z)
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer, z ? 1 : 0).check();
  }

  static final _onAttachedToWindow = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onAttachedToWindow")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onAttachedToWindow()
  void onAttachedToWindow() {
    _onAttachedToWindow(reference.pointer).check();
  }

  static final _onDetachedFromWindow = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onDetachedFromWindow")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow() {
    _onDetachedFromWindow(reference.pointer).check();
  }

  static final _hasWindowFocus = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__hasWindowFocus")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasWindowFocus()
  bool hasWindowFocus() {
    return _hasWindowFocus(reference.pointer).boolean;
  }

  static final _dispatchKeyEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dispatchKeyEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyEvent(
    jni.JObject keyEvent,
  ) {
    return _dispatchKeyEvent(reference.pointer, keyEvent.reference.pointer)
        .boolean;
  }

  static final _dispatchKeyShortcutEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dispatchKeyShortcutEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyShortcutEvent(
    jni.JObject keyEvent,
  ) {
    return _dispatchKeyShortcutEvent(
            reference.pointer, keyEvent.reference.pointer)
        .boolean;
  }

  static final _dispatchTouchEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dispatchTouchEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)
  bool dispatchTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchTouchEvent(reference.pointer, motionEvent.reference.pointer)
        .boolean;
  }

  static final _dispatchTrackballEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dispatchTrackballEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)
  bool dispatchTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchTrackballEvent(
            reference.pointer, motionEvent.reference.pointer)
        .boolean;
  }

  static final _dispatchGenericMotionEvent = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__dispatchGenericMotionEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool dispatchGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchGenericMotionEvent(
            reference.pointer, motionEvent.reference.pointer)
        .boolean;
  }

  static final _dispatchPopulateAccessibilityEvent = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__dispatchPopulateAccessibilityEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)
  bool dispatchPopulateAccessibilityEvent(
    jni.JObject accessibilityEvent,
  ) {
    return _dispatchPopulateAccessibilityEvent(
            reference.pointer, accessibilityEvent.reference.pointer)
        .boolean;
  }

  static final _onCreatePanelView = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onCreatePanelView")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.View onCreatePanelView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreatePanelView(
    int i,
  ) {
    return _onCreatePanelView(reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _onCreatePanelMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreatePanelMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreatePanelMenu(int i, android.view.Menu menu)
  bool onCreatePanelMenu(
    int i,
    jni.JObject menu,
  ) {
    return _onCreatePanelMenu(reference.pointer, i, menu.reference.pointer)
        .boolean;
  }

  static final _onPreparePanel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPreparePanel")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)
  bool onPreparePanel(
    int i,
    jni.JObject view,
    jni.JObject menu,
  ) {
    return _onPreparePanel(reference.pointer, i, view.reference.pointer,
            menu.reference.pointer)
        .boolean;
  }

  static final _onMenuOpened = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onMenuOpened")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onMenuOpened(int i, android.view.Menu menu)
  bool onMenuOpened(
    int i,
    jni.JObject menu,
  ) {
    return _onMenuOpened(reference.pointer, i, menu.reference.pointer).boolean;
  }

  static final _onMenuItemSelected = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onMenuItemSelected")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)
  bool onMenuItemSelected(
    int i,
    jni.JObject menuItem,
  ) {
    return _onMenuItemSelected(reference.pointer, i, menuItem.reference.pointer)
        .boolean;
  }

  static final _onPanelClosed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPanelClosed")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPanelClosed(int i, android.view.Menu menu)
  void onPanelClosed(
    int i,
    jni.JObject menu,
  ) {
    _onPanelClosed(reference.pointer, i, menu.reference.pointer).check();
  }

  static final _invalidateOptionsMenu = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__invalidateOptionsMenu")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void invalidateOptionsMenu()
  void invalidateOptionsMenu() {
    _invalidateOptionsMenu(reference.pointer).check();
  }

  static final _onCreateOptionsMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateOptionsMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreateOptionsMenu(android.view.Menu menu)
  bool onCreateOptionsMenu(
    jni.JObject menu,
  ) {
    return _onCreateOptionsMenu(reference.pointer, menu.reference.pointer)
        .boolean;
  }

  static final _onPrepareOptionsMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPrepareOptionsMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPrepareOptionsMenu(android.view.Menu menu)
  bool onPrepareOptionsMenu(
    jni.JObject menu,
  ) {
    return _onPrepareOptionsMenu(reference.pointer, menu.reference.pointer)
        .boolean;
  }

  static final _onOptionsItemSelected = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onOptionsItemSelected")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onOptionsItemSelected(android.view.MenuItem menuItem)
  bool onOptionsItemSelected(
    jni.JObject menuItem,
  ) {
    return _onOptionsItemSelected(reference.pointer, menuItem.reference.pointer)
        .boolean;
  }

  static final _onNavigateUp = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onNavigateUp")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onNavigateUp()
  bool onNavigateUp() {
    return _onNavigateUp(reference.pointer).boolean;
  }

  static final _onNavigateUpFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onNavigateUpFromChild")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onNavigateUpFromChild(android.app.Activity activity)
  bool onNavigateUpFromChild(
    Activity activity,
  ) {
    return _onNavigateUpFromChild(reference.pointer, activity.reference.pointer)
        .boolean;
  }

  static final _onCreateNavigateUpTaskStack = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onCreateNavigateUpTaskStack")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onCreateNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    _onCreateNavigateUpTaskStack(
            reference.pointer, taskStackBuilder.reference.pointer)
        .check();
  }

  static final _onPrepareNavigateUpTaskStack = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onPrepareNavigateUpTaskStack")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onPrepareNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    _onPrepareNavigateUpTaskStack(
            reference.pointer, taskStackBuilder.reference.pointer)
        .check();
  }

  static final _onOptionsMenuClosed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onOptionsMenuClosed")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onOptionsMenuClosed(android.view.Menu menu)
  void onOptionsMenuClosed(
    jni.JObject menu,
  ) {
    _onOptionsMenuClosed(reference.pointer, menu.reference.pointer).check();
  }

  static final _openOptionsMenu = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__openOptionsMenu")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void openOptionsMenu()
  void openOptionsMenu() {
    _openOptionsMenu(reference.pointer).check();
  }

  static final _closeOptionsMenu = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__closeOptionsMenu")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closeOptionsMenu()
  void closeOptionsMenu() {
    _closeOptionsMenu(reference.pointer).check();
  }

  static final _onCreateContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateContextMenu")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)
  void onCreateContextMenu(
    jni.JObject contextMenu,
    jni.JObject view,
    jni.JObject contextMenuInfo,
  ) {
    _onCreateContextMenu(reference.pointer, contextMenu.reference.pointer,
            view.reference.pointer, contextMenuInfo.reference.pointer)
        .check();
  }

  static final _registerForContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__registerForContextMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerForContextMenu(android.view.View view)
  void registerForContextMenu(
    jni.JObject view,
  ) {
    _registerForContextMenu(reference.pointer, view.reference.pointer).check();
  }

  static final _unregisterForContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__unregisterForContextMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterForContextMenu(android.view.View view)
  void unregisterForContextMenu(
    jni.JObject view,
  ) {
    _unregisterForContextMenu(reference.pointer, view.reference.pointer)
        .check();
  }

  static final _openContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__openContextMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void openContextMenu(android.view.View view)
  void openContextMenu(
    jni.JObject view,
  ) {
    _openContextMenu(reference.pointer, view.reference.pointer).check();
  }

  static final _closeContextMenu = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__closeContextMenu")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closeContextMenu()
  void closeContextMenu() {
    _closeContextMenu(reference.pointer).check();
  }

  static final _onContextItemSelected = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onContextItemSelected")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onContextItemSelected(android.view.MenuItem menuItem)
  bool onContextItemSelected(
    jni.JObject menuItem,
  ) {
    return _onContextItemSelected(reference.pointer, menuItem.reference.pointer)
        .boolean;
  }

  static final _onContextMenuClosed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onContextMenuClosed")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onContextMenuClosed(android.view.Menu menu)
  void onContextMenuClosed(
    jni.JObject menu,
  ) {
    _onContextMenuClosed(reference.pointer, menu.reference.pointer).check();
  }

  static final _onCreateDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onCreateDialog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: protected android.app.Dialog onCreateDialog(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog(
    int i,
  ) {
    return _onCreateDialog(reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _onCreateDialog1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateDialog1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected android.app.Dialog onCreateDialog(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return _onCreateDialog1(reference.pointer, i, bundle.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _onPrepareDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPrepareDialog")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog)
  void onPrepareDialog(
    int i,
    jni.JObject dialog,
  ) {
    _onPrepareDialog(reference.pointer, i, dialog.reference.pointer).check();
  }

  static final _onPrepareDialog1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPrepareDialog1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog, android.os.Bundle bundle)
  void onPrepareDialog1(
    int i,
    jni.JObject dialog,
    jni.JObject bundle,
  ) {
    _onPrepareDialog1(reference.pointer, i, dialog.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _showDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__showDialog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void showDialog(int i)
  void showDialog(
    int i,
  ) {
    _showDialog(reference.pointer, i).check();
  }

  static final _showDialog1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__showDialog1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean showDialog(int i, android.os.Bundle bundle)
  bool showDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return _showDialog1(reference.pointer, i, bundle.reference.pointer).boolean;
  }

  static final _dismissDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__dismissDialog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void dismissDialog(int i)
  void dismissDialog(
    int i,
  ) {
    _dismissDialog(reference.pointer, i).check();
  }

  static final _removeDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__removeDialog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void removeDialog(int i)
  void removeDialog(
    int i,
  ) {
    _removeDialog(reference.pointer, i).check();
  }

  static final _onSearchRequested = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onSearchRequested")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onSearchRequested(android.view.SearchEvent searchEvent)
  bool onSearchRequested(
    jni.JObject searchEvent,
  ) {
    return _onSearchRequested(reference.pointer, searchEvent.reference.pointer)
        .boolean;
  }

  static final _onSearchRequested1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onSearchRequested1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onSearchRequested()
  bool onSearchRequested1() {
    return _onSearchRequested1(reference.pointer).boolean;
  }

  static final _getSearchEvent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getSearchEvent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.view.SearchEvent getSearchEvent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSearchEvent() {
    return _getSearchEvent(reference.pointer).object(const jni.JObjectType());
  }

  static final _startSearch = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__startSearch")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)
  void startSearch(
    jni.JString string,
    bool z,
    jni.JObject bundle,
    bool z1,
  ) {
    _startSearch(reference.pointer, string.reference.pointer, z ? 1 : 0,
            bundle.reference.pointer, z1 ? 1 : 0)
        .check();
  }

  static final _triggerSearch = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__triggerSearch")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void triggerSearch(java.lang.String string, android.os.Bundle bundle)
  void triggerSearch(
    jni.JString string,
    jni.JObject bundle,
  ) {
    _triggerSearch(reference.pointer, string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _takeKeyEvents = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Activity__takeKeyEvents")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void takeKeyEvents(boolean z)
  void takeKeyEvents(
    bool z,
  ) {
    _takeKeyEvents(reference.pointer, z ? 1 : 0).check();
  }

  static final _requestWindowFeature = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__requestWindowFeature")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean requestWindowFeature(int i)
  bool requestWindowFeature(
    int i,
  ) {
    return _requestWindowFeature(reference.pointer, i).boolean;
  }

  static final _setFeatureDrawableResource = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("Activity__setFeatureDrawableResource")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final void setFeatureDrawableResource(int i, int i1)
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    _setFeatureDrawableResource(reference.pointer, i, i1).check();
  }

  static final _setFeatureDrawableUri = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__setFeatureDrawableUri")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setFeatureDrawableUri(int i, android.net.Uri uri)
  void setFeatureDrawableUri(
    int i,
    jni.JObject uri,
  ) {
    _setFeatureDrawableUri(reference.pointer, i, uri.reference.pointer).check();
  }

  static final _setFeatureDrawable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__setFeatureDrawable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)
  void setFeatureDrawable(
    int i,
    jni.JObject drawable,
  ) {
    _setFeatureDrawable(reference.pointer, i, drawable.reference.pointer)
        .check();
  }

  static final _setFeatureDrawableAlpha = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("Activity__setFeatureDrawableAlpha")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final void setFeatureDrawableAlpha(int i, int i1)
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    _setFeatureDrawableAlpha(reference.pointer, i, i1).check();
  }

  static final _getLayoutInflater = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getLayoutInflater")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.LayoutInflater getLayoutInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLayoutInflater() {
    return _getLayoutInflater(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getMenuInflater = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getMenuInflater")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.MenuInflater getMenuInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMenuInflater() {
    return _getMenuInflater(reference.pointer).object(const jni.JObjectType());
  }

  static final _setTheme = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setTheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTheme(int i)
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, i).check();
  }

  static final _onApplyThemeResource = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Uint8)>>("Activity__onApplyThemeResource")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: protected void onApplyThemeResource(android.content.res.Resources$Theme theme, int i, boolean z)
  void onApplyThemeResource(
    jni.JObject theme,
    int i,
    bool z,
  ) {
    _onApplyThemeResource(
            reference.pointer, theme.reference.pointer, i, z ? 1 : 0)
        .check();
  }

  static final _requestPermissions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__requestPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void requestPermissions(java.lang.String[] strings, int i)
  void requestPermissions(
    jni.JArray<jni.JString> strings,
    int i,
  ) {
    _requestPermissions(reference.pointer, strings.reference.pointer, i)
        .check();
  }

  static final _onRequestPermissionsResult = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onRequestPermissionsResult")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)
  void onRequestPermissionsResult(
    int i,
    jni.JArray<jni.JString> strings,
    jni.JArray<jni.jint> is0,
  ) {
    _onRequestPermissionsResult(reference.pointer, i, strings.reference.pointer,
            is0.reference.pointer)
        .check();
  }

  static final _shouldShowRequestPermissionRationale = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__shouldShowRequestPermissionRationale")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldShowRequestPermissionRationale(java.lang.String string)
  bool shouldShowRequestPermissionRationale(
    jni.JString string,
  ) {
    return _shouldShowRequestPermissionRationale(
            reference.pointer, string.reference.pointer)
        .boolean;
  }

  static final _startActivityForResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActivityForResult")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityForResult(android.content.Intent intent, int i)
  void startActivityForResult(
    Intent intent,
    int i,
  ) {
    _startActivityForResult(reference.pointer, intent.reference.pointer, i)
        .check();
  }

  static final _startActivityForResult1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivityForResult1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityForResult1(
    Intent intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityForResult1(reference.pointer, intent.reference.pointer, i,
            bundle.reference.pointer)
        .check();
  }

  static final _isActivityTransitionRunning = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isActivityTransitionRunning")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isActivityTransitionRunning()
  bool isActivityTransitionRunning() {
    return _isActivityTransitionRunning(reference.pointer).boolean;
  }

  static final _startIntentSenderForResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Activity__startIntentSenderForResult")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderForResult(
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
  ) {
    _startIntentSenderForResult(
            reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _startIntentSenderForResult1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Int32,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Activity__startIntentSenderForResult1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderForResult1(
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    _startIntentSenderForResult1(
            reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3,
            bundle.reference.pointer)
        .check();
  }

  static final _startActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivity")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivity(android.content.Intent intent)
  void startActivity(
    Intent intent,
  ) {
    _startActivity(reference.pointer, intent.reference.pointer).check();
  }

  static final _startActivity1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivity1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    Intent intent,
    jni.JObject bundle,
  ) {
    _startActivity1(reference.pointer, intent.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _startActivities = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivities")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<Intent> intents,
  ) {
    _startActivities(reference.pointer, intents.reference.pointer).check();
  }

  static final _startActivities1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivities1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<Intent> intents,
    jni.JObject bundle,
  ) {
    _startActivities1(reference.pointer, intents.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _startIntentSender = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Activity__startIntentSender")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
  ) {
    _startIntentSender(reference.pointer, intentSender.reference.pointer,
            intent.reference.pointer, i, i1, i2)
        .check();
  }

  static final _startIntentSender1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__startIntentSender1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    _startIntentSender1(reference.pointer, intentSender.reference.pointer,
            intent.reference.pointer, i, i1, i2, bundle.reference.pointer)
        .check();
  }

  static final _startActivityIfNeeded = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActivityIfNeeded")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i)
  bool startActivityIfNeeded(
    Intent intent,
    int i,
  ) {
    return _startActivityIfNeeded(
            reference.pointer, intent.reference.pointer, i)
        .boolean;
  }

  static final _startActivityIfNeeded1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivityIfNeeded1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)
  bool startActivityIfNeeded1(
    Intent intent,
    int i,
    jni.JObject bundle,
  ) {
    return _startActivityIfNeeded1(reference.pointer, intent.reference.pointer,
            i, bundle.reference.pointer)
        .boolean;
  }

  static final _startNextMatchingActivity = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__startNextMatchingActivity")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent)
  bool startNextMatchingActivity(
    Intent intent,
  ) {
    return _startNextMatchingActivity(
            reference.pointer, intent.reference.pointer)
        .boolean;
  }

  static final _startNextMatchingActivity1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__startNextMatchingActivity1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)
  bool startNextMatchingActivity1(
    Intent intent,
    jni.JObject bundle,
  ) {
    return _startNextMatchingActivity1(reference.pointer,
            intent.reference.pointer, bundle.reference.pointer)
        .boolean;
  }

  static final _startActivityFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActivityFromChild")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)
  void startActivityFromChild(
    Activity activity,
    Intent intent,
    int i,
  ) {
    _startActivityFromChild(reference.pointer, activity.reference.pointer,
            intent.reference.pointer, i)
        .check();
  }

  static final _startActivityFromChild1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivityFromChild1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromChild1(
    Activity activity,
    Intent intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityFromChild1(reference.pointer, activity.reference.pointer,
            intent.reference.pointer, i, bundle.reference.pointer)
        .check();
  }

  static final _startActivityFromFragment = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActivityFromFragment")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)
  void startActivityFromFragment(
    jni.JObject fragment,
    Intent intent,
    int i,
  ) {
    _startActivityFromFragment(reference.pointer, fragment.reference.pointer,
            intent.reference.pointer, i)
        .check();
  }

  static final _startActivityFromFragment1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Activity__startActivityFromFragment1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromFragment1(
    jni.JObject fragment,
    Intent intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityFromFragment1(reference.pointer, fragment.reference.pointer,
            intent.reference.pointer, i, bundle.reference.pointer)
        .check();
  }

  static final _startIntentSenderFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Activity__startIntentSenderFromChild")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderFromChild(
    Activity activity,
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
  ) {
    _startIntentSenderFromChild(
            reference.pointer,
            activity.reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _startIntentSenderFromChild1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Int32,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Activity__startIntentSenderFromChild1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderFromChild1(
    Activity activity,
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    _startIntentSenderFromChild1(
            reference.pointer,
            activity.reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3,
            bundle.reference.pointer)
        .check();
  }

  static final _overridePendingTransition = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("Activity__overridePendingTransition")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void overridePendingTransition(int i, int i1)
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    _overridePendingTransition(reference.pointer, i, i1).check();
  }

  static final _overridePendingTransition1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Activity__overridePendingTransition1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void overridePendingTransition(int i, int i1, int i2)
  void overridePendingTransition1(
    int i,
    int i1,
    int i2,
  ) {
    _overridePendingTransition1(reference.pointer, i, i1, i2).check();
  }

  static final _setResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setResult")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setResult(int i)
  void setResult(
    int i,
  ) {
    _setResult(reference.pointer, i).check();
  }

  static final _setResult1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__setResult1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResult(int i, android.content.Intent intent)
  void setResult1(
    int i,
    Intent intent,
  ) {
    _setResult1(reference.pointer, i, intent.reference.pointer).check();
  }

  static final _getReferrer = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getReferrer")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri getReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getReferrer() {
    return _getReferrer(reference.pointer).object(const jni.JObjectType());
  }

  static final _onProvideReferrer = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onProvideReferrer")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri onProvideReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onProvideReferrer() {
    return _onProvideReferrer(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _getCallingPackage = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getCallingPackage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getCallingPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCallingPackage() {
    return _getCallingPackage(reference.pointer)
        .object(const jni.JStringType());
  }

  static final _getCallingActivity = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getCallingActivity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName getCallingActivity()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCallingActivity() {
    return _getCallingActivity(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _setVisible = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Activity__setVisible")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setVisible(boolean z)
  void setVisible(
    bool z,
  ) {
    _setVisible(reference.pointer, z ? 1 : 0).check();
  }

  static final _isFinishing = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isFinishing")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isFinishing()
  bool isFinishing() {
    return _isFinishing(reference.pointer).boolean;
  }

  static final _isDestroyed = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isDestroyed")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isDestroyed()
  bool isDestroyed() {
    return _isDestroyed(reference.pointer).boolean;
  }

  static final _isChangingConfigurations = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isChangingConfigurations")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isChangingConfigurations()
  bool isChangingConfigurations() {
    return _isChangingConfigurations(reference.pointer).boolean;
  }

  static final _recreate = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__recreate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void recreate()
  void recreate() {
    _recreate(reference.pointer).check();
  }

  static final _finish = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__finish")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finish()
  void finish() {
    _finish(reference.pointer).check();
  }

  static final _finishAffinity = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__finishAffinity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finishAffinity()
  void finishAffinity() {
    _finishAffinity(reference.pointer).check();
  }

  static final _finishFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__finishFromChild")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void finishFromChild(android.app.Activity activity)
  void finishFromChild(
    Activity activity,
  ) {
    _finishFromChild(reference.pointer, activity.reference.pointer).check();
  }

  static final _finishAfterTransition = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__finishAfterTransition")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finishAfterTransition()
  void finishAfterTransition() {
    _finishAfterTransition(reference.pointer).check();
  }

  static final _finishActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__finishActivity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void finishActivity(int i)
  void finishActivity(
    int i,
  ) {
    _finishActivity(reference.pointer, i).check();
  }

  static final _finishActivityFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__finishActivityFromChild")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void finishActivityFromChild(android.app.Activity activity, int i)
  void finishActivityFromChild(
    Activity activity,
    int i,
  ) {
    _finishActivityFromChild(reference.pointer, activity.reference.pointer, i)
        .check();
  }

  static final _finishAndRemoveTask = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__finishAndRemoveTask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finishAndRemoveTask()
  void finishAndRemoveTask() {
    _finishAndRemoveTask(reference.pointer).check();
  }

  static final _releaseInstance = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__releaseInstance")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean releaseInstance()
  bool releaseInstance() {
    return _releaseInstance(reference.pointer).boolean;
  }

  static final _onActivityResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onActivityResult")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onActivityResult(int i, int i1, android.content.Intent intent)
  void onActivityResult(
    int i,
    int i1,
    Intent intent,
  ) {
    _onActivityResult(reference.pointer, i, i1, intent.reference.pointer)
        .check();
  }

  static final _onActivityReenter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onActivityReenter")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onActivityReenter(int i, android.content.Intent intent)
  void onActivityReenter(
    int i,
    Intent intent,
  ) {
    _onActivityReenter(reference.pointer, i, intent.reference.pointer).check();
  }

  static final _createPendingResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__createPendingResult")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createPendingResult(
    int i,
    Intent intent,
    int i1,
  ) {
    return _createPendingResult(
            reference.pointer, i, intent.reference.pointer, i1)
        .object(const jni.JObjectType());
  }

  static final _setRequestedOrientation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setRequestedOrientation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setRequestedOrientation(int i)
  void setRequestedOrientation(
    int i,
  ) {
    _setRequestedOrientation(reference.pointer, i).check();
  }

  static final _getRequestedOrientation = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getRequestedOrientation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getRequestedOrientation()
  int getRequestedOrientation() {
    return _getRequestedOrientation(reference.pointer).integer;
  }

  static final _getTaskId = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getTaskId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTaskId()
  int getTaskId() {
    return _getTaskId(reference.pointer).integer;
  }

  static final _isTaskRoot = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isTaskRoot")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isTaskRoot()
  bool isTaskRoot() {
    return _isTaskRoot(reference.pointer).boolean;
  }

  static final _moveTaskToBack = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__moveTaskToBack")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean moveTaskToBack(boolean z)
  bool moveTaskToBack(
    bool z,
  ) {
    return _moveTaskToBack(reference.pointer, z ? 1 : 0).boolean;
  }

  static final _getLocalClassName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getLocalClassName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getLocalClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalClassName() {
    return _getLocalClassName(reference.pointer)
        .object(const jni.JStringType());
  }

  static final _getComponentName = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getComponentName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponentName() {
    return _getComponentName(reference.pointer).object(const jni.JObjectType());
  }

  static final _getPreferences = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__getPreferences")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.SharedPreferences getPreferences(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferences(
    int i,
  ) {
    return _getPreferences(reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _isLaunchedFromBubble = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isLaunchedFromBubble")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isLaunchedFromBubble()
  bool isLaunchedFromBubble() {
    return _isLaunchedFromBubble(reference.pointer).boolean;
  }

  static final _getSystemService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__getSystemService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return _getSystemService(reference.pointer, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _setTitle = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setTitle")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTitle(java.lang.CharSequence charSequence)
  void setTitle(
    jni.JObject charSequence,
  ) {
    _setTitle(reference.pointer, charSequence.reference.pointer).check();
  }

  static final _setTitle1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setTitle1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTitle(int i)
  void setTitle1(
    int i,
  ) {
    _setTitle1(reference.pointer, i).check();
  }

  static final _setTitleColor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setTitleColor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTitleColor(int i)
  void setTitleColor(
    int i,
  ) {
    _setTitleColor(reference.pointer, i).check();
  }

  static final _getTitle = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getTitle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.CharSequence getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTitle() {
    return _getTitle(reference.pointer).object(const jni.JObjectType());
  }

  static final _getTitleColor = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getTitleColor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final int getTitleColor()
  int getTitleColor() {
    return _getTitleColor(reference.pointer).integer;
  }

  static final _onTitleChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onTitleChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: protected void onTitleChanged(java.lang.CharSequence charSequence, int i)
  void onTitleChanged(
    jni.JObject charSequence,
    int i,
  ) {
    _onTitleChanged(reference.pointer, charSequence.reference.pointer, i)
        .check();
  }

  static final _onChildTitleChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onChildTitleChanged")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onChildTitleChanged(android.app.Activity activity, java.lang.CharSequence charSequence)
  void onChildTitleChanged(
    Activity activity,
    jni.JObject charSequence,
  ) {
    _onChildTitleChanged(reference.pointer, activity.reference.pointer,
            charSequence.reference.pointer)
        .check();
  }

  static final _setTaskDescription = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setTaskDescription")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)
  void setTaskDescription(
    jni.JObject taskDescription,
  ) {
    _setTaskDescription(reference.pointer, taskDescription.reference.pointer)
        .check();
  }

  static final _setProgressBarVisibility = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setProgressBarVisibility")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setProgressBarVisibility(boolean z)
  void setProgressBarVisibility(
    bool z,
  ) {
    _setProgressBarVisibility(reference.pointer, z ? 1 : 0).check();
  }

  static final _setProgressBarIndeterminateVisibility = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "Activity__setProgressBarIndeterminateVisibility")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setProgressBarIndeterminateVisibility(boolean z)
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    _setProgressBarIndeterminateVisibility(reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _setProgressBarIndeterminate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setProgressBarIndeterminate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setProgressBarIndeterminate(boolean z)
  void setProgressBarIndeterminate(
    bool z,
  ) {
    _setProgressBarIndeterminate(reference.pointer, z ? 1 : 0).check();
  }

  static final _setProgress = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setProgress")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setProgress(int i)
  void setProgress(
    int i,
  ) {
    _setProgress(reference.pointer, i).check();
  }

  static final _setSecondaryProgress = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setSecondaryProgress")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setSecondaryProgress(int i)
  void setSecondaryProgress(
    int i,
  ) {
    _setSecondaryProgress(reference.pointer, i).check();
  }

  static final _setVolumeControlStream = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setVolumeControlStream")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setVolumeControlStream(int i)
  void setVolumeControlStream(
    int i,
  ) {
    _setVolumeControlStream(reference.pointer, i).check();
  }

  static final _getVolumeControlStream = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getVolumeControlStream")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final int getVolumeControlStream()
  int getVolumeControlStream() {
    return _getVolumeControlStream(reference.pointer).integer;
  }

  static final _setMediaController = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setMediaController")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setMediaController(android.media.session.MediaController mediaController)
  void setMediaController(
    jni.JObject mediaController,
  ) {
    _setMediaController(reference.pointer, mediaController.reference.pointer)
        .check();
  }

  static final _getMediaController = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getMediaController")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.media.session.MediaController getMediaController()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMediaController() {
    return _getMediaController(reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _runOnUiThread = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__runOnUiThread")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void runOnUiThread(java.lang.Runnable runnable)
  void runOnUiThread(
    jni.JObject runnable,
  ) {
    _runOnUiThread(reference.pointer, runnable.reference.pointer).check();
  }

  static final _onCreateView = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateView")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView(
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return _onCreateView(reference.pointer, string.reference.pointer,
            context.reference.pointer, attributeSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _onCreateView1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateView1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView1(
    jni.JObject view,
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return _onCreateView1(
            reference.pointer,
            view.reference.pointer,
            string.reference.pointer,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _dump = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dump")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)
  void dump(
    jni.JString string,
    jni.JObject fileDescriptor,
    jni.JObject printWriter,
    jni.JArray<jni.JString> strings,
  ) {
    _dump(
            reference.pointer,
            string.reference.pointer,
            fileDescriptor.reference.pointer,
            printWriter.reference.pointer,
            strings.reference.pointer)
        .check();
  }

  static final _isImmersive = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isImmersive")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isImmersive()
  bool isImmersive() {
    return _isImmersive(reference.pointer).boolean;
  }

  static final _setTranslucent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setTranslucent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setTranslucent(boolean z)
  bool setTranslucent(
    bool z,
  ) {
    return _setTranslucent(reference.pointer, z ? 1 : 0).boolean;
  }

  static final _requestVisibleBehind = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__requestVisibleBehind")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean requestVisibleBehind(boolean z)
  bool requestVisibleBehind(
    bool z,
  ) {
    return _requestVisibleBehind(reference.pointer, z ? 1 : 0).boolean;
  }

  static final _onVisibleBehindCanceled = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onVisibleBehindCanceled")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onVisibleBehindCanceled()
  void onVisibleBehindCanceled() {
    _onVisibleBehindCanceled(reference.pointer).check();
  }

  static final _onEnterAnimationComplete = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onEnterAnimationComplete")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onEnterAnimationComplete()
  void onEnterAnimationComplete() {
    _onEnterAnimationComplete(reference.pointer).check();
  }

  static final _setImmersive = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Activity__setImmersive")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setImmersive(boolean z)
  void setImmersive(
    bool z,
  ) {
    _setImmersive(reference.pointer, z ? 1 : 0).check();
  }

  static final _setVrModeEnabled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
                  ffi.Pointer<ffi.Void>)>>("Activity__setVrModeEnabled")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)
  void setVrModeEnabled(
    bool z,
    jni.JObject componentName,
  ) {
    _setVrModeEnabled(
            reference.pointer, z ? 1 : 0, componentName.reference.pointer)
        .check();
  }

  static final _startActionMode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActionMode")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode(
    jni.JObject callback,
  ) {
    return _startActionMode(reference.pointer, callback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _startActionMode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActionMode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return _startActionMode1(reference.pointer, callback.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _onWindowStartingActionMode = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onWindowStartingActionMode")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode(
    jni.JObject callback,
  ) {
    return _onWindowStartingActionMode(
            reference.pointer, callback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _onWindowStartingActionMode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onWindowStartingActionMode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return _onWindowStartingActionMode1(
            reference.pointer, callback.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _onActionModeStarted = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onActionModeStarted")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onActionModeStarted(android.view.ActionMode actionMode)
  void onActionModeStarted(
    jni.JObject actionMode,
  ) {
    _onActionModeStarted(reference.pointer, actionMode.reference.pointer)
        .check();
  }

  static final _onActionModeFinished = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onActionModeFinished")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onActionModeFinished(android.view.ActionMode actionMode)
  void onActionModeFinished(
    jni.JObject actionMode,
  ) {
    _onActionModeFinished(reference.pointer, actionMode.reference.pointer)
        .check();
  }

  static final _shouldUpRecreateTask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__shouldUpRecreateTask")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldUpRecreateTask(android.content.Intent intent)
  bool shouldUpRecreateTask(
    Intent intent,
  ) {
    return _shouldUpRecreateTask(reference.pointer, intent.reference.pointer)
        .boolean;
  }

  static final _navigateUpTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__navigateUpTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean navigateUpTo(android.content.Intent intent)
  bool navigateUpTo(
    Intent intent,
  ) {
    return _navigateUpTo(reference.pointer, intent.reference.pointer).boolean;
  }

  static final _navigateUpToFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__navigateUpToFromChild")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)
  bool navigateUpToFromChild(
    Activity activity,
    Intent intent,
  ) {
    return _navigateUpToFromChild(reference.pointer, activity.reference.pointer,
            intent.reference.pointer)
        .boolean;
  }

  static final _getParentActivityIntent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getParentActivityIntent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent getParentActivityIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getParentActivityIntent() {
    return _getParentActivityIntent(reference.pointer)
        .object(const $IntentType());
  }

  static final _setEnterSharedElementCallback = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__setEnterSharedElementCallback")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setEnterSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    _setEnterSharedElementCallback(
            reference.pointer, sharedElementCallback.reference.pointer)
        .check();
  }

  static final _setExitSharedElementCallback = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__setExitSharedElementCallback")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setExitSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    _setExitSharedElementCallback(
            reference.pointer, sharedElementCallback.reference.pointer)
        .check();
  }

  static final _postponeEnterTransition = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__postponeEnterTransition")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void postponeEnterTransition()
  void postponeEnterTransition() {
    _postponeEnterTransition(reference.pointer).check();
  }

  static final _startPostponedEnterTransition = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__startPostponedEnterTransition")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void startPostponedEnterTransition()
  void startPostponedEnterTransition() {
    _startPostponedEnterTransition(reference.pointer).check();
  }

  static final _requestDragAndDropPermissions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__requestDragAndDropPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject requestDragAndDropPermissions(
    jni.JObject dragEvent,
  ) {
    return _requestDragAndDropPermissions(
            reference.pointer, dragEvent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _startLockTask = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__startLockTask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void startLockTask()
  void startLockTask() {
    _startLockTask(reference.pointer).check();
  }

  static final _stopLockTask = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__stopLockTask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void stopLockTask()
  void stopLockTask() {
    _stopLockTask(reference.pointer).check();
  }

  static final _showLockTaskEscapeMessage = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__showLockTaskEscapeMessage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void showLockTaskEscapeMessage()
  void showLockTaskEscapeMessage() {
    _showLockTaskEscapeMessage(reference.pointer).check();
  }

  static final _setRecentsScreenshotEnabled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setRecentsScreenshotEnabled")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setRecentsScreenshotEnabled(boolean z)
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    _setRecentsScreenshotEnabled(reference.pointer, z ? 1 : 0).check();
  }

  static final _setShowWhenLocked = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setShowWhenLocked")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setShowWhenLocked(boolean z)
  void setShowWhenLocked(
    bool z,
  ) {
    _setShowWhenLocked(reference.pointer, z ? 1 : 0).check();
  }

  static final _setInheritShowWhenLocked = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setInheritShowWhenLocked")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setInheritShowWhenLocked(boolean z)
  void setInheritShowWhenLocked(
    bool z,
  ) {
    _setInheritShowWhenLocked(reference.pointer, z ? 1 : 0).check();
  }

  static final _setTurnScreenOn = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setTurnScreenOn")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTurnScreenOn(boolean z)
  void setTurnScreenOn(
    bool z,
  ) {
    _setTurnScreenOn(reference.pointer, z ? 1 : 0).check();
  }

  static final _getOnBackInvokedDispatcher = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getOnBackInvokedDispatcher")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getOnBackInvokedDispatcher() {
    return _getOnBackInvokedDispatcher(reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $ActivityType extends jni.JObjType<Activity> {
  const $ActivityType();

  @override
  String get signature => r"Landroid/app/Activity;";

  @override
  Activity fromReference(jni.JReference reference) =>
      Activity.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ActivityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityType) && other is $ActivityType;
  }
}

/// from: java.time.Instant
class Instant extends jni.JObject {
  @override
  late final jni.JObjType<Instant> $type = type;

  Instant.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $InstantType();
  static final _get_EPOCH =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Instant__EPOCH")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.time.Instant EPOCH
  /// The returned object must be released after use, by calling the [release] method.
  static Instant get EPOCH => _get_EPOCH().object(const $InstantType());

  static final _get_MAX =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Instant__MAX")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.time.Instant MAX
  /// The returned object must be released after use, by calling the [release] method.
  static Instant get MAX => _get_MAX().object(const $InstantType());

  static final _get_MIN =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Instant__MIN")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final java.time.Instant MIN
  /// The returned object must be released after use, by calling the [release] method.
  static Instant get MIN => _get_MIN().object(const $InstantType());

  static final _now =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Instant__now")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.time.Instant now()
  /// The returned object must be released after use, by calling the [release] method.
  static Instant now() {
    return _now().object(const $InstantType());
  }

  static final _now1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Instant__now1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant now(java.time.Clock clock)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant now1(
    jni.JObject clock,
  ) {
    return _now1(clock.reference.pointer).object(const $InstantType());
  }

  static final _ofEpochSecond =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Instant__ofEpochSecond")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.time.Instant ofEpochSecond(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant ofEpochSecond(
    int j,
  ) {
    return _ofEpochSecond(j).object(const $InstantType());
  }

  static final _ofEpochSecond1 = jniLookup<
              ffi.NativeFunction<jni.JniResult Function(ffi.Int64, ffi.Int64)>>(
          "Instant__ofEpochSecond1")
      .asFunction<jni.JniResult Function(int, int)>();

  /// from: static public java.time.Instant ofEpochSecond(long j, long j1)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant ofEpochSecond1(
    int j,
    int j1,
  ) {
    return _ofEpochSecond1(j, j1).object(const $InstantType());
  }

  static final _ofEpochMilli =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Instant__ofEpochMilli")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.time.Instant ofEpochMilli(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant ofEpochMilli(
    int j,
  ) {
    return _ofEpochMilli(j).object(const $InstantType());
  }

  static final _from = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Instant__from")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant from(java.time.temporal.TemporalAccessor temporalAccessor)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant from(
    jni.JObject temporalAccessor,
  ) {
    return _from(temporalAccessor.reference.pointer)
        .object(const $InstantType());
  }

  static final _parse = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Instant__parse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant parse(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant parse(
    jni.JObject charSequence,
  ) {
    return _parse(charSequence.reference.pointer).object(const $InstantType());
  }

  static final _isSupported = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__isSupported")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSupported(java.time.temporal.TemporalField temporalField)
  bool isSupported(
    jni.JObject temporalField,
  ) {
    return _isSupported(reference.pointer, temporalField.reference.pointer)
        .boolean;
  }

  static final _isSupported1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__isSupported1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSupported(java.time.temporal.TemporalUnit temporalUnit)
  bool isSupported1(
    jni.JObject temporalUnit,
  ) {
    return _isSupported1(reference.pointer, temporalUnit.reference.pointer)
        .boolean;
  }

  static final _range = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__range")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.ValueRange range(java.time.temporal.TemporalField temporalField)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject range(
    jni.JObject temporalField,
  ) {
    return _range(reference.pointer, temporalField.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__get0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int get(java.time.temporal.TemporalField temporalField)
  int get0(
    jni.JObject temporalField,
  ) {
    return _get0(reference.pointer, temporalField.reference.pointer).integer;
  }

  static final _getLong = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__getLong")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getLong(java.time.temporal.TemporalField temporalField)
  int getLong(
    jni.JObject temporalField,
  ) {
    return _getLong(reference.pointer, temporalField.reference.pointer).long;
  }

  static final _getEpochSecond = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Instant__getEpochSecond")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getEpochSecond()
  int getEpochSecond() {
    return _getEpochSecond(reference.pointer).long;
  }

  static final _getNano = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Instant__getNano")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getNano()
  int getNano() {
    return _getNano(reference.pointer).integer;
  }

  static final _with0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__with0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant with(java.time.temporal.TemporalAdjuster temporalAdjuster)
  /// The returned object must be released after use, by calling the [release] method.
  Instant with0(
    jni.JObject temporalAdjuster,
  ) {
    return _with0(reference.pointer, temporalAdjuster.reference.pointer)
        .object(const $InstantType());
  }

  static final _with1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__with1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant with(java.time.temporal.TemporalField temporalField, long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant with1(
    jni.JObject temporalField,
    int j,
  ) {
    return _with1(reference.pointer, temporalField.reference.pointer, j)
        .object(const $InstantType());
  }

  static final _truncatedTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__truncatedTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant truncatedTo(java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  Instant truncatedTo(
    jni.JObject temporalUnit,
  ) {
    return _truncatedTo(reference.pointer, temporalUnit.reference.pointer)
        .object(const $InstantType());
  }

  static final _plus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__plus")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant plus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plus(
    jni.JObject temporalAmount,
  ) {
    return _plus(reference.pointer, temporalAmount.reference.pointer)
        .object(const $InstantType());
  }

  static final _plus1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Instant__plus1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant plus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plus1(
    int j,
    jni.JObject temporalUnit,
  ) {
    return _plus1(reference.pointer, j, temporalUnit.reference.pointer)
        .object(const $InstantType());
  }

  static final _plusSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__plusSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant plusSeconds(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plusSeconds(
    int j,
  ) {
    return _plusSeconds(reference.pointer, j).object(const $InstantType());
  }

  static final _plusMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__plusMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant plusMillis(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plusMillis(
    int j,
  ) {
    return _plusMillis(reference.pointer, j).object(const $InstantType());
  }

  static final _plusNanos = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__plusNanos")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant plusNanos(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plusNanos(
    int j,
  ) {
    return _plusNanos(reference.pointer, j).object(const $InstantType());
  }

  static final _minus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__minus")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant minus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minus(
    jni.JObject temporalAmount,
  ) {
    return _minus(reference.pointer, temporalAmount.reference.pointer)
        .object(const $InstantType());
  }

  static final _minus1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Instant__minus1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant minus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minus1(
    int j,
    jni.JObject temporalUnit,
  ) {
    return _minus1(reference.pointer, j, temporalUnit.reference.pointer)
        .object(const $InstantType());
  }

  static final _minusSeconds = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__minusSeconds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant minusSeconds(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minusSeconds(
    int j,
  ) {
    return _minusSeconds(reference.pointer, j).object(const $InstantType());
  }

  static final _minusMillis = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__minusMillis")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant minusMillis(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minusMillis(
    int j,
  ) {
    return _minusMillis(reference.pointer, j).object(const $InstantType());
  }

  static final _minusNanos = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__minusNanos")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant minusNanos(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minusNanos(
    int j,
  ) {
    return _minusNanos(reference.pointer, j).object(const $InstantType());
  }

  static final _query = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__query")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public R query(java.time.temporal.TemporalQuery temporalQuery)
  /// The returned object must be released after use, by calling the [release] method.
  $R query<$R extends jni.JObject>(
    jni.JObject temporalQuery, {
    required jni.JObjType<$R> R,
  }) {
    return _query(reference.pointer, temporalQuery.reference.pointer).object(R);
  }

  static final _adjustInto = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__adjustInto")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject adjustInto(
    jni.JObject temporal,
  ) {
    return _adjustInto(reference.pointer, temporal.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _until = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__until")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public long until(java.time.temporal.Temporal temporal, java.time.temporal.TemporalUnit temporalUnit)
  int until(
    jni.JObject temporal,
    jni.JObject temporalUnit,
  ) {
    return _until(reference.pointer, temporal.reference.pointer,
            temporalUnit.reference.pointer)
        .long;
  }

  static final _atOffset = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__atOffset")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.OffsetDateTime atOffset(java.time.ZoneOffset zoneOffset)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject atOffset(
    jni.JObject zoneOffset,
  ) {
    return _atOffset(reference.pointer, zoneOffset.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _atZone = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__atZone")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.ZonedDateTime atZone(java.time.ZoneId zoneId)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject atZone(
    jni.JObject zoneId,
  ) {
    return _atZone(reference.pointer, zoneId.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _toEpochMilli = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Instant__toEpochMilli")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long toEpochMilli()
  int toEpochMilli() {
    return _toEpochMilli(reference.pointer).long;
  }

  static final _compareTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__compareTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.time.Instant instant)
  int compareTo(
    Instant instant,
  ) {
    return _compareTo(reference.pointer, instant.reference.pointer).integer;
  }

  static final _isAfter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__isAfter")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAfter(java.time.Instant instant)
  bool isAfter(
    Instant instant,
  ) {
    return _isAfter(reference.pointer, instant.reference.pointer).boolean;
  }

  static final _isBefore = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__isBefore")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isBefore(java.time.Instant instant)
  bool isBefore(
    Instant instant,
  ) {
    return _isBefore(reference.pointer, instant.reference.pointer).boolean;
  }

  static final _equals = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__equals")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, object.reference.pointer).boolean;
  }

  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Instant__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer).integer;
  }

  static final _toString1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Instant__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer).object(const jni.JStringType());
  }

  static final _minus2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Instant__minus2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal minus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject minus2(
    int j,
    jni.JObject temporalUnit,
  ) {
    return _minus2(reference.pointer, j, temporalUnit.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _minus3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__minus3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject minus3(
    jni.JObject temporalAmount,
  ) {
    return _minus3(reference.pointer, temporalAmount.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _plus2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("Instant__plus2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal plus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject plus2(
    int j,
    jni.JObject temporalUnit,
  ) {
    return _plus2(reference.pointer, j, temporalUnit.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _plus3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__plus3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject plus3(
    jni.JObject temporalAmount,
  ) {
    return _plus3(reference.pointer, temporalAmount.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _with2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int64)>>("Instant__with2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.temporal.Temporal with(java.time.temporal.TemporalField temporalField, long j)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject with2(
    jni.JObject temporalField,
    int j,
  ) {
    return _with2(reference.pointer, temporalField.reference.pointer, j)
        .object(const jni.JObjectType());
  }

  static final _with3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__with3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster temporalAdjuster)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject with3(
    jni.JObject temporalAdjuster,
  ) {
    return _with3(reference.pointer, temporalAdjuster.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _compareTo1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Instant__compareTo1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(
    jni.JObject object,
  ) {
    return _compareTo1(reference.pointer, object.reference.pointer).integer;
  }
}

final class $InstantType extends jni.JObjType<Instant> {
  const $InstantType();

  @override
  String get signature => r"Ljava/time/Instant;";

  @override
  Instant fromReference(jni.JReference reference) =>
      Instant.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($InstantType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($InstantType) && other is $InstantType;
  }
}

/// from: androidx.health.connect.client.request.AggregateGroupByDurationRequest
class AggregateGroupByDurationRequest extends jni.JObject {
  @override
  late final jni.JObjType<AggregateGroupByDurationRequest> $type = type;

  AggregateGroupByDurationRequest.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateGroupByDurationRequestType();
  static final _new0 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "AggregateGroupByDurationRequest__new0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Duration duration, java.util.Set set1)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByDurationRequest(
    jni.JSet<AggregateMetric<jni.JObject>> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JObject duration,
    jni.JSet<jni.JObject> set1,
  ) {
    return AggregateGroupByDurationRequest.fromReference(_new0(
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            duration.reference.pointer,
            set1.reference.pointer)
        .reference);
  }

  static final _new1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "AggregateGroupByDurationRequest__new1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Duration duration, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByDurationRequest.new1(
    jni.JSet<jni.JObject> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JObject duration,
    jni.JSet<jni.JObject> set1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return AggregateGroupByDurationRequest.fromReference(_new1(
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            duration.reference.pointer,
            set1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $AggregateGroupByDurationRequestType
    extends jni.JObjType<AggregateGroupByDurationRequest> {
  const $AggregateGroupByDurationRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;";

  @override
  AggregateGroupByDurationRequest fromReference(jni.JReference reference) =>
      AggregateGroupByDurationRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateGroupByDurationRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateGroupByDurationRequestType) &&
        other is $AggregateGroupByDurationRequestType;
  }
}

/// from: androidx.health.connect.client.request.AggregateGroupByPeriodRequest
class AggregateGroupByPeriodRequest extends jni.JObject {
  @override
  late final jni.JObjType<AggregateGroupByPeriodRequest> $type = type;

  AggregateGroupByPeriodRequest.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateGroupByPeriodRequestType();
  static final _new0 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "AggregateGroupByPeriodRequest__new0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Period period, java.util.Set set1)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByPeriodRequest(
    jni.JSet<AggregateMetric<jni.JObject>> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JObject period,
    jni.JSet<jni.JObject> set1,
  ) {
    return AggregateGroupByPeriodRequest.fromReference(_new0(
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            period.reference.pointer,
            set1.reference.pointer)
        .reference);
  }

  static final _new1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "AggregateGroupByPeriodRequest__new1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Period period, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByPeriodRequest.new1(
    jni.JSet<jni.JObject> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JObject period,
    jni.JSet<jni.JObject> set1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return AggregateGroupByPeriodRequest.fromReference(_new1(
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            period.reference.pointer,
            set1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $AggregateGroupByPeriodRequestType
    extends jni.JObjType<AggregateGroupByPeriodRequest> {
  const $AggregateGroupByPeriodRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;";

  @override
  AggregateGroupByPeriodRequest fromReference(jni.JReference reference) =>
      AggregateGroupByPeriodRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateGroupByPeriodRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateGroupByPeriodRequestType) &&
        other is $AggregateGroupByPeriodRequestType;
  }
}

/// from: androidx.health.connect.client.request.AggregateRequest
class AggregateRequest extends jni.JObject {
  @override
  late final jni.JObjType<AggregateRequest> $type = type;

  AggregateRequest.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateRequestType();
  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregateRequest__new0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set1)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateRequest(
    jni.JSet<AggregateMetric<jni.JObject>> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JSet<jni.JObject> set1,
  ) {
    return AggregateRequest.fromReference(_new0(set0.reference.pointer,
            timeRangeFilter.reference.pointer, set1.reference.pointer)
        .reference);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("AggregateRequest__new1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateRequest.new1(
    jni.JSet<jni.JObject> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JSet<jni.JObject> set1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return AggregateRequest.fromReference(_new1(
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            set1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $AggregateRequestType extends jni.JObjType<AggregateRequest> {
  const $AggregateRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/AggregateRequest;";

  @override
  AggregateRequest fromReference(jni.JReference reference) =>
      AggregateRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateRequestType) &&
        other is $AggregateRequestType;
  }
}

/// from: androidx.health.connect.client.request.ChangesTokenRequest
class ChangesTokenRequest extends jni.JObject {
  @override
  late final jni.JObjType<ChangesTokenRequest> $type = type;

  ChangesTokenRequest.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $ChangesTokenRequestType();
  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ChangesTokenRequest__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, java.util.Set set1)
  /// The returned object must be released after use, by calling the [release] method.
  factory ChangesTokenRequest(
    jni.JSet<jni.JObject> set0,
    jni.JSet<jni.JObject> set1,
  ) {
    return ChangesTokenRequest.fromReference(
        _new0(set0.reference.pointer, set1.reference.pointer).reference);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("ChangesTokenRequest__new1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory ChangesTokenRequest.new1(
    jni.JSet<jni.JObject> set0,
    jni.JSet<jni.JObject> set1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return ChangesTokenRequest.fromReference(_new1(
            set0.reference.pointer,
            set1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $ChangesTokenRequestType extends jni.JObjType<ChangesTokenRequest> {
  const $ChangesTokenRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/ChangesTokenRequest;";

  @override
  ChangesTokenRequest fromReference(jni.JReference reference) =>
      ChangesTokenRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ChangesTokenRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ChangesTokenRequestType) &&
        other is $ChangesTokenRequestType;
  }
}

/// from: androidx.health.connect.client.request.ReadRecordsRequest
class ReadRecordsRequest<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<ReadRecordsRequest<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  ReadRecordsRequest.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  /// The type which includes information such as the signature of this class.
  static $ReadRecordsRequestType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $ReadRecordsRequestType(
      T,
    );
  }

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("ReadRecordsRequest__new0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set, boolean z, int i, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest(
    jni.JObject kClass,
    TimeRangeFilter timeRangeFilter,
    jni.JSet<jni.JObject> set0,
    bool z,
    int i,
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return ReadRecordsRequest.fromReference(
        T,
        _new0(kClass.reference.pointer, timeRangeFilter.reference.pointer,
                set0.reference.pointer, z ? 1 : 0, i, string.reference.pointer)
            .reference);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("ReadRecordsRequest__new1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set, boolean z, int i, java.lang.String string, int i1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest.new1(
    jni.JObject kClass,
    TimeRangeFilter timeRangeFilter,
    jni.JSet<jni.JObject> set0,
    bool z,
    int i,
    jni.JString string,
    int i1,
    jni.JObject defaultConstructorMarker, {
    required jni.JObjType<$T> T,
  }) {
    return ReadRecordsRequest.fromReference(
        T,
        _new1(
                kClass.reference.pointer,
                timeRangeFilter.reference.pointer,
                set0.reference.pointer,
                z ? 1 : 0,
                i,
                string.reference.pointer,
                i1,
                defaultConstructorMarker.reference.pointer)
            .reference);
  }

  static final _equals = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ReadRecordsRequest__equals")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, object.reference.pointer).boolean;
  }

  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ReadRecordsRequest__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer).integer;
  }
}

final class $ReadRecordsRequestType<$T extends jni.JObject>
    extends jni.JObjType<ReadRecordsRequest<$T>> {
  final jni.JObjType<$T> T;

  const $ReadRecordsRequestType(
    this.T,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/ReadRecordsRequest;";

  @override
  ReadRecordsRequest<$T> fromReference(jni.JReference reference) =>
      ReadRecordsRequest.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($ReadRecordsRequestType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ReadRecordsRequestType<$T>) &&
        other is $ReadRecordsRequestType<$T> &&
        T == other.T;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregationResult
class AggregationResult extends jni.JObject {
  @override
  late final jni.JObjType<AggregationResult> $type = type;

  AggregationResult.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $AggregationResultType();
  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__new0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Map map, java.util.Map map1, java.util.Set set)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregationResult(
    jni.JMap<jni.JString, jni.JLong> map,
    jni.JMap<jni.JString, jni.JDouble> map1,
    jni.JSet<jni.JObject> set0,
  ) {
    return AggregationResult.fromReference(_new0(map.reference.pointer,
            map1.reference.pointer, set0.reference.pointer)
        .reference);
  }

  static final _getDataOrigins = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "AggregationResult__getDataOrigins")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.util.Set getDataOrigins()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JObject> getDataOrigins() {
    return _getDataOrigins(reference.pointer)
        .object(const jni.JSetType(jni.JObjectType()));
  }

  static final _hasMetric = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__hasMetric")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasMetric(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  bool hasMetric(
    AggregateMetric<jni.JObject> aggregateMetric,
  ) {
    return _hasMetric(reference.pointer, aggregateMetric.reference.pointer)
        .boolean;
  }

  static final _contains = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__contains")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean contains(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  bool contains(
    AggregateMetric<jni.JObject> aggregateMetric,
  ) {
    return _contains(reference.pointer, aggregateMetric.reference.pointer)
        .boolean;
  }

  static final _getMetric = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__getMetric")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final T getMetric(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  /// The returned object must be released after use, by calling the [release] method.
  $T getMetric<$T extends jni.JObject>(
    AggregateMetric<$T> aggregateMetric, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      (aggregateMetric.$type as $AggregateMetricType).T,
    ]) as jni.JObjType<$T>;
    return _getMetric(reference.pointer, aggregateMetric.reference.pointer)
        .object(T);
  }

  static final _get0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregationResult__get0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final T get(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  /// The returned object must be released after use, by calling the [release] method.
  $T get0<$T extends jni.JObject>(
    AggregateMetric<$T> aggregateMetric, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      (aggregateMetric.$type as $AggregateMetricType).T,
    ]) as jni.JObjType<$T>;
    return _get0(reference.pointer, aggregateMetric.reference.pointer)
        .object(T);
  }
}

final class $AggregationResultType extends jni.JObjType<AggregationResult> {
  const $AggregationResultType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregationResult;";

  @override
  AggregationResult fromReference(jni.JReference reference) =>
      AggregationResult.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregationResultType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregationResultType) &&
        other is $AggregationResultType;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$AggregationType
class AggregateMetric_AggregationType extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_AggregationType> $type = type;

  AggregateMetric_AggregationType.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateMetric_AggregationTypeType();
  static final _get_DURATION =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_AggregateMetric_AggregationType__DURATION")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType DURATION
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get DURATION =>
      _get_DURATION().object(const $AggregateMetric_AggregationTypeType());

  static final _get_AVERAGE =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_AggregateMetric_AggregationType__AVERAGE")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType AVERAGE
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get AVERAGE =>
      _get_AVERAGE().object(const $AggregateMetric_AggregationTypeType());

  static final _get_MINIMUM =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_AggregateMetric_AggregationType__MINIMUM")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType MINIMUM
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get MINIMUM =>
      _get_MINIMUM().object(const $AggregateMetric_AggregationTypeType());

  static final _get_MAXIMUM =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_AggregateMetric_AggregationType__MAXIMUM")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType MAXIMUM
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get MAXIMUM =>
      _get_MAXIMUM().object(const $AggregateMetric_AggregationTypeType());

  static final _get_TOTAL =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_AggregateMetric_AggregationType__TOTAL")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType TOTAL
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get TOTAL =>
      _get_TOTAL().object(const $AggregateMetric_AggregationTypeType());

  static final _get_COUNT =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_AggregateMetric_AggregationType__COUNT")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType COUNT
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get COUNT =>
      _get_COUNT().object(const $AggregateMetric_AggregationTypeType());

  static final _getAggregationTypeString = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "AggregateMetric_AggregationType__getAggregationTypeString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getAggregationTypeString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAggregationTypeString() {
    return _getAggregationTypeString(reference.pointer)
        .object(const jni.JStringType());
  }

  static final _values =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "AggregateMetric_AggregationType__values")
          .asFunction<jni.JniResult Function()>();

  /// from: static public androidx.health.connect.client.aggregate.AggregateMetric$AggregationType[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<AggregateMetric_AggregationType> values() {
    return _values()
        .object(const jni.JArrayType($AggregateMetric_AggregationTypeType()));
  }

  static final _valueOf = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "AggregateMetric_AggregationType__valueOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.health.connect.client.aggregate.AggregateMetric$AggregationType valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType valueOf(
    jni.JString string,
  ) {
    return _valueOf(string.reference.pointer)
        .object(const $AggregateMetric_AggregationTypeType());
  }
}

final class $AggregateMetric_AggregationTypeType
    extends jni.JObjType<AggregateMetric_AggregationType> {
  const $AggregateMetric_AggregationTypeType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;";

  @override
  AggregateMetric_AggregationType fromReference(jni.JReference reference) =>
      AggregateMetric_AggregationType.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateMetric_AggregationTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric_AggregationTypeType) &&
        other is $AggregateMetric_AggregationTypeType;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$Companion
class AggregateMetric_Companion extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_Companion> $type = type;

  AggregateMetric_Companion.fromReference(
    super.reference,
  ) : super.fromReference();

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateMetric_CompanionType();
  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "AggregateMetric_Companion__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateMetric_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return AggregateMetric_Companion.fromReference(
        _new0(defaultConstructorMarker.reference.pointer).reference);
  }
}

final class $AggregateMetric_CompanionType
    extends jni.JObjType<AggregateMetric_Companion> {
  const $AggregateMetric_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$Companion;";

  @override
  AggregateMetric_Companion fromReference(jni.JReference reference) =>
      AggregateMetric_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateMetric_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric_CompanionType) &&
        other is $AggregateMetric_CompanionType;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$Converter$FromDouble
class AggregateMetric_Converter_FromDouble<$R extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_Converter_FromDouble<$R>> $type =
      type(R);

  final jni.JObjType<$R> R;

  AggregateMetric_Converter_FromDouble.fromReference(
    this.R,
    jni.JReference reference,
  ) : super.fromReference(reference);

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric_Converter_FromDoubleType<$R>
      type<$R extends jni.JObject>(
    jni.JObjType<$R> R,
  ) {
    return $AggregateMetric_Converter_FromDoubleType(
      R,
    );
  }
}

final class $AggregateMetric_Converter_FromDoubleType<$R extends jni.JObject>
    extends jni.JObjType<AggregateMetric_Converter_FromDouble<$R>> {
  final jni.JObjType<$R> R;

  const $AggregateMetric_Converter_FromDoubleType(
    this.R,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$Converter$FromDouble;";

  @override
  AggregateMetric_Converter_FromDouble<$R> fromReference(
          jni.JReference reference) =>
      AggregateMetric_Converter_FromDouble.fromReference(R, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($AggregateMetric_Converter_FromDoubleType, R);

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateMetric_Converter_FromDoubleType<$R>) &&
        other is $AggregateMetric_Converter_FromDoubleType<$R> &&
        R == other.R;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$Converter$FromLong
class AggregateMetric_Converter_FromLong<$R extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_Converter_FromLong<$R>> $type =
      type(R);

  final jni.JObjType<$R> R;

  AggregateMetric_Converter_FromLong.fromReference(
    this.R,
    jni.JReference reference,
  ) : super.fromReference(reference);

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric_Converter_FromLongType<$R>
      type<$R extends jni.JObject>(
    jni.JObjType<$R> R,
  ) {
    return $AggregateMetric_Converter_FromLongType(
      R,
    );
  }
}

final class $AggregateMetric_Converter_FromLongType<$R extends jni.JObject>
    extends jni.JObjType<AggregateMetric_Converter_FromLong<$R>> {
  final jni.JObjType<$R> R;

  const $AggregateMetric_Converter_FromLongType(
    this.R,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$Converter$FromLong;";

  @override
  AggregateMetric_Converter_FromLong<$R> fromReference(
          jni.JReference reference) =>
      AggregateMetric_Converter_FromLong.fromReference(R, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($AggregateMetric_Converter_FromLongType, R);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric_Converter_FromLongType<$R>) &&
        other is $AggregateMetric_Converter_FromLongType<$R> &&
        R == other.R;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$Converter
class AggregateMetric_Converter<$T extends jni.JObject, $R extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_Converter<$T, $R>> $type = type(T, R);

  final jni.JObjType<$T> T;
  final jni.JObjType<$R> R;

  AggregateMetric_Converter.fromReference(
    this.T,
    this.R,
    jni.JReference reference,
  ) : super.fromReference(reference);

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric_ConverterType<$T, $R>
      type<$T extends jni.JObject, $R extends jni.JObject>(
    jni.JObjType<$T> T,
    jni.JObjType<$R> R,
  ) {
    return $AggregateMetric_ConverterType(
      T,
      R,
    );
  }
}

final class $AggregateMetric_ConverterType<$T extends jni.JObject,
        $R extends jni.JObject>
    extends jni.JObjType<AggregateMetric_Converter<$T, $R>> {
  final jni.JObjType<$T> T;
  final jni.JObjType<$R> R;

  const $AggregateMetric_ConverterType(
    this.T,
    this.R,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$Converter;";

  @override
  AggregateMetric_Converter<$T, $R> fromReference(jni.JReference reference) =>
      AggregateMetric_Converter.fromReference(T, R, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($AggregateMetric_ConverterType, T, R);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric_ConverterType<$T, $R>) &&
        other is $AggregateMetric_ConverterType<$T, $R> &&
        T == other.T &&
        R == other.R;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric
class AggregateMetric<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  AggregateMetric.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  /// The type which includes information such as the signature of this class.
  static $AggregateMetricType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $AggregateMetricType(
      T,
    );
  }

  static final _get_Companion =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_AggregateMetric__Companion")
          .asFunction<jni.JniResult Function()>();

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_Companion get Companion =>
      _get_Companion().object(const $AggregateMetric_CompanionType());

  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("AggregateMetric__new0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(androidx.health.connect.client.aggregate.AggregateMetric$Converter converter, java.lang.String string, androidx.health.connect.client.aggregate.AggregateMetric$AggregationType aggregationType, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateMetric(
    AggregateMetric_Converter<jni.JObject, $T> converter,
    jni.JString string,
    AggregateMetric_AggregationType aggregationType,
    jni.JString string1, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      (converter.$type as $AggregateMetric_ConverterType).R,
    ]) as jni.JObjType<$T>;
    return AggregateMetric.fromReference(
        T,
        _new0(converter.reference.pointer, string.reference.pointer,
                aggregationType.reference.pointer, string1.reference.pointer)
            .reference);
  }
}

final class $AggregateMetricType<$T extends jni.JObject>
    extends jni.JObjType<AggregateMetric<$T>> {
  final jni.JObjType<$T> T;

  const $AggregateMetricType(
    this.T,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric;";

  @override
  AggregateMetric<$T> fromReference(jni.JReference reference) =>
      AggregateMetric.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($AggregateMetricType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetricType<$T>) &&
        other is $AggregateMetricType<$T> &&
        T == other.T;
  }
}
